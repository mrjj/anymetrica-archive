/**
 * @file protos/anymetrica/credential.proto
 *
 * @fileOverview Credential entity type
 *
 * @package anymetrica.credential
 */
syntax = "proto3";

/**
 * __Credential Entities__
 *
 * `Credential` is central gear of all access management routines that is required for almost any RPC API call
 * excluding `Heartbeat` method.
 *
 * Server considering `Credential` record valid if all of the following conditions are met:
 *
 * - `token` or `username` + `namespace` field is equal to value stored on server-side
 * - `is_revoked` set to `false`
 * - `is_not_set` set to `false`
 * - `is_deleted` set to `false`
 * - `expires_ts` is after current server time
 *
 * If `Credential` record is valid user RPC call will be executed respecting next step of access level check
 * that depends on full set of __outgoing__ relation of access or ownership related type
 * from given valid `Credential` entity and other entities that
 * are affected by RPC call (including `Credential` record itself).
 */

// TODO(post.ilya@gamail.com) add SecurID support for mobile clients
// TODO(post.ilya@gamail.com) add Google Authenticator support for mobile clients

package anymetrica.credential;
option java_package = "com.anymetrica.credential";

import "google/protobuf/timestamp.proto";
import "metadata.proto";
import "request.proto";

// Username and password credential
message UsernamePassword {
  // Unique Entity identifier
  string id = 1;

   // Entity Metadata
  anymetrica.metadata.Metadata metadata = 2;

  // Public part of credentials
  string username = 8;

  // Namespace part of username to define e.g. organisation accounts scope
  // TODO: currently just ignored by business logic
  string namespace = 9;

  // Private part of credentials
  string password = 10;

  // Flag that supposed to enable automatic credential regeneration (like session token) or will not allow credential
  // to be used before they was defined.
  bool is_not_set = 16;

  // Credential could not be used any more and will not auto regenerate or change other way. User should get message
  // about this different than for deleted record that supposed to be transparent to API user completely.
  bool is_revoked = 20;

  // UTC TimeStamp from which credentials are supposed to be auto-revoked.
  // be restricted to avoid conflict when key that no one read before is currently used.
  google.protobuf.Timestamp expires_ts = 64;
}

// `UsernamePassword` list container
message UsernamePasswords {
  // Request metadata
  anymetrica.request.RequestMetadata request = 2;
  // Response metadata
  anymetrica.request.ResponseMetadata response = 4;

  // Result entities
  repeated UsernamePassword entities = 8;
}

// Session token credential that supposed to have limited lifetime
message SessionToken {
  // Unique Entity identifier
  string id = 1;

   // Entity Metadata
  anymetrica.metadata.Metadata metadata = 2;

  // Public part of credentials
  string token = 10 [deprecated=true];
  string session_token = 11;

  // Flag that supposed to enable automatic credential regeneration (like session token) or will not allow credential
  // to be used before they was defined.
  bool is_not_set = 16;

  // Credential could not be used any more and will not auto regenerate or change other way. User should get message
  // about this different than for deleted record that supposed to be transparent to API user completely.
  bool is_revoked = 20;

  // UTC TimeStamp from which credentials are supposed to be auto-revoked.
  // be restricted to avoid conflict when key that no one read before is currently used.
  google.protobuf.Timestamp expires_ts = 64;
}

// `SessionToken` list container
message SessionTokens {
  // Request metadata
  anymetrica.request.RequestMetadata request = 2;
  // Response metadata
  anymetrica.request.ResponseMetadata response = 4;

  // Result entities
  repeated SessionToken entities = 8;
}


// [One-Time Password (OTP)](https://en.wikipedia.org/wiki/One-time_password) credential
//
// This credential don't have private part and will go revoked after any kind of `Merge*` or `*Reset` RPC call
// will be executed successful against any non-zero number of Entities
// to which this credential have `CAN_WRITE` and/or `CAN_WRITE_RELATIONS` relation defined.
// For this Credential type `private` field` is ignored and only `public` field is required.
message OTP {
  // Unique Entity identifier
  string id = 1;

   // Entity Metadata
  anymetrica.metadata.Metadata metadata = 2;

  // Private part of credentials
  string otp = 10;

  // Flag that supposed to enable automatic credential regeneration (like session token) or will not allow credential
  // to be used before they was defined.
  bool is_not_set = 16;

  // Credential could not be used any more and will not auto regenerate or change other way. User should get message
  // about this different than for deleted record that supposed to be transparent to API user completely.
  bool is_revoked = 20;

  // UTC TimeStamp from which credentials are supposed to be auto-revoked.
  // be restricted to avoid conflict when key that no one read before is currently used.
  google.protobuf.Timestamp expires_ts = 64;
}

// `OTP` list container
message OTPs {
  // Request metadata
  anymetrica.request.RequestMetadata request = 2;
  // Response metadata
  anymetrica.request.ResponseMetadata response = 4;

  // Flag that supposed to enable automatic credential regeneration (like session token) or will not allow credential
  // to be used before they was defined.
  bool is_not_set = 16;

  // Credential could not be used any more and will not auto regenerate or change other way. User should get message
  // about this different than for deleted record that supposed to be transparent to API user completely.
  bool is_revoked = 20;

  // Result entities
  repeated OTP entities = 8;
}


// [Limited lifetime one time password (TOTP)](https://tools.ietf.org/html/rfc6238)
message TOTP {
  // Unique Entity identifier
  string id = 1;

   // Entity Metadata
  anymetrica.metadata.Metadata metadata = 2;

  // TOTP Password
  string totp = 10;

  // Credential could not be used any more and will not auto regenerate or change other way. User should get message
  // about this different than for deleted record that supposed to be transparent to API user completely.
  bool is_revoked = 20;

  // UTC TimeStamp from which credentials are supposed to be auto-revoked.
  // be restricted to avoid conflict when key that no one read before is currently used.
  google.protobuf.Timestamp expires_ts = 64;
}

// `TOTP` list container
message TOTPs {
  // Request metadata
  anymetrica.request.RequestMetadata request = 2;
  // Response metadata
  anymetrica.request.ResponseMetadata response = 4;

  // Result entities
  repeated TOTP entities = 8;
}

message Credential {
  oneof credential {
    OTP otp = 8;
    TOTP totp = 9;
    SessionToken session_token = 16;
    UsernamePassword username_password = 17;
  }
}
