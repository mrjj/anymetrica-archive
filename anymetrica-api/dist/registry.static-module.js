(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    $root.anymetrica = (function() {
    
        /**
         * Namespace anymetrica.
         * @exports anymetrica
         * @namespace
         */
        var anymetrica = {};
    
        anymetrica.registry = (function() {
    
            /**
             * Namespace registry.
             * @memberof anymetrica
             * @namespace
             */
            var registry = {};
    
            registry.RegistryService = (function() {
    
                /**
                 * Constructs a new RegistryService service.
                 * @memberof anymetrica.registry
                 * @classdesc Represents a RegistryService
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function RegistryService(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (RegistryService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = RegistryService;
    
                /**
                 * Creates new RegistryService service using the specified rpc implementation.
                 * @function create
                 * @memberof anymetrica.registry.RegistryService
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {RegistryService} RPC service. Useful where requests and/or responses are streamed.
                 */
                RegistryService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#heartbeat}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef HeartbeatCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.heartbeat.Heartbeat} [response] Heartbeat
                 */
    
                /**
                 * Calls Heartbeat.
                 * @function heartbeat
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.heartbeat.IHeartbeat} request Heartbeat message or plain object
                 * @param {anymetrica.registry.RegistryService.HeartbeatCallback} callback Node-style callback called with the error, if any, and Heartbeat
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.heartbeat = function heartbeat(request, callback) {
                    return this.rpcCall(heartbeat, $root.anymetrica.heartbeat.Heartbeat, $root.anymetrica.heartbeat.Heartbeat, request, callback);
                }, "name", { value: "Heartbeat" });
    
                /**
                 * Calls Heartbeat.
                 * @function heartbeat
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.heartbeat.IHeartbeat} request Heartbeat message or plain object
                 * @returns {Promise<anymetrica.heartbeat.Heartbeat>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getMetadata}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetMetadataCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.request.ShallowEntities} [response] ShallowEntities
                 */
    
                /**
                 * Calls GetMetadata.
                 * @function getMetadata
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetMetadataCallback} callback Node-style callback called with the error, if any, and ShallowEntities
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getMetadata = function getMetadata(request, callback) {
                    return this.rpcCall(getMetadata, $root.anymetrica.request.ListRequest, $root.anymetrica.request.ShallowEntities, request, callback);
                }, "name", { value: "GetMetadata" });
    
                /**
                 * Calls GetMetadata.
                 * @function getMetadata
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.request.ShallowEntities>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#delete_}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef DeleteCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.request.ShallowEntities} [response] ShallowEntities
                 */
    
                /**
                 * Calls Delete.
                 * @function delete
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.DeleteCallback} callback Node-style callback called with the error, if any, and ShallowEntities
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype["delete"] = function delete_(request, callback) {
                    return this.rpcCall(delete_, $root.anymetrica.request.ListRequest, $root.anymetrica.request.ShallowEntities, request, callback);
                }, "name", { value: "Delete" });
    
                /**
                 * Calls Delete.
                 * @function delete
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.request.ShallowEntities>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#discover}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef DiscoverCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.relation.Relations} [response] Relations
                 */
    
                /**
                 * Calls Discover.
                 * @function discover
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.DiscoverCallback} callback Node-style callback called with the error, if any, and Relations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.discover = function discover(request, callback) {
                    return this.rpcCall(discover, $root.anymetrica.request.ListRequest, $root.anymetrica.relation.Relations, request, callback);
                }, "name", { value: "Discover" });
    
                /**
                 * Calls Discover.
                 * @function discover
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.relation.Relations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeRelations}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeRelationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.relation.Relations} [response] Relations
                 */
    
                /**
                 * Calls MergeRelations.
                 * @function mergeRelations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.relation.IRelations} request Relations message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeRelationsCallback} callback Node-style callback called with the error, if any, and Relations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeRelations = function mergeRelations(request, callback) {
                    return this.rpcCall(mergeRelations, $root.anymetrica.relation.Relations, $root.anymetrica.relation.Relations, request, callback);
                }, "name", { value: "MergeRelations" });
    
                /**
                 * Calls MergeRelations.
                 * @function mergeRelations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.relation.IRelations} request Relations message or plain object
                 * @returns {Promise<anymetrica.relation.Relations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#removeRelations}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef RemoveRelationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.relation.Relations} [response] Relations
                 */
    
                /**
                 * Calls RemoveRelations.
                 * @function removeRelations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.relation.IRelations} request Relations message or plain object
                 * @param {anymetrica.registry.RegistryService.RemoveRelationsCallback} callback Node-style callback called with the error, if any, and Relations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.removeRelations = function removeRelations(request, callback) {
                    return this.rpcCall(removeRelations, $root.anymetrica.relation.Relations, $root.anymetrica.relation.Relations, request, callback);
                }, "name", { value: "RemoveRelations" });
    
                /**
                 * Calls RemoveRelations.
                 * @function removeRelations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.relation.IRelations} request Relations message or plain object
                 * @returns {Promise<anymetrica.relation.Relations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#replaceRelations}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef ReplaceRelationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.relation.Relations} [response] Relations
                 */
    
                /**
                 * Calls ReplaceRelations.
                 * @function replaceRelations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.relation.IRelations} request Relations message or plain object
                 * @param {anymetrica.registry.RegistryService.ReplaceRelationsCallback} callback Node-style callback called with the error, if any, and Relations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.replaceRelations = function replaceRelations(request, callback) {
                    return this.rpcCall(replaceRelations, $root.anymetrica.relation.Relations, $root.anymetrica.relation.Relations, request, callback);
                }, "name", { value: "ReplaceRelations" });
    
                /**
                 * Calls ReplaceRelations.
                 * @function replaceRelations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.relation.IRelations} request Relations message or plain object
                 * @returns {Promise<anymetrica.relation.Relations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#transferOwnership}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef TransferOwnershipCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.request.TransferOwnerships} [response] TransferOwnerships
                 */
    
                /**
                 * Calls TransferOwnership.
                 * @function transferOwnership
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.ITransferOwnerships} request TransferOwnerships message or plain object
                 * @param {anymetrica.registry.RegistryService.TransferOwnershipCallback} callback Node-style callback called with the error, if any, and TransferOwnerships
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.transferOwnership = function transferOwnership(request, callback) {
                    return this.rpcCall(transferOwnership, $root.anymetrica.request.TransferOwnerships, $root.anymetrica.request.TransferOwnerships, request, callback);
                }, "name", { value: "TransferOwnership" });
    
                /**
                 * Calls TransferOwnership.
                 * @function transferOwnership
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.ITransferOwnerships} request TransferOwnerships message or plain object
                 * @returns {Promise<anymetrica.request.TransferOwnerships>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeOTPs}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeOTPsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.credential.OTPs} [response] OTPs
                 */
    
                /**
                 * Calls MergeOTPs.
                 * @function mergeOTPs
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.credential.IOTPs} request OTPs message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeOTPsCallback} callback Node-style callback called with the error, if any, and OTPs
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeOTPs = function mergeOTPs(request, callback) {
                    return this.rpcCall(mergeOTPs, $root.anymetrica.credential.OTPs, $root.anymetrica.credential.OTPs, request, callback);
                }, "name", { value: "MergeOTPs" });
    
                /**
                 * Calls MergeOTPs.
                 * @function mergeOTPs
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.credential.IOTPs} request OTPs message or plain object
                 * @returns {Promise<anymetrica.credential.OTPs>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getOTPs}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetOTPsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.credential.OTPs} [response] OTPs
                 */
    
                /**
                 * Calls GetOTPs.
                 * @function getOTPs
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetOTPsCallback} callback Node-style callback called with the error, if any, and OTPs
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getOTPs = function getOTPs(request, callback) {
                    return this.rpcCall(getOTPs, $root.anymetrica.request.ListRequest, $root.anymetrica.credential.OTPs, request, callback);
                }, "name", { value: "GetOTPs" });
    
                /**
                 * Calls GetOTPs.
                 * @function getOTPs
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.credential.OTPs>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeTOTPs}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeTOTPsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.credential.TOTPs} [response] TOTPs
                 */
    
                /**
                 * Calls MergeTOTPs.
                 * @function mergeTOTPs
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.credential.ITOTPs} request TOTPs message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeTOTPsCallback} callback Node-style callback called with the error, if any, and TOTPs
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeTOTPs = function mergeTOTPs(request, callback) {
                    return this.rpcCall(mergeTOTPs, $root.anymetrica.credential.TOTPs, $root.anymetrica.credential.TOTPs, request, callback);
                }, "name", { value: "MergeTOTPs" });
    
                /**
                 * Calls MergeTOTPs.
                 * @function mergeTOTPs
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.credential.ITOTPs} request TOTPs message or plain object
                 * @returns {Promise<anymetrica.credential.TOTPs>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getTOTPs}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetTOTPsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.credential.TOTPs} [response] TOTPs
                 */
    
                /**
                 * Calls GetTOTPs.
                 * @function getTOTPs
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetTOTPsCallback} callback Node-style callback called with the error, if any, and TOTPs
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getTOTPs = function getTOTPs(request, callback) {
                    return this.rpcCall(getTOTPs, $root.anymetrica.request.ListRequest, $root.anymetrica.credential.TOTPs, request, callback);
                }, "name", { value: "GetTOTPs" });
    
                /**
                 * Calls GetTOTPs.
                 * @function getTOTPs
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.credential.TOTPs>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeSessionTokens}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeSessionTokensCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.credential.SessionTokens} [response] SessionTokens
                 */
    
                /**
                 * Calls MergeSessionTokens.
                 * @function mergeSessionTokens
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.credential.ISessionTokens} request SessionTokens message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeSessionTokensCallback} callback Node-style callback called with the error, if any, and SessionTokens
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeSessionTokens = function mergeSessionTokens(request, callback) {
                    return this.rpcCall(mergeSessionTokens, $root.anymetrica.credential.SessionTokens, $root.anymetrica.credential.SessionTokens, request, callback);
                }, "name", { value: "MergeSessionTokens" });
    
                /**
                 * Calls MergeSessionTokens.
                 * @function mergeSessionTokens
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.credential.ISessionTokens} request SessionTokens message or plain object
                 * @returns {Promise<anymetrica.credential.SessionTokens>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getSessionTokens}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetSessionTokensCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.credential.SessionTokens} [response] SessionTokens
                 */
    
                /**
                 * Calls GetSessionTokens.
                 * @function getSessionTokens
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetSessionTokensCallback} callback Node-style callback called with the error, if any, and SessionTokens
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getSessionTokens = function getSessionTokens(request, callback) {
                    return this.rpcCall(getSessionTokens, $root.anymetrica.request.ListRequest, $root.anymetrica.credential.SessionTokens, request, callback);
                }, "name", { value: "GetSessionTokens" });
    
                /**
                 * Calls GetSessionTokens.
                 * @function getSessionTokens
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.credential.SessionTokens>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeUsernamePasswords}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeUsernamePasswordsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.credential.UsernamePasswords} [response] UsernamePasswords
                 */
    
                /**
                 * Calls MergeUsernamePasswords.
                 * @function mergeUsernamePasswords
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.credential.IUsernamePasswords} request UsernamePasswords message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeUsernamePasswordsCallback} callback Node-style callback called with the error, if any, and UsernamePasswords
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeUsernamePasswords = function mergeUsernamePasswords(request, callback) {
                    return this.rpcCall(mergeUsernamePasswords, $root.anymetrica.credential.UsernamePasswords, $root.anymetrica.credential.UsernamePasswords, request, callback);
                }, "name", { value: "MergeUsernamePasswords" });
    
                /**
                 * Calls MergeUsernamePasswords.
                 * @function mergeUsernamePasswords
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.credential.IUsernamePasswords} request UsernamePasswords message or plain object
                 * @returns {Promise<anymetrica.credential.UsernamePasswords>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getUsernamePasswords}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetUsernamePasswordsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.credential.UsernamePasswords} [response] UsernamePasswords
                 */
    
                /**
                 * Calls GetUsernamePasswords.
                 * @function getUsernamePasswords
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetUsernamePasswordsCallback} callback Node-style callback called with the error, if any, and UsernamePasswords
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getUsernamePasswords = function getUsernamePasswords(request, callback) {
                    return this.rpcCall(getUsernamePasswords, $root.anymetrica.request.ListRequest, $root.anymetrica.credential.UsernamePasswords, request, callback);
                }, "name", { value: "GetUsernamePasswords" });
    
                /**
                 * Calls GetUsernamePasswords.
                 * @function getUsernamePasswords
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.credential.UsernamePasswords>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeOrganizations}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeOrganizationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.organization.Organizations} [response] Organizations
                 */
    
                /**
                 * Calls MergeOrganizations.
                 * @function mergeOrganizations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.organization.IOrganizations} request Organizations message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeOrganizationsCallback} callback Node-style callback called with the error, if any, and Organizations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeOrganizations = function mergeOrganizations(request, callback) {
                    return this.rpcCall(mergeOrganizations, $root.anymetrica.organization.Organizations, $root.anymetrica.organization.Organizations, request, callback);
                }, "name", { value: "MergeOrganizations" });
    
                /**
                 * Calls MergeOrganizations.
                 * @function mergeOrganizations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.organization.IOrganizations} request Organizations message or plain object
                 * @returns {Promise<anymetrica.organization.Organizations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getOrganizations}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetOrganizationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.organization.Organizations} [response] Organizations
                 */
    
                /**
                 * Calls GetOrganizations.
                 * @function getOrganizations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetOrganizationsCallback} callback Node-style callback called with the error, if any, and Organizations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getOrganizations = function getOrganizations(request, callback) {
                    return this.rpcCall(getOrganizations, $root.anymetrica.request.ListRequest, $root.anymetrica.organization.Organizations, request, callback);
                }, "name", { value: "GetOrganizations" });
    
                /**
                 * Calls GetOrganizations.
                 * @function getOrganizations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.organization.Organizations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeHumans}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeHumansCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.human.Humans} [response] Humans
                 */
    
                /**
                 * Calls MergeHumans.
                 * @function mergeHumans
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.human.IHumans} request Humans message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeHumansCallback} callback Node-style callback called with the error, if any, and Humans
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeHumans = function mergeHumans(request, callback) {
                    return this.rpcCall(mergeHumans, $root.anymetrica.human.Humans, $root.anymetrica.human.Humans, request, callback);
                }, "name", { value: "MergeHumans" });
    
                /**
                 * Calls MergeHumans.
                 * @function mergeHumans
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.human.IHumans} request Humans message or plain object
                 * @returns {Promise<anymetrica.human.Humans>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getHumans}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetHumansCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.human.Humans} [response] Humans
                 */
    
                /**
                 * Calls GetHumans.
                 * @function getHumans
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetHumansCallback} callback Node-style callback called with the error, if any, and Humans
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getHumans = function getHumans(request, callback) {
                    return this.rpcCall(getHumans, $root.anymetrica.request.ListRequest, $root.anymetrica.human.Humans, request, callback);
                }, "name", { value: "GetHumans" });
    
                /**
                 * Calls GetHumans.
                 * @function getHumans
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.human.Humans>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeDevices}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeDevicesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.device.Devices} [response] Devices
                 */
    
                /**
                 * Calls MergeDevices.
                 * @function mergeDevices
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.device.IDevices} request Devices message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeDevicesCallback} callback Node-style callback called with the error, if any, and Devices
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeDevices = function mergeDevices(request, callback) {
                    return this.rpcCall(mergeDevices, $root.anymetrica.device.Devices, $root.anymetrica.device.Devices, request, callback);
                }, "name", { value: "MergeDevices" });
    
                /**
                 * Calls MergeDevices.
                 * @function mergeDevices
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.device.IDevices} request Devices message or plain object
                 * @returns {Promise<anymetrica.device.Devices>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getDevices}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetDevicesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.device.Devices} [response] Devices
                 */
    
                /**
                 * Calls GetDevices.
                 * @function getDevices
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetDevicesCallback} callback Node-style callback called with the error, if any, and Devices
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getDevices = function getDevices(request, callback) {
                    return this.rpcCall(getDevices, $root.anymetrica.request.ListRequest, $root.anymetrica.device.Devices, request, callback);
                }, "name", { value: "GetDevices" });
    
                /**
                 * Calls GetDevices.
                 * @function getDevices
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.device.Devices>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeVehicles}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeVehiclesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.vehicle.Vehicles} [response] Vehicles
                 */
    
                /**
                 * Calls MergeVehicles.
                 * @function mergeVehicles
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.vehicle.IVehicles} request Vehicles message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeVehiclesCallback} callback Node-style callback called with the error, if any, and Vehicles
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeVehicles = function mergeVehicles(request, callback) {
                    return this.rpcCall(mergeVehicles, $root.anymetrica.vehicle.Vehicles, $root.anymetrica.vehicle.Vehicles, request, callback);
                }, "name", { value: "MergeVehicles" });
    
                /**
                 * Calls MergeVehicles.
                 * @function mergeVehicles
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.vehicle.IVehicles} request Vehicles message or plain object
                 * @returns {Promise<anymetrica.vehicle.Vehicles>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getVehicles}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetVehiclesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.vehicle.Vehicles} [response] Vehicles
                 */
    
                /**
                 * Calls GetVehicles.
                 * @function getVehicles
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetVehiclesCallback} callback Node-style callback called with the error, if any, and Vehicles
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getVehicles = function getVehicles(request, callback) {
                    return this.rpcCall(getVehicles, $root.anymetrica.request.ListRequest, $root.anymetrica.vehicle.Vehicles, request, callback);
                }, "name", { value: "GetVehicles" });
    
                /**
                 * Calls GetVehicles.
                 * @function getVehicles
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.vehicle.Vehicles>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeContacts}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeContactsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.contact.Contacts} [response] Contacts
                 */
    
                /**
                 * Calls MergeContacts.
                 * @function mergeContacts
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.contact.IContacts} request Contacts message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeContactsCallback} callback Node-style callback called with the error, if any, and Contacts
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeContacts = function mergeContacts(request, callback) {
                    return this.rpcCall(mergeContacts, $root.anymetrica.contact.Contacts, $root.anymetrica.contact.Contacts, request, callback);
                }, "name", { value: "MergeContacts" });
    
                /**
                 * Calls MergeContacts.
                 * @function mergeContacts
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.contact.IContacts} request Contacts message or plain object
                 * @returns {Promise<anymetrica.contact.Contacts>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getContacts}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetContactsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.contact.Contacts} [response] Contacts
                 */
    
                /**
                 * Calls GetContacts.
                 * @function getContacts
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetContactsCallback} callback Node-style callback called with the error, if any, and Contacts
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getContacts = function getContacts(request, callback) {
                    return this.rpcCall(getContacts, $root.anymetrica.request.ListRequest, $root.anymetrica.contact.Contacts, request, callback);
                }, "name", { value: "GetContacts" });
    
                /**
                 * Calls GetContacts.
                 * @function getContacts
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.contact.Contacts>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeGroups}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeGroupsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.group.Groups} [response] Groups
                 */
    
                /**
                 * Calls MergeGroups.
                 * @function mergeGroups
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.group.IGroups} request Groups message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeGroupsCallback} callback Node-style callback called with the error, if any, and Groups
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeGroups = function mergeGroups(request, callback) {
                    return this.rpcCall(mergeGroups, $root.anymetrica.group.Groups, $root.anymetrica.group.Groups, request, callback);
                }, "name", { value: "MergeGroups" });
    
                /**
                 * Calls MergeGroups.
                 * @function mergeGroups
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.group.IGroups} request Groups message or plain object
                 * @returns {Promise<anymetrica.group.Groups>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getGroups}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetGroupsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.group.Groups} [response] Groups
                 */
    
                /**
                 * Calls GetGroups.
                 * @function getGroups
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetGroupsCallback} callback Node-style callback called with the error, if any, and Groups
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getGroups = function getGroups(request, callback) {
                    return this.rpcCall(getGroups, $root.anymetrica.request.ListRequest, $root.anymetrica.group.Groups, request, callback);
                }, "name", { value: "GetGroups" });
    
                /**
                 * Calls GetGroups.
                 * @function getGroups
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.group.Groups>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeLocations}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeLocationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.location.Locations} [response] Locations
                 */
    
                /**
                 * Calls MergeLocations.
                 * @function mergeLocations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.group.IGroups} request Groups message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeLocationsCallback} callback Node-style callback called with the error, if any, and Locations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeLocations = function mergeLocations(request, callback) {
                    return this.rpcCall(mergeLocations, $root.anymetrica.group.Groups, $root.anymetrica.location.Locations, request, callback);
                }, "name", { value: "MergeLocations" });
    
                /**
                 * Calls MergeLocations.
                 * @function mergeLocations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.group.IGroups} request Groups message or plain object
                 * @returns {Promise<anymetrica.location.Locations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getLocations}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetLocationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.location.Locations} [response] Locations
                 */
    
                /**
                 * Calls GetLocations.
                 * @function getLocations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetLocationsCallback} callback Node-style callback called with the error, if any, and Locations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getLocations = function getLocations(request, callback) {
                    return this.rpcCall(getLocations, $root.anymetrica.request.ListRequest, $root.anymetrica.location.Locations, request, callback);
                }, "name", { value: "GetLocations" });
    
                /**
                 * Calls GetLocations.
                 * @function getLocations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.location.Locations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergePostalAddresses}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergePostalAddressesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.postal_address.PostalAddresses} [response] PostalAddresses
                 */
    
                /**
                 * Calls MergePostalAddresses.
                 * @function mergePostalAddresses
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.group.IGroups} request Groups message or plain object
                 * @param {anymetrica.registry.RegistryService.MergePostalAddressesCallback} callback Node-style callback called with the error, if any, and PostalAddresses
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergePostalAddresses = function mergePostalAddresses(request, callback) {
                    return this.rpcCall(mergePostalAddresses, $root.anymetrica.group.Groups, $root.anymetrica.postal_address.PostalAddresses, request, callback);
                }, "name", { value: "MergePostalAddresses" });
    
                /**
                 * Calls MergePostalAddresses.
                 * @function mergePostalAddresses
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.group.IGroups} request Groups message or plain object
                 * @returns {Promise<anymetrica.postal_address.PostalAddresses>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getPostalAddresses}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetPostalAddressesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.postal_address.PostalAddresses} [response] PostalAddresses
                 */
    
                /**
                 * Calls GetPostalAddresses.
                 * @function getPostalAddresses
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetPostalAddressesCallback} callback Node-style callback called with the error, if any, and PostalAddresses
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getPostalAddresses = function getPostalAddresses(request, callback) {
                    return this.rpcCall(getPostalAddresses, $root.anymetrica.request.ListRequest, $root.anymetrica.postal_address.PostalAddresses, request, callback);
                }, "name", { value: "GetPostalAddresses" });
    
                /**
                 * Calls GetPostalAddresses.
                 * @function getPostalAddresses
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.postal_address.PostalAddresses>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeFiles}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeFilesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.file.Files} [response] Files
                 */
    
                /**
                 * Calls MergeFiles.
                 * @function mergeFiles
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.file.IFiles} request Files message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeFilesCallback} callback Node-style callback called with the error, if any, and Files
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeFiles = function mergeFiles(request, callback) {
                    return this.rpcCall(mergeFiles, $root.anymetrica.file.Files, $root.anymetrica.file.Files, request, callback);
                }, "name", { value: "MergeFiles" });
    
                /**
                 * Calls MergeFiles.
                 * @function mergeFiles
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.file.IFiles} request Files message or plain object
                 * @returns {Promise<anymetrica.file.Files>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getFiles}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetFilesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.file.Files} [response] Files
                 */
    
                /**
                 * Calls GetFiles.
                 * @function getFiles
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetFilesCallback} callback Node-style callback called with the error, if any, and Files
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getFiles = function getFiles(request, callback) {
                    return this.rpcCall(getFiles, $root.anymetrica.request.ListRequest, $root.anymetrica.file.Files, request, callback);
                }, "name", { value: "GetFiles" });
    
                /**
                 * Calls GetFiles.
                 * @function getFiles
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.file.Files>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeWaveforms}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeWaveformsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.waveform.Waveforms} [response] Waveforms
                 */
    
                /**
                 * Calls MergeWaveforms.
                 * @function mergeWaveforms
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.waveform.IWaveforms} request Waveforms message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeWaveformsCallback} callback Node-style callback called with the error, if any, and Waveforms
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeWaveforms = function mergeWaveforms(request, callback) {
                    return this.rpcCall(mergeWaveforms, $root.anymetrica.waveform.Waveforms, $root.anymetrica.waveform.Waveforms, request, callback);
                }, "name", { value: "MergeWaveforms" });
    
                /**
                 * Calls MergeWaveforms.
                 * @function mergeWaveforms
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.waveform.IWaveforms} request Waveforms message or plain object
                 * @returns {Promise<anymetrica.waveform.Waveforms>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getWaveforms}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetWaveformsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.waveform.Waveforms} [response] Waveforms
                 */
    
                /**
                 * Calls GetWaveforms.
                 * @function getWaveforms
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetWaveformsCallback} callback Node-style callback called with the error, if any, and Waveforms
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getWaveforms = function getWaveforms(request, callback) {
                    return this.rpcCall(getWaveforms, $root.anymetrica.request.ListRequest, $root.anymetrica.waveform.Waveforms, request, callback);
                }, "name", { value: "GetWaveforms" });
    
                /**
                 * Calls GetWaveforms.
                 * @function getWaveforms
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.waveform.Waveforms>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeVadResults}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeVadResultsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.vad.VadResults} [response] VadResults
                 */
    
                /**
                 * Calls MergeVadResults.
                 * @function mergeVadResults
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.vad.IVadResults} request VadResults message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeVadResultsCallback} callback Node-style callback called with the error, if any, and VadResults
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeVadResults = function mergeVadResults(request, callback) {
                    return this.rpcCall(mergeVadResults, $root.anymetrica.vad.VadResults, $root.anymetrica.vad.VadResults, request, callback);
                }, "name", { value: "MergeVadResults" });
    
                /**
                 * Calls MergeVadResults.
                 * @function mergeVadResults
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.vad.IVadResults} request VadResults message or plain object
                 * @returns {Promise<anymetrica.vad.VadResults>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getVadResults}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetVadResultsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.vad.VadResults} [response] VadResults
                 */
    
                /**
                 * Calls GetVadResults.
                 * @function getVadResults
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetVadResultsCallback} callback Node-style callback called with the error, if any, and VadResults
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getVadResults = function getVadResults(request, callback) {
                    return this.rpcCall(getVadResults, $root.anymetrica.request.ListRequest, $root.anymetrica.vad.VadResults, request, callback);
                }, "name", { value: "GetVadResults" });
    
                /**
                 * Calls GetVadResults.
                 * @function getVadResults
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.vad.VadResults>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#mergeOperations}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef MergeOperationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.operation.Operations} [response] Operations
                 */
    
                /**
                 * Calls MergeOperations.
                 * @function mergeOperations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.operation.IOperations} request Operations message or plain object
                 * @param {anymetrica.registry.RegistryService.MergeOperationsCallback} callback Node-style callback called with the error, if any, and Operations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.mergeOperations = function mergeOperations(request, callback) {
                    return this.rpcCall(mergeOperations, $root.anymetrica.operation.Operations, $root.anymetrica.operation.Operations, request, callback);
                }, "name", { value: "MergeOperations" });
    
                /**
                 * Calls MergeOperations.
                 * @function mergeOperations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.operation.IOperations} request Operations message or plain object
                 * @returns {Promise<anymetrica.operation.Operations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#getOperations}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef GetOperationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.operation.Operations} [response] Operations
                 */
    
                /**
                 * Calls GetOperations.
                 * @function getOperations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.GetOperationsCallback} callback Node-style callback called with the error, if any, and Operations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.getOperations = function getOperations(request, callback) {
                    return this.rpcCall(getOperations, $root.anymetrica.request.ListRequest, $root.anymetrica.operation.Operations, request, callback);
                }, "name", { value: "GetOperations" });
    
                /**
                 * Calls GetOperations.
                 * @function getOperations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.operation.Operations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#cancelOperations}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef CancelOperationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.operation.Operations} [response] Operations
                 */
    
                /**
                 * Calls CancelOperations.
                 * @function cancelOperations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.CancelOperationsCallback} callback Node-style callback called with the error, if any, and Operations
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.cancelOperations = function cancelOperations(request, callback) {
                    return this.rpcCall(cancelOperations, $root.anymetrica.request.ListRequest, $root.anymetrica.operation.Operations, request, callback);
                }, "name", { value: "CancelOperations" });
    
                /**
                 * Calls CancelOperations.
                 * @function cancelOperations
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.request.IListRequest} request ListRequest message or plain object
                 * @returns {Promise<anymetrica.operation.Operations>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link anymetrica.registry.RegistryService#requestDemo}.
                 * @memberof anymetrica.registry.RegistryService
                 * @typedef RequestDemoCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {anymetrica.request.EmptyResponse} [response] EmptyResponse
                 */
    
                /**
                 * Calls RequestDemo.
                 * @function requestDemo
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.demo_request.IDemoRequest} request DemoRequest message or plain object
                 * @param {anymetrica.registry.RegistryService.RequestDemoCallback} callback Node-style callback called with the error, if any, and EmptyResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(RegistryService.prototype.requestDemo = function requestDemo(request, callback) {
                    return this.rpcCall(requestDemo, $root.anymetrica.demo_request.DemoRequest, $root.anymetrica.request.EmptyResponse, request, callback);
                }, "name", { value: "RequestDemo" });
    
                /**
                 * Calls RequestDemo.
                 * @function requestDemo
                 * @memberof anymetrica.registry.RegistryService
                 * @instance
                 * @param {anymetrica.demo_request.IDemoRequest} request DemoRequest message or plain object
                 * @returns {Promise<anymetrica.request.EmptyResponse>} Promise
                 * @variation 2
                 */
    
                return RegistryService;
            })();
    
            return registry;
        })();
    
        anymetrica.heartbeat = (function() {
    
            /**
             * Namespace heartbeat.
             * @memberof anymetrica
             * @namespace
             */
            var heartbeat = {};
    
            heartbeat.Heartbeat = (function() {
    
                /**
                 * Properties of a Heartbeat.
                 * @memberof anymetrica.heartbeat
                 * @interface IHeartbeat
                 * @property {number|Long|null} [request_id] Heartbeat request_id
                 * @property {google.protobuf.ITimestamp|null} [client_ts] Heartbeat client_ts
                 * @property {google.protobuf.ITimestamp|null} [server_ts] Heartbeat server_ts
                 * @property {string|null} [server_message] Heartbeat server_message
                 */
    
                /**
                 * Constructs a new Heartbeat.
                 * @memberof anymetrica.heartbeat
                 * @classdesc Represents a Heartbeat.
                 * @implements IHeartbeat
                 * @constructor
                 * @param {anymetrica.heartbeat.IHeartbeat=} [properties] Properties to set
                 */
                function Heartbeat(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Heartbeat request_id.
                 * @member {number|Long} request_id
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @instance
                 */
                Heartbeat.prototype.request_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Heartbeat client_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} client_ts
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @instance
                 */
                Heartbeat.prototype.client_ts = null;
    
                /**
                 * Heartbeat server_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} server_ts
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @instance
                 */
                Heartbeat.prototype.server_ts = null;
    
                /**
                 * Heartbeat server_message.
                 * @member {string} server_message
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @instance
                 */
                Heartbeat.prototype.server_message = "";
    
                /**
                 * Creates a new Heartbeat instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @static
                 * @param {anymetrica.heartbeat.IHeartbeat=} [properties] Properties to set
                 * @returns {anymetrica.heartbeat.Heartbeat} Heartbeat instance
                 */
                Heartbeat.create = function create(properties) {
                    return new Heartbeat(properties);
                };
    
                /**
                 * Encodes the specified Heartbeat message. Does not implicitly {@link anymetrica.heartbeat.Heartbeat.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @static
                 * @param {anymetrica.heartbeat.IHeartbeat} message Heartbeat message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Heartbeat.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.request_id);
                    if (message.client_ts != null && message.hasOwnProperty("client_ts"))
                        $root.google.protobuf.Timestamp.encode(message.client_ts, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.server_ts != null && message.hasOwnProperty("server_ts"))
                        $root.google.protobuf.Timestamp.encode(message.server_ts, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.server_message != null && message.hasOwnProperty("server_message"))
                        writer.uint32(/* id 16, wireType 2 =*/130).string(message.server_message);
                    return writer;
                };
    
                /**
                 * Encodes the specified Heartbeat message, length delimited. Does not implicitly {@link anymetrica.heartbeat.Heartbeat.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @static
                 * @param {anymetrica.heartbeat.IHeartbeat} message Heartbeat message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Heartbeat.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Heartbeat message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.heartbeat.Heartbeat} Heartbeat
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Heartbeat.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.heartbeat.Heartbeat();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.request_id = reader.uint64();
                            break;
                        case 4:
                            message.client_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.server_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 16:
                            message.server_message = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Heartbeat message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.heartbeat.Heartbeat} Heartbeat
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Heartbeat.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Heartbeat message.
                 * @function verify
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Heartbeat.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (!$util.isInteger(message.request_id) && !(message.request_id && $util.isInteger(message.request_id.low) && $util.isInteger(message.request_id.high)))
                            return "request_id: integer|Long expected";
                    if (message.client_ts != null && message.hasOwnProperty("client_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.client_ts);
                        if (error)
                            return "client_ts." + error;
                    }
                    if (message.server_ts != null && message.hasOwnProperty("server_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.server_ts);
                        if (error)
                            return "server_ts." + error;
                    }
                    if (message.server_message != null && message.hasOwnProperty("server_message"))
                        if (!$util.isString(message.server_message))
                            return "server_message: string expected";
                    return null;
                };
    
                /**
                 * Creates a Heartbeat message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.heartbeat.Heartbeat} Heartbeat
                 */
                Heartbeat.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.heartbeat.Heartbeat)
                        return object;
                    var message = new $root.anymetrica.heartbeat.Heartbeat();
                    if (object.request_id != null)
                        if ($util.Long)
                            (message.request_id = $util.Long.fromValue(object.request_id)).unsigned = true;
                        else if (typeof object.request_id === "string")
                            message.request_id = parseInt(object.request_id, 10);
                        else if (typeof object.request_id === "number")
                            message.request_id = object.request_id;
                        else if (typeof object.request_id === "object")
                            message.request_id = new $util.LongBits(object.request_id.low >>> 0, object.request_id.high >>> 0).toNumber(true);
                    if (object.client_ts != null) {
                        if (typeof object.client_ts !== "object")
                            throw TypeError(".anymetrica.heartbeat.Heartbeat.client_ts: object expected");
                        message.client_ts = $root.google.protobuf.Timestamp.fromObject(object.client_ts);
                    }
                    if (object.server_ts != null) {
                        if (typeof object.server_ts !== "object")
                            throw TypeError(".anymetrica.heartbeat.Heartbeat.server_ts: object expected");
                        message.server_ts = $root.google.protobuf.Timestamp.fromObject(object.server_ts);
                    }
                    if (object.server_message != null)
                        message.server_message = String(object.server_message);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Heartbeat message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @static
                 * @param {anymetrica.heartbeat.Heartbeat} message Heartbeat
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Heartbeat.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.request_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.request_id = options.longs === String ? "0" : 0;
                        object.client_ts = null;
                        object.server_ts = null;
                        object.server_message = "";
                    }
                    if (message.request_id != null && message.hasOwnProperty("request_id"))
                        if (typeof message.request_id === "number")
                            object.request_id = options.longs === String ? String(message.request_id) : message.request_id;
                        else
                            object.request_id = options.longs === String ? $util.Long.prototype.toString.call(message.request_id) : options.longs === Number ? new $util.LongBits(message.request_id.low >>> 0, message.request_id.high >>> 0).toNumber(true) : message.request_id;
                    if (message.client_ts != null && message.hasOwnProperty("client_ts"))
                        object.client_ts = $root.google.protobuf.Timestamp.toObject(message.client_ts, options);
                    if (message.server_ts != null && message.hasOwnProperty("server_ts"))
                        object.server_ts = $root.google.protobuf.Timestamp.toObject(message.server_ts, options);
                    if (message.server_message != null && message.hasOwnProperty("server_message"))
                        object.server_message = message.server_message;
                    return object;
                };
    
                /**
                 * Converts this Heartbeat to JSON.
                 * @function toJSON
                 * @memberof anymetrica.heartbeat.Heartbeat
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Heartbeat.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Heartbeat;
            })();
    
            return heartbeat;
        })();
    
        anymetrica.relation = (function() {
    
            /**
             * Namespace relation.
             * @memberof anymetrica
             * @namespace
             */
            var relation = {};
    
            /**
             * RelationType enum.
             * @name anymetrica.relation.RelationType
             * @enum {string}
             * @property {number} RESTRICTED=0 RESTRICTED value
             * @property {number} CAN_RESET=1 CAN_RESET value
             * @property {number} CAN_READ=3 CAN_READ value
             * @property {number} CAN_WRITE=7 CAN_WRITE value
             * @property {number} CAN_READ_RELATIONS=15 CAN_READ_RELATIONS value
             * @property {number} CAN_WRITE_RELATIONS=31 CAN_WRITE_RELATIONS value
             * @property {number} OWNS=64 OWNS value
             * @property {number} ADMINISTRATING=66 ADMINISTRATING value
             * @property {number} CREATED=68 CREATED value
             * @property {number} HAVE_PART=72 HAVE_PART value
             * @property {number} HAVE_MEMBER=78 HAVE_MEMBER value
             * @property {number} INPUT=80 INPUT value
             * @property {number} OUTPUT=82 OUTPUT value
             * @property {number} CONTACT_WORK=104 CONTACT_WORK value
             * @property {number} CONTACT_WORK_GROUP=106 CONTACT_WORK_GROUP value
             * @property {number} CONTACT_PERSONAL=110 CONTACT_PERSONAL value
             * @property {number} CONTACT_FAMILY=112 CONTACT_FAMILY value
             * @property {number} CONTACT_ORGANISATION=116 CONTACT_ORGANISATION value
             * @property {number} CONTACT_NOTICED_USAGE=120 CONTACT_NOTICED_USAGE value
             * @property {number} CONTACT_DO_NOT_CALL=128 CONTACT_DO_NOT_CALL value
             */
            relation.RelationType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "RESTRICTED"] = 0;
                values[valuesById[1] = "CAN_RESET"] = 1;
                values[valuesById[3] = "CAN_READ"] = 3;
                values[valuesById[7] = "CAN_WRITE"] = 7;
                values[valuesById[15] = "CAN_READ_RELATIONS"] = 15;
                values[valuesById[31] = "CAN_WRITE_RELATIONS"] = 31;
                values[valuesById[64] = "OWNS"] = 64;
                values[valuesById[66] = "ADMINISTRATING"] = 66;
                values[valuesById[68] = "CREATED"] = 68;
                values[valuesById[72] = "HAVE_PART"] = 72;
                values[valuesById[78] = "HAVE_MEMBER"] = 78;
                values[valuesById[80] = "INPUT"] = 80;
                values[valuesById[82] = "OUTPUT"] = 82;
                values[valuesById[104] = "CONTACT_WORK"] = 104;
                values[valuesById[106] = "CONTACT_WORK_GROUP"] = 106;
                values[valuesById[110] = "CONTACT_PERSONAL"] = 110;
                values[valuesById[112] = "CONTACT_FAMILY"] = 112;
                values[valuesById[116] = "CONTACT_ORGANISATION"] = 116;
                values[valuesById[120] = "CONTACT_NOTICED_USAGE"] = 120;
                values[valuesById[128] = "CONTACT_DO_NOT_CALL"] = 128;
                return values;
            })();
    
            relation.Relation = (function() {
    
                /**
                 * Properties of a Relation.
                 * @memberof anymetrica.relation
                 * @interface IRelation
                 * @property {string|null} [id] Relation id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] Relation metadata
                 * @property {string|null} [from_id] Relation from_id
                 * @property {number|null} [from_depth] Relation from_depth
                 * @property {number|null} [from_depth_absolute] Relation from_depth_absolute
                 * @property {anymetrica.relation.RelationType|null} [relation_type] Relation relation_type
                 * @property {Array.<anymetrica.relation.RelationType>|null} [relation_types] Relation relation_types
                 * @property {string|null} [to_id] Relation to_id
                 * @property {number|null} [to_depth] Relation to_depth
                 * @property {number|null} [to_depth_absolute] Relation to_depth_absolute
                 */
    
                /**
                 * Constructs a new Relation.
                 * @memberof anymetrica.relation
                 * @classdesc Represents a Relation.
                 * @implements IRelation
                 * @constructor
                 * @param {anymetrica.relation.IRelation=} [properties] Properties to set
                 */
                function Relation(properties) {
                    this.relation_types = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Relation id.
                 * @member {string} id
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 */
                Relation.prototype.id = "";
    
                /**
                 * Relation metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 */
                Relation.prototype.metadata = null;
    
                /**
                 * Relation from_id.
                 * @member {string} from_id
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 */
                Relation.prototype.from_id = "";
    
                /**
                 * Relation from_depth.
                 * @member {number} from_depth
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 */
                Relation.prototype.from_depth = 0;
    
                /**
                 * Relation from_depth_absolute.
                 * @member {number} from_depth_absolute
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 */
                Relation.prototype.from_depth_absolute = 0;
    
                /**
                 * Relation relation_type.
                 * @member {anymetrica.relation.RelationType} relation_type
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 */
                Relation.prototype.relation_type = 0;
    
                /**
                 * Relation relation_types.
                 * @member {Array.<anymetrica.relation.RelationType>} relation_types
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 */
                Relation.prototype.relation_types = $util.emptyArray;
    
                /**
                 * Relation to_id.
                 * @member {string} to_id
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 */
                Relation.prototype.to_id = "";
    
                /**
                 * Relation to_depth.
                 * @member {number} to_depth
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 */
                Relation.prototype.to_depth = 0;
    
                /**
                 * Relation to_depth_absolute.
                 * @member {number} to_depth_absolute
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 */
                Relation.prototype.to_depth_absolute = 0;
    
                /**
                 * Creates a new Relation instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.relation.Relation
                 * @static
                 * @param {anymetrica.relation.IRelation=} [properties] Properties to set
                 * @returns {anymetrica.relation.Relation} Relation instance
                 */
                Relation.create = function create(properties) {
                    return new Relation(properties);
                };
    
                /**
                 * Encodes the specified Relation message. Does not implicitly {@link anymetrica.relation.Relation.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.relation.Relation
                 * @static
                 * @param {anymetrica.relation.IRelation} message Relation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Relation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.from_id != null && message.hasOwnProperty("from_id"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.from_id);
                    if (message.from_depth != null && message.hasOwnProperty("from_depth"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.from_depth);
                    if (message.from_depth_absolute != null && message.hasOwnProperty("from_depth_absolute"))
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.from_depth_absolute);
                    if (message.relation_type != null && message.hasOwnProperty("relation_type"))
                        writer.uint32(/* id 32, wireType 0 =*/256).int32(message.relation_type);
                    if (message.relation_types != null && message.relation_types.length) {
                        writer.uint32(/* id 34, wireType 2 =*/274).fork();
                        for (var i = 0; i < message.relation_types.length; ++i)
                            writer.int32(message.relation_types[i]);
                        writer.ldelim();
                    }
                    if (message.to_id != null && message.hasOwnProperty("to_id"))
                        writer.uint32(/* id 64, wireType 2 =*/514).string(message.to_id);
                    if (message.to_depth != null && message.hasOwnProperty("to_depth"))
                        writer.uint32(/* id 66, wireType 0 =*/528).int32(message.to_depth);
                    if (message.to_depth_absolute != null && message.hasOwnProperty("to_depth_absolute"))
                        writer.uint32(/* id 68, wireType 0 =*/544).int32(message.to_depth_absolute);
                    return writer;
                };
    
                /**
                 * Encodes the specified Relation message, length delimited. Does not implicitly {@link anymetrica.relation.Relation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.relation.Relation
                 * @static
                 * @param {anymetrica.relation.IRelation} message Relation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Relation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Relation message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.relation.Relation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.relation.Relation} Relation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Relation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.relation.Relation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.from_id = reader.string();
                            break;
                        case 8:
                            message.from_depth = reader.int32();
                            break;
                        case 10:
                            message.from_depth_absolute = reader.int32();
                            break;
                        case 32:
                            message.relation_type = reader.int32();
                            break;
                        case 34:
                            if (!(message.relation_types && message.relation_types.length))
                                message.relation_types = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.relation_types.push(reader.int32());
                            } else
                                message.relation_types.push(reader.int32());
                            break;
                        case 64:
                            message.to_id = reader.string();
                            break;
                        case 66:
                            message.to_depth = reader.int32();
                            break;
                        case 68:
                            message.to_depth_absolute = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Relation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.relation.Relation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.relation.Relation} Relation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Relation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Relation message.
                 * @function verify
                 * @memberof anymetrica.relation.Relation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Relation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.from_id != null && message.hasOwnProperty("from_id"))
                        if (!$util.isString(message.from_id))
                            return "from_id: string expected";
                    if (message.from_depth != null && message.hasOwnProperty("from_depth"))
                        if (!$util.isInteger(message.from_depth))
                            return "from_depth: integer expected";
                    if (message.from_depth_absolute != null && message.hasOwnProperty("from_depth_absolute"))
                        if (!$util.isInteger(message.from_depth_absolute))
                            return "from_depth_absolute: integer expected";
                    if (message.relation_type != null && message.hasOwnProperty("relation_type"))
                        switch (message.relation_type) {
                        default:
                            return "relation_type: enum value expected";
                        case 0:
                        case 1:
                        case 3:
                        case 7:
                        case 15:
                        case 31:
                        case 64:
                        case 66:
                        case 68:
                        case 72:
                        case 78:
                        case 80:
                        case 82:
                        case 104:
                        case 106:
                        case 110:
                        case 112:
                        case 116:
                        case 120:
                        case 128:
                            break;
                        }
                    if (message.relation_types != null && message.hasOwnProperty("relation_types")) {
                        if (!Array.isArray(message.relation_types))
                            return "relation_types: array expected";
                        for (var i = 0; i < message.relation_types.length; ++i)
                            switch (message.relation_types[i]) {
                            default:
                                return "relation_types: enum value[] expected";
                            case 0:
                            case 1:
                            case 3:
                            case 7:
                            case 15:
                            case 31:
                            case 64:
                            case 66:
                            case 68:
                            case 72:
                            case 78:
                            case 80:
                            case 82:
                            case 104:
                            case 106:
                            case 110:
                            case 112:
                            case 116:
                            case 120:
                            case 128:
                                break;
                            }
                    }
                    if (message.to_id != null && message.hasOwnProperty("to_id"))
                        if (!$util.isString(message.to_id))
                            return "to_id: string expected";
                    if (message.to_depth != null && message.hasOwnProperty("to_depth"))
                        if (!$util.isInteger(message.to_depth))
                            return "to_depth: integer expected";
                    if (message.to_depth_absolute != null && message.hasOwnProperty("to_depth_absolute"))
                        if (!$util.isInteger(message.to_depth_absolute))
                            return "to_depth_absolute: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Relation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.relation.Relation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.relation.Relation} Relation
                 */
                Relation.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.relation.Relation)
                        return object;
                    var message = new $root.anymetrica.relation.Relation();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.relation.Relation.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.from_id != null)
                        message.from_id = String(object.from_id);
                    if (object.from_depth != null)
                        message.from_depth = object.from_depth | 0;
                    if (object.from_depth_absolute != null)
                        message.from_depth_absolute = object.from_depth_absolute | 0;
                    switch (object.relation_type) {
                    case "RESTRICTED":
                    case 0:
                        message.relation_type = 0;
                        break;
                    case "CAN_RESET":
                    case 1:
                        message.relation_type = 1;
                        break;
                    case "CAN_READ":
                    case 3:
                        message.relation_type = 3;
                        break;
                    case "CAN_WRITE":
                    case 7:
                        message.relation_type = 7;
                        break;
                    case "CAN_READ_RELATIONS":
                    case 15:
                        message.relation_type = 15;
                        break;
                    case "CAN_WRITE_RELATIONS":
                    case 31:
                        message.relation_type = 31;
                        break;
                    case "OWNS":
                    case 64:
                        message.relation_type = 64;
                        break;
                    case "ADMINISTRATING":
                    case 66:
                        message.relation_type = 66;
                        break;
                    case "CREATED":
                    case 68:
                        message.relation_type = 68;
                        break;
                    case "HAVE_PART":
                    case 72:
                        message.relation_type = 72;
                        break;
                    case "HAVE_MEMBER":
                    case 78:
                        message.relation_type = 78;
                        break;
                    case "INPUT":
                    case 80:
                        message.relation_type = 80;
                        break;
                    case "OUTPUT":
                    case 82:
                        message.relation_type = 82;
                        break;
                    case "CONTACT_WORK":
                    case 104:
                        message.relation_type = 104;
                        break;
                    case "CONTACT_WORK_GROUP":
                    case 106:
                        message.relation_type = 106;
                        break;
                    case "CONTACT_PERSONAL":
                    case 110:
                        message.relation_type = 110;
                        break;
                    case "CONTACT_FAMILY":
                    case 112:
                        message.relation_type = 112;
                        break;
                    case "CONTACT_ORGANISATION":
                    case 116:
                        message.relation_type = 116;
                        break;
                    case "CONTACT_NOTICED_USAGE":
                    case 120:
                        message.relation_type = 120;
                        break;
                    case "CONTACT_DO_NOT_CALL":
                    case 128:
                        message.relation_type = 128;
                        break;
                    }
                    if (object.relation_types) {
                        if (!Array.isArray(object.relation_types))
                            throw TypeError(".anymetrica.relation.Relation.relation_types: array expected");
                        message.relation_types = [];
                        for (var i = 0; i < object.relation_types.length; ++i)
                            switch (object.relation_types[i]) {
                            default:
                            case "RESTRICTED":
                            case 0:
                                message.relation_types[i] = 0;
                                break;
                            case "CAN_RESET":
                            case 1:
                                message.relation_types[i] = 1;
                                break;
                            case "CAN_READ":
                            case 3:
                                message.relation_types[i] = 3;
                                break;
                            case "CAN_WRITE":
                            case 7:
                                message.relation_types[i] = 7;
                                break;
                            case "CAN_READ_RELATIONS":
                            case 15:
                                message.relation_types[i] = 15;
                                break;
                            case "CAN_WRITE_RELATIONS":
                            case 31:
                                message.relation_types[i] = 31;
                                break;
                            case "OWNS":
                            case 64:
                                message.relation_types[i] = 64;
                                break;
                            case "ADMINISTRATING":
                            case 66:
                                message.relation_types[i] = 66;
                                break;
                            case "CREATED":
                            case 68:
                                message.relation_types[i] = 68;
                                break;
                            case "HAVE_PART":
                            case 72:
                                message.relation_types[i] = 72;
                                break;
                            case "HAVE_MEMBER":
                            case 78:
                                message.relation_types[i] = 78;
                                break;
                            case "INPUT":
                            case 80:
                                message.relation_types[i] = 80;
                                break;
                            case "OUTPUT":
                            case 82:
                                message.relation_types[i] = 82;
                                break;
                            case "CONTACT_WORK":
                            case 104:
                                message.relation_types[i] = 104;
                                break;
                            case "CONTACT_WORK_GROUP":
                            case 106:
                                message.relation_types[i] = 106;
                                break;
                            case "CONTACT_PERSONAL":
                            case 110:
                                message.relation_types[i] = 110;
                                break;
                            case "CONTACT_FAMILY":
                            case 112:
                                message.relation_types[i] = 112;
                                break;
                            case "CONTACT_ORGANISATION":
                            case 116:
                                message.relation_types[i] = 116;
                                break;
                            case "CONTACT_NOTICED_USAGE":
                            case 120:
                                message.relation_types[i] = 120;
                                break;
                            case "CONTACT_DO_NOT_CALL":
                            case 128:
                                message.relation_types[i] = 128;
                                break;
                            }
                    }
                    if (object.to_id != null)
                        message.to_id = String(object.to_id);
                    if (object.to_depth != null)
                        message.to_depth = object.to_depth | 0;
                    if (object.to_depth_absolute != null)
                        message.to_depth_absolute = object.to_depth_absolute | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Relation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.relation.Relation
                 * @static
                 * @param {anymetrica.relation.Relation} message Relation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Relation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.relation_types = [];
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.from_id = "";
                        object.from_depth = 0;
                        object.from_depth_absolute = 0;
                        object.relation_type = options.enums === String ? "RESTRICTED" : 0;
                        object.to_id = "";
                        object.to_depth = 0;
                        object.to_depth_absolute = 0;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.from_id != null && message.hasOwnProperty("from_id"))
                        object.from_id = message.from_id;
                    if (message.from_depth != null && message.hasOwnProperty("from_depth"))
                        object.from_depth = message.from_depth;
                    if (message.from_depth_absolute != null && message.hasOwnProperty("from_depth_absolute"))
                        object.from_depth_absolute = message.from_depth_absolute;
                    if (message.relation_type != null && message.hasOwnProperty("relation_type"))
                        object.relation_type = options.enums === String ? $root.anymetrica.relation.RelationType[message.relation_type] : message.relation_type;
                    if (message.relation_types && message.relation_types.length) {
                        object.relation_types = [];
                        for (var j = 0; j < message.relation_types.length; ++j)
                            object.relation_types[j] = options.enums === String ? $root.anymetrica.relation.RelationType[message.relation_types[j]] : message.relation_types[j];
                    }
                    if (message.to_id != null && message.hasOwnProperty("to_id"))
                        object.to_id = message.to_id;
                    if (message.to_depth != null && message.hasOwnProperty("to_depth"))
                        object.to_depth = message.to_depth;
                    if (message.to_depth_absolute != null && message.hasOwnProperty("to_depth_absolute"))
                        object.to_depth_absolute = message.to_depth_absolute;
                    return object;
                };
    
                /**
                 * Converts this Relation to JSON.
                 * @function toJSON
                 * @memberof anymetrica.relation.Relation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Relation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Relation;
            })();
    
            relation.Relations = (function() {
    
                /**
                 * Properties of a Relations.
                 * @memberof anymetrica.relation
                 * @interface IRelations
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Relations request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Relations response
                 * @property {Array.<anymetrica.relation.IRelation>|null} [relations] Relations relations
                 * @property {Array.<anymetrica.metadata.IShallowEntity>|null} [entities] Relations entities
                 */
    
                /**
                 * Constructs a new Relations.
                 * @memberof anymetrica.relation
                 * @classdesc Represents a Relations.
                 * @implements IRelations
                 * @constructor
                 * @param {anymetrica.relation.IRelations=} [properties] Properties to set
                 */
                function Relations(properties) {
                    this.relations = [];
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Relations request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.relation.Relations
                 * @instance
                 */
                Relations.prototype.request = null;
    
                /**
                 * Relations response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.relation.Relations
                 * @instance
                 */
                Relations.prototype.response = null;
    
                /**
                 * Relations relations.
                 * @member {Array.<anymetrica.relation.IRelation>} relations
                 * @memberof anymetrica.relation.Relations
                 * @instance
                 */
                Relations.prototype.relations = $util.emptyArray;
    
                /**
                 * Relations entities.
                 * @member {Array.<anymetrica.metadata.IShallowEntity>} entities
                 * @memberof anymetrica.relation.Relations
                 * @instance
                 */
                Relations.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Relations instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.relation.Relations
                 * @static
                 * @param {anymetrica.relation.IRelations=} [properties] Properties to set
                 * @returns {anymetrica.relation.Relations} Relations instance
                 */
                Relations.create = function create(properties) {
                    return new Relations(properties);
                };
    
                /**
                 * Encodes the specified Relations message. Does not implicitly {@link anymetrica.relation.Relations.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.relation.Relations
                 * @static
                 * @param {anymetrica.relation.IRelations} message Relations message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Relations.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.relations != null && message.relations.length)
                        for (var i = 0; i < message.relations.length; ++i)
                            $root.anymetrica.relation.Relation.encode(message.relations[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.metadata.ShallowEntity.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Relations message, length delimited. Does not implicitly {@link anymetrica.relation.Relations.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.relation.Relations
                 * @static
                 * @param {anymetrica.relation.IRelations} message Relations message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Relations.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Relations message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.relation.Relations
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.relation.Relations} Relations
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Relations.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.relation.Relations();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 6:
                            if (!(message.relations && message.relations.length))
                                message.relations = [];
                            message.relations.push($root.anymetrica.relation.Relation.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.metadata.ShallowEntity.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Relations message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.relation.Relations
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.relation.Relations} Relations
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Relations.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Relations message.
                 * @function verify
                 * @memberof anymetrica.relation.Relations
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Relations.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.relations != null && message.hasOwnProperty("relations")) {
                        if (!Array.isArray(message.relations))
                            return "relations: array expected";
                        for (var i = 0; i < message.relations.length; ++i) {
                            var error = $root.anymetrica.relation.Relation.verify(message.relations[i]);
                            if (error)
                                return "relations." + error;
                        }
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.metadata.ShallowEntity.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Relations message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.relation.Relations
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.relation.Relations} Relations
                 */
                Relations.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.relation.Relations)
                        return object;
                    var message = new $root.anymetrica.relation.Relations();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.relation.Relations.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.relation.Relations.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.relations) {
                        if (!Array.isArray(object.relations))
                            throw TypeError(".anymetrica.relation.Relations.relations: array expected");
                        message.relations = [];
                        for (var i = 0; i < object.relations.length; ++i) {
                            if (typeof object.relations[i] !== "object")
                                throw TypeError(".anymetrica.relation.Relations.relations: object expected");
                            message.relations[i] = $root.anymetrica.relation.Relation.fromObject(object.relations[i]);
                        }
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.relation.Relations.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.relation.Relations.entities: object expected");
                            message.entities[i] = $root.anymetrica.metadata.ShallowEntity.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Relations message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.relation.Relations
                 * @static
                 * @param {anymetrica.relation.Relations} message Relations
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Relations.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.relations = [];
                        object.entities = [];
                    }
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.relations && message.relations.length) {
                        object.relations = [];
                        for (var j = 0; j < message.relations.length; ++j)
                            object.relations[j] = $root.anymetrica.relation.Relation.toObject(message.relations[j], options);
                    }
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.metadata.ShallowEntity.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Relations to JSON.
                 * @function toJSON
                 * @memberof anymetrica.relation.Relations
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Relations.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Relations;
            })();
    
            return relation;
        })();
    
        anymetrica.metadata = (function() {
    
            /**
             * Namespace metadata.
             * @memberof anymetrica
             * @namespace
             */
            var metadata = {};
    
            metadata.ValidationMetadata = (function() {
    
                /**
                 * Properties of a ValidationMetadata.
                 * @memberof anymetrica.metadata
                 * @interface IValidationMetadata
                 * @property {boolean|null} [is_valid] ValidationMetadata is_valid
                 * @property {google.protobuf.ITimestamp|null} [validation_ts] ValidationMetadata validation_ts
                 * @property {google.protobuf.ITimestamp|null} [valid_till_ts] ValidationMetadata valid_till_ts
                 * @property {google.protobuf.ITimestamp|null} [next_validation_ts] ValidationMetadata next_validation_ts
                 * @property {string|null} [validation_notes] ValidationMetadata validation_notes
                 */
    
                /**
                 * Constructs a new ValidationMetadata.
                 * @memberof anymetrica.metadata
                 * @classdesc Represents a ValidationMetadata.
                 * @implements IValidationMetadata
                 * @constructor
                 * @param {anymetrica.metadata.IValidationMetadata=} [properties] Properties to set
                 */
                function ValidationMetadata(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ValidationMetadata is_valid.
                 * @member {boolean} is_valid
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @instance
                 */
                ValidationMetadata.prototype.is_valid = false;
    
                /**
                 * ValidationMetadata validation_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} validation_ts
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @instance
                 */
                ValidationMetadata.prototype.validation_ts = null;
    
                /**
                 * ValidationMetadata valid_till_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} valid_till_ts
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @instance
                 */
                ValidationMetadata.prototype.valid_till_ts = null;
    
                /**
                 * ValidationMetadata next_validation_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} next_validation_ts
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @instance
                 */
                ValidationMetadata.prototype.next_validation_ts = null;
    
                /**
                 * ValidationMetadata validation_notes.
                 * @member {string} validation_notes
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @instance
                 */
                ValidationMetadata.prototype.validation_notes = "";
    
                /**
                 * Creates a new ValidationMetadata instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @static
                 * @param {anymetrica.metadata.IValidationMetadata=} [properties] Properties to set
                 * @returns {anymetrica.metadata.ValidationMetadata} ValidationMetadata instance
                 */
                ValidationMetadata.create = function create(properties) {
                    return new ValidationMetadata(properties);
                };
    
                /**
                 * Encodes the specified ValidationMetadata message. Does not implicitly {@link anymetrica.metadata.ValidationMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @static
                 * @param {anymetrica.metadata.IValidationMetadata} message ValidationMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidationMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.is_valid != null && message.hasOwnProperty("is_valid"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.is_valid);
                    if (message.validation_ts != null && message.hasOwnProperty("validation_ts"))
                        $root.google.protobuf.Timestamp.encode(message.validation_ts, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.valid_till_ts != null && message.hasOwnProperty("valid_till_ts"))
                        $root.google.protobuf.Timestamp.encode(message.valid_till_ts, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.next_validation_ts != null && message.hasOwnProperty("next_validation_ts"))
                        $root.google.protobuf.Timestamp.encode(message.next_validation_ts, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    if (message.validation_notes != null && message.hasOwnProperty("validation_notes"))
                        writer.uint32(/* id 16, wireType 2 =*/130).string(message.validation_notes);
                    return writer;
                };
    
                /**
                 * Encodes the specified ValidationMetadata message, length delimited. Does not implicitly {@link anymetrica.metadata.ValidationMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @static
                 * @param {anymetrica.metadata.IValidationMetadata} message ValidationMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidationMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ValidationMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.metadata.ValidationMetadata} ValidationMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidationMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.metadata.ValidationMetadata();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.is_valid = reader.bool();
                            break;
                        case 4:
                            message.validation_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.valid_till_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.next_validation_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 16:
                            message.validation_notes = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ValidationMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.metadata.ValidationMetadata} ValidationMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidationMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ValidationMetadata message.
                 * @function verify
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValidationMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.is_valid != null && message.hasOwnProperty("is_valid"))
                        if (typeof message.is_valid !== "boolean")
                            return "is_valid: boolean expected";
                    if (message.validation_ts != null && message.hasOwnProperty("validation_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.validation_ts);
                        if (error)
                            return "validation_ts." + error;
                    }
                    if (message.valid_till_ts != null && message.hasOwnProperty("valid_till_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.valid_till_ts);
                        if (error)
                            return "valid_till_ts." + error;
                    }
                    if (message.next_validation_ts != null && message.hasOwnProperty("next_validation_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.next_validation_ts);
                        if (error)
                            return "next_validation_ts." + error;
                    }
                    if (message.validation_notes != null && message.hasOwnProperty("validation_notes"))
                        if (!$util.isString(message.validation_notes))
                            return "validation_notes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ValidationMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.metadata.ValidationMetadata} ValidationMetadata
                 */
                ValidationMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.metadata.ValidationMetadata)
                        return object;
                    var message = new $root.anymetrica.metadata.ValidationMetadata();
                    if (object.is_valid != null)
                        message.is_valid = Boolean(object.is_valid);
                    if (object.validation_ts != null) {
                        if (typeof object.validation_ts !== "object")
                            throw TypeError(".anymetrica.metadata.ValidationMetadata.validation_ts: object expected");
                        message.validation_ts = $root.google.protobuf.Timestamp.fromObject(object.validation_ts);
                    }
                    if (object.valid_till_ts != null) {
                        if (typeof object.valid_till_ts !== "object")
                            throw TypeError(".anymetrica.metadata.ValidationMetadata.valid_till_ts: object expected");
                        message.valid_till_ts = $root.google.protobuf.Timestamp.fromObject(object.valid_till_ts);
                    }
                    if (object.next_validation_ts != null) {
                        if (typeof object.next_validation_ts !== "object")
                            throw TypeError(".anymetrica.metadata.ValidationMetadata.next_validation_ts: object expected");
                        message.next_validation_ts = $root.google.protobuf.Timestamp.fromObject(object.next_validation_ts);
                    }
                    if (object.validation_notes != null)
                        message.validation_notes = String(object.validation_notes);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ValidationMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @static
                 * @param {anymetrica.metadata.ValidationMetadata} message ValidationMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValidationMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.is_valid = false;
                        object.validation_ts = null;
                        object.valid_till_ts = null;
                        object.next_validation_ts = null;
                        object.validation_notes = "";
                    }
                    if (message.is_valid != null && message.hasOwnProperty("is_valid"))
                        object.is_valid = message.is_valid;
                    if (message.validation_ts != null && message.hasOwnProperty("validation_ts"))
                        object.validation_ts = $root.google.protobuf.Timestamp.toObject(message.validation_ts, options);
                    if (message.valid_till_ts != null && message.hasOwnProperty("valid_till_ts"))
                        object.valid_till_ts = $root.google.protobuf.Timestamp.toObject(message.valid_till_ts, options);
                    if (message.next_validation_ts != null && message.hasOwnProperty("next_validation_ts"))
                        object.next_validation_ts = $root.google.protobuf.Timestamp.toObject(message.next_validation_ts, options);
                    if (message.validation_notes != null && message.hasOwnProperty("validation_notes"))
                        object.validation_notes = message.validation_notes;
                    return object;
                };
    
                /**
                 * Converts this ValidationMetadata to JSON.
                 * @function toJSON
                 * @memberof anymetrica.metadata.ValidationMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValidationMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ValidationMetadata;
            })();
    
            metadata.Metadata = (function() {
    
                /**
                 * Properties of a Metadata.
                 * @memberof anymetrica.metadata
                 * @interface IMetadata
                 * @property {anymetrica.entity.EntityType|null} [type] Metadata type
                 * @property {boolean|null} [is_deleted] Metadata is_deleted
                 * @property {string|null} [label] Metadata label
                 * @property {google.protobuf.ITimestamp|null} [created_ts] Metadata created_ts
                 * @property {google.protobuf.ITimestamp|null} [updated_ts] Metadata updated_ts
                 * @property {google.protobuf.ITimestamp|null} [deleted_ts] Metadata deleted_ts
                 * @property {Array.<anymetrica.metadata.IValidationMetadata>|null} [validations] Metadata validations
                 */
    
                /**
                 * Constructs a new Metadata.
                 * @memberof anymetrica.metadata
                 * @classdesc Represents a Metadata.
                 * @implements IMetadata
                 * @constructor
                 * @param {anymetrica.metadata.IMetadata=} [properties] Properties to set
                 */
                function Metadata(properties) {
                    this.validations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Metadata type.
                 * @member {anymetrica.entity.EntityType} type
                 * @memberof anymetrica.metadata.Metadata
                 * @instance
                 */
                Metadata.prototype.type = 0;
    
                /**
                 * Metadata is_deleted.
                 * @member {boolean} is_deleted
                 * @memberof anymetrica.metadata.Metadata
                 * @instance
                 */
                Metadata.prototype.is_deleted = false;
    
                /**
                 * Metadata label.
                 * @member {string} label
                 * @memberof anymetrica.metadata.Metadata
                 * @instance
                 */
                Metadata.prototype.label = "";
    
                /**
                 * Metadata created_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} created_ts
                 * @memberof anymetrica.metadata.Metadata
                 * @instance
                 */
                Metadata.prototype.created_ts = null;
    
                /**
                 * Metadata updated_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} updated_ts
                 * @memberof anymetrica.metadata.Metadata
                 * @instance
                 */
                Metadata.prototype.updated_ts = null;
    
                /**
                 * Metadata deleted_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} deleted_ts
                 * @memberof anymetrica.metadata.Metadata
                 * @instance
                 */
                Metadata.prototype.deleted_ts = null;
    
                /**
                 * Metadata validations.
                 * @member {Array.<anymetrica.metadata.IValidationMetadata>} validations
                 * @memberof anymetrica.metadata.Metadata
                 * @instance
                 */
                Metadata.prototype.validations = $util.emptyArray;
    
                /**
                 * Creates a new Metadata instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.metadata.Metadata
                 * @static
                 * @param {anymetrica.metadata.IMetadata=} [properties] Properties to set
                 * @returns {anymetrica.metadata.Metadata} Metadata instance
                 */
                Metadata.create = function create(properties) {
                    return new Metadata(properties);
                };
    
                /**
                 * Encodes the specified Metadata message. Does not implicitly {@link anymetrica.metadata.Metadata.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.metadata.Metadata
                 * @static
                 * @param {anymetrica.metadata.IMetadata} message Metadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Metadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.type);
                    if (message.is_deleted != null && message.hasOwnProperty("is_deleted"))
                        writer.uint32(/* id 12, wireType 0 =*/96).bool(message.is_deleted);
                    if (message.label != null && message.hasOwnProperty("label"))
                        writer.uint32(/* id 14, wireType 2 =*/114).string(message.label);
                    if (message.created_ts != null && message.hasOwnProperty("created_ts"))
                        $root.google.protobuf.Timestamp.encode(message.created_ts, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                    if (message.updated_ts != null && message.hasOwnProperty("updated_ts"))
                        $root.google.protobuf.Timestamp.encode(message.updated_ts, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                    if (message.deleted_ts != null && message.hasOwnProperty("deleted_ts"))
                        $root.google.protobuf.Timestamp.encode(message.deleted_ts, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                    if (message.validations != null && message.validations.length)
                        for (var i = 0; i < message.validations.length; ++i)
                            $root.anymetrica.metadata.ValidationMetadata.encode(message.validations[i], writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Metadata message, length delimited. Does not implicitly {@link anymetrica.metadata.Metadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.metadata.Metadata
                 * @static
                 * @param {anymetrica.metadata.IMetadata} message Metadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Metadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Metadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.metadata.Metadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.metadata.Metadata} Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Metadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.metadata.Metadata();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 8:
                            message.type = reader.int32();
                            break;
                        case 12:
                            message.is_deleted = reader.bool();
                            break;
                        case 14:
                            message.label = reader.string();
                            break;
                        case 16:
                            message.created_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 18:
                            message.updated_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 20:
                            message.deleted_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 32:
                            if (!(message.validations && message.validations.length))
                                message.validations = [];
                            message.validations.push($root.anymetrica.metadata.ValidationMetadata.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Metadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.metadata.Metadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.metadata.Metadata} Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Metadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Metadata message.
                 * @function verify
                 * @memberof anymetrica.metadata.Metadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Metadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 23:
                        case 5:
                        case 21:
                        case 6:
                        case 3:
                        case 29:
                        case 27:
                        case 32:
                        case 9:
                        case 11:
                        case 1:
                        case 4:
                        case 7:
                        case 18:
                        case 28:
                        case 16:
                        case 20:
                        case 2:
                            break;
                        }
                    if (message.is_deleted != null && message.hasOwnProperty("is_deleted"))
                        if (typeof message.is_deleted !== "boolean")
                            return "is_deleted: boolean expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        if (!$util.isString(message.label))
                            return "label: string expected";
                    if (message.created_ts != null && message.hasOwnProperty("created_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.created_ts);
                        if (error)
                            return "created_ts." + error;
                    }
                    if (message.updated_ts != null && message.hasOwnProperty("updated_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.updated_ts);
                        if (error)
                            return "updated_ts." + error;
                    }
                    if (message.deleted_ts != null && message.hasOwnProperty("deleted_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.deleted_ts);
                        if (error)
                            return "deleted_ts." + error;
                    }
                    if (message.validations != null && message.hasOwnProperty("validations")) {
                        if (!Array.isArray(message.validations))
                            return "validations: array expected";
                        for (var i = 0; i < message.validations.length; ++i) {
                            var error = $root.anymetrica.metadata.ValidationMetadata.verify(message.validations[i]);
                            if (error)
                                return "validations." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Metadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.metadata.Metadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.metadata.Metadata} Metadata
                 */
                Metadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.metadata.Metadata)
                        return object;
                    var message = new $root.anymetrica.metadata.Metadata();
                    switch (object.type) {
                    case "EntityUnknown":
                    case 0:
                        message.type = 0;
                        break;
                    case "Contact":
                    case 23:
                        message.type = 23;
                        break;
                    case "DemoRequestInfo":
                    case 5:
                        message.type = 5;
                        break;
                    case "Device":
                    case 21:
                        message.type = 21;
                        break;
                    case "File":
                    case 6:
                        message.type = 6;
                        break;
                    case "Group":
                    case 3:
                        message.type = 3;
                        break;
                    case "Human":
                    case 29:
                        message.type = 29;
                        break;
                    case "Location":
                    case 27:
                        message.type = 27;
                        break;
                    case "OTP":
                    case 32:
                        message.type = 32;
                        break;
                    case "Operation":
                    case 9:
                        message.type = 9;
                        break;
                    case "Organization":
                    case 11:
                        message.type = 11;
                        break;
                    case "PostalAddress":
                    case 1:
                        message.type = 1;
                        break;
                    case "Relation":
                    case 4:
                        message.type = 4;
                        break;
                    case "SessionToken":
                    case 7:
                        message.type = 7;
                        break;
                    case "TOTP":
                    case 18:
                        message.type = 18;
                        break;
                    case "UsernamePassword":
                    case 28:
                        message.type = 28;
                        break;
                    case "VadResult":
                    case 16:
                        message.type = 16;
                        break;
                    case "Vehicle":
                    case 20:
                        message.type = 20;
                        break;
                    case "Waveform":
                    case 2:
                        message.type = 2;
                        break;
                    }
                    if (object.is_deleted != null)
                        message.is_deleted = Boolean(object.is_deleted);
                    if (object.label != null)
                        message.label = String(object.label);
                    if (object.created_ts != null) {
                        if (typeof object.created_ts !== "object")
                            throw TypeError(".anymetrica.metadata.Metadata.created_ts: object expected");
                        message.created_ts = $root.google.protobuf.Timestamp.fromObject(object.created_ts);
                    }
                    if (object.updated_ts != null) {
                        if (typeof object.updated_ts !== "object")
                            throw TypeError(".anymetrica.metadata.Metadata.updated_ts: object expected");
                        message.updated_ts = $root.google.protobuf.Timestamp.fromObject(object.updated_ts);
                    }
                    if (object.deleted_ts != null) {
                        if (typeof object.deleted_ts !== "object")
                            throw TypeError(".anymetrica.metadata.Metadata.deleted_ts: object expected");
                        message.deleted_ts = $root.google.protobuf.Timestamp.fromObject(object.deleted_ts);
                    }
                    if (object.validations) {
                        if (!Array.isArray(object.validations))
                            throw TypeError(".anymetrica.metadata.Metadata.validations: array expected");
                        message.validations = [];
                        for (var i = 0; i < object.validations.length; ++i) {
                            if (typeof object.validations[i] !== "object")
                                throw TypeError(".anymetrica.metadata.Metadata.validations: object expected");
                            message.validations[i] = $root.anymetrica.metadata.ValidationMetadata.fromObject(object.validations[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Metadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.metadata.Metadata
                 * @static
                 * @param {anymetrica.metadata.Metadata} message Metadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Metadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.validations = [];
                    if (options.defaults) {
                        object.type = options.enums === String ? "EntityUnknown" : 0;
                        object.is_deleted = false;
                        object.label = "";
                        object.created_ts = null;
                        object.updated_ts = null;
                        object.deleted_ts = null;
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.anymetrica.entity.EntityType[message.type] : message.type;
                    if (message.is_deleted != null && message.hasOwnProperty("is_deleted"))
                        object.is_deleted = message.is_deleted;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = message.label;
                    if (message.created_ts != null && message.hasOwnProperty("created_ts"))
                        object.created_ts = $root.google.protobuf.Timestamp.toObject(message.created_ts, options);
                    if (message.updated_ts != null && message.hasOwnProperty("updated_ts"))
                        object.updated_ts = $root.google.protobuf.Timestamp.toObject(message.updated_ts, options);
                    if (message.deleted_ts != null && message.hasOwnProperty("deleted_ts"))
                        object.deleted_ts = $root.google.protobuf.Timestamp.toObject(message.deleted_ts, options);
                    if (message.validations && message.validations.length) {
                        object.validations = [];
                        for (var j = 0; j < message.validations.length; ++j)
                            object.validations[j] = $root.anymetrica.metadata.ValidationMetadata.toObject(message.validations[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Metadata to JSON.
                 * @function toJSON
                 * @memberof anymetrica.metadata.Metadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Metadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Metadata;
            })();
    
            metadata.ShallowEntity = (function() {
    
                /**
                 * Properties of a ShallowEntity.
                 * @memberof anymetrica.metadata
                 * @interface IShallowEntity
                 * @property {string|null} [id] ShallowEntity id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] ShallowEntity metadata
                 */
    
                /**
                 * Constructs a new ShallowEntity.
                 * @memberof anymetrica.metadata
                 * @classdesc Represents a ShallowEntity.
                 * @implements IShallowEntity
                 * @constructor
                 * @param {anymetrica.metadata.IShallowEntity=} [properties] Properties to set
                 */
                function ShallowEntity(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ShallowEntity id.
                 * @member {string} id
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @instance
                 */
                ShallowEntity.prototype.id = "";
    
                /**
                 * ShallowEntity metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @instance
                 */
                ShallowEntity.prototype.metadata = null;
    
                /**
                 * Creates a new ShallowEntity instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @static
                 * @param {anymetrica.metadata.IShallowEntity=} [properties] Properties to set
                 * @returns {anymetrica.metadata.ShallowEntity} ShallowEntity instance
                 */
                ShallowEntity.create = function create(properties) {
                    return new ShallowEntity(properties);
                };
    
                /**
                 * Encodes the specified ShallowEntity message. Does not implicitly {@link anymetrica.metadata.ShallowEntity.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @static
                 * @param {anymetrica.metadata.IShallowEntity} message ShallowEntity message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ShallowEntity.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ShallowEntity message, length delimited. Does not implicitly {@link anymetrica.metadata.ShallowEntity.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @static
                 * @param {anymetrica.metadata.IShallowEntity} message ShallowEntity message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ShallowEntity.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ShallowEntity message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.metadata.ShallowEntity} ShallowEntity
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ShallowEntity.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.metadata.ShallowEntity();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ShallowEntity message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.metadata.ShallowEntity} ShallowEntity
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ShallowEntity.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ShallowEntity message.
                 * @function verify
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ShallowEntity.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ShallowEntity message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.metadata.ShallowEntity} ShallowEntity
                 */
                ShallowEntity.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.metadata.ShallowEntity)
                        return object;
                    var message = new $root.anymetrica.metadata.ShallowEntity();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.metadata.ShallowEntity.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ShallowEntity message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @static
                 * @param {anymetrica.metadata.ShallowEntity} message ShallowEntity
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ShallowEntity.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    return object;
                };
    
                /**
                 * Converts this ShallowEntity to JSON.
                 * @function toJSON
                 * @memberof anymetrica.metadata.ShallowEntity
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ShallowEntity.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ShallowEntity;
            })();
    
            return metadata;
        })();
    
        anymetrica.entity = (function() {
    
            /**
             * Namespace entity.
             * @memberof anymetrica
             * @namespace
             */
            var entity = {};
    
            /**
             * @enum EntityType
             * 
             * Entity type names
             * @name anymetrica.entity.EntityType
             * @enum {string}
             * @property {number} EntityUnknown=0 EntityUnknown value
             * @property {number} Contact=23 Contact value
             * @property {number} DemoRequestInfo=5 DemoRequestInfo value
             * @property {number} Device=21 Device value
             * @property {number} File=6 File value
             * @property {number} Group=3 Group value
             * @property {number} Human=29 Human value
             * @property {number} Location=27 Location value
             * @property {number} OTP=32 OTP value
             * @property {number} Operation=9 Operation value
             * @property {number} Organization=11 Organization value
             * @property {number} PostalAddress=1 PostalAddress value
             * @property {number} Relation=4 Relation value
             * @property {number} SessionToken=7 SessionToken value
             * @property {number} TOTP=18 TOTP value
             * @property {number} UsernamePassword=28 UsernamePassword value
             * @property {number} VadResult=16 VadResult value
             * @property {number} Vehicle=20 Vehicle value
             * @property {number} Waveform=2 Waveform value
             */
            entity.EntityType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "EntityUnknown"] = 0;
                values[valuesById[23] = "Contact"] = 23;
                values[valuesById[5] = "DemoRequestInfo"] = 5;
                values[valuesById[21] = "Device"] = 21;
                values[valuesById[6] = "File"] = 6;
                values[valuesById[3] = "Group"] = 3;
                values[valuesById[29] = "Human"] = 29;
                values[valuesById[27] = "Location"] = 27;
                values[valuesById[32] = "OTP"] = 32;
                values[valuesById[9] = "Operation"] = 9;
                values[valuesById[11] = "Organization"] = 11;
                values[valuesById[1] = "PostalAddress"] = 1;
                values[valuesById[4] = "Relation"] = 4;
                values[valuesById[7] = "SessionToken"] = 7;
                values[valuesById[18] = "TOTP"] = 18;
                values[valuesById[28] = "UsernamePassword"] = 28;
                values[valuesById[16] = "VadResult"] = 16;
                values[valuesById[20] = "Vehicle"] = 20;
                values[valuesById[2] = "Waveform"] = 2;
                return values;
            })();
    
            /**
             * @enum EntityTypePlural
             * 
             * Entity plural type names
             * @name anymetrica.entity.EntityTypePlural
             * @enum {string}
             * @property {number} EntitiesUnknown=0 EntitiesUnknown value
             * @property {number} Contacts=23 Contacts value
             * @property {number} Devices=21 Devices value
             * @property {number} Files=6 Files value
             * @property {number} Groups=3 Groups value
             * @property {number} Humans=29 Humans value
             * @property {number} Locations=27 Locations value
             * @property {number} OTPs=32 OTPs value
             * @property {number} Operations=9 Operations value
             * @property {number} Organizations=11 Organizations value
             * @property {number} PostalAddresses=1 PostalAddresses value
             * @property {number} SessionTokens=7 SessionTokens value
             * @property {number} TOTPs=18 TOTPs value
             * @property {number} UsernamePasswords=28 UsernamePasswords value
             * @property {number} VadResults=16 VadResults value
             * @property {number} Vehicles=20 Vehicles value
             * @property {number} Waveforms=2 Waveforms value
             */
            entity.EntityTypePlural = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "EntitiesUnknown"] = 0;
                values[valuesById[23] = "Contacts"] = 23;
                values[valuesById[21] = "Devices"] = 21;
                values[valuesById[6] = "Files"] = 6;
                values[valuesById[3] = "Groups"] = 3;
                values[valuesById[29] = "Humans"] = 29;
                values[valuesById[27] = "Locations"] = 27;
                values[valuesById[32] = "OTPs"] = 32;
                values[valuesById[9] = "Operations"] = 9;
                values[valuesById[11] = "Organizations"] = 11;
                values[valuesById[1] = "PostalAddresses"] = 1;
                values[valuesById[7] = "SessionTokens"] = 7;
                values[valuesById[18] = "TOTPs"] = 18;
                values[valuesById[28] = "UsernamePasswords"] = 28;
                values[valuesById[16] = "VadResults"] = 16;
                values[valuesById[20] = "Vehicles"] = 20;
                values[valuesById[2] = "Waveforms"] = 2;
                return values;
            })();
    
            return entity;
        })();
    
        anymetrica.request = (function() {
    
            /**
             * Namespace request.
             * @memberof anymetrica
             * @namespace
             */
            var request = {};
    
            /**
             * MoreResultsType enum.
             * @name anymetrica.request.MoreResultsType
             * @enum {string}
             * @property {number} MORE_RESULTS_TYPE_UNSPECIFIED=0 MORE_RESULTS_TYPE_UNSPECIFIED value
             * @property {number} NOT_FINISHED=1 NOT_FINISHED value
             * @property {number} MORE_RESULTS_AFTER_LIMIT=2 MORE_RESULTS_AFTER_LIMIT value
             * @property {number} MORE_RESULTS_AFTER_CURSOR=4 MORE_RESULTS_AFTER_CURSOR value
             * @property {number} NO_MORE_RESULTS=3 NO_MORE_RESULTS value
             */
            request.MoreResultsType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "MORE_RESULTS_TYPE_UNSPECIFIED"] = 0;
                values[valuesById[1] = "NOT_FINISHED"] = 1;
                values[valuesById[2] = "MORE_RESULTS_AFTER_LIMIT"] = 2;
                values[valuesById[4] = "MORE_RESULTS_AFTER_CURSOR"] = 4;
                values[valuesById[3] = "NO_MORE_RESULTS"] = 3;
                return values;
            })();
    
            /**
             * Direction enum.
             * @name anymetrica.request.Direction
             * @enum {string}
             * @property {number} DIRECTION_UNSPECIFIED=0 DIRECTION_UNSPECIFIED value
             * @property {number} ASCENDING=1 ASCENDING value
             * @property {number} DESCENDING=2 DESCENDING value
             */
            request.Direction = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DIRECTION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "ASCENDING"] = 1;
                values[valuesById[2] = "DESCENDING"] = 2;
                return values;
            })();
    
            request.PropertyOrder = (function() {
    
                /**
                 * Properties of a PropertyOrder.
                 * @memberof anymetrica.request
                 * @interface IPropertyOrder
                 * @property {string|null} [property] PropertyOrder property
                 * @property {anymetrica.request.Direction|null} [direction] PropertyOrder direction
                 */
    
                /**
                 * Constructs a new PropertyOrder.
                 * @memberof anymetrica.request
                 * @classdesc Represents a PropertyOrder.
                 * @implements IPropertyOrder
                 * @constructor
                 * @param {anymetrica.request.IPropertyOrder=} [properties] Properties to set
                 */
                function PropertyOrder(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PropertyOrder property.
                 * @member {string} property
                 * @memberof anymetrica.request.PropertyOrder
                 * @instance
                 */
                PropertyOrder.prototype.property = "";
    
                /**
                 * PropertyOrder direction.
                 * @member {anymetrica.request.Direction} direction
                 * @memberof anymetrica.request.PropertyOrder
                 * @instance
                 */
                PropertyOrder.prototype.direction = 0;
    
                /**
                 * Creates a new PropertyOrder instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.request.PropertyOrder
                 * @static
                 * @param {anymetrica.request.IPropertyOrder=} [properties] Properties to set
                 * @returns {anymetrica.request.PropertyOrder} PropertyOrder instance
                 */
                PropertyOrder.create = function create(properties) {
                    return new PropertyOrder(properties);
                };
    
                /**
                 * Encodes the specified PropertyOrder message. Does not implicitly {@link anymetrica.request.PropertyOrder.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.request.PropertyOrder
                 * @static
                 * @param {anymetrica.request.IPropertyOrder} message PropertyOrder message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PropertyOrder.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.property != null && message.hasOwnProperty("property"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.property);
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.direction);
                    return writer;
                };
    
                /**
                 * Encodes the specified PropertyOrder message, length delimited. Does not implicitly {@link anymetrica.request.PropertyOrder.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.request.PropertyOrder
                 * @static
                 * @param {anymetrica.request.IPropertyOrder} message PropertyOrder message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PropertyOrder.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PropertyOrder message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.request.PropertyOrder
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.request.PropertyOrder} PropertyOrder
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PropertyOrder.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.request.PropertyOrder();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.property = reader.string();
                            break;
                        case 2:
                            message.direction = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PropertyOrder message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.request.PropertyOrder
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.request.PropertyOrder} PropertyOrder
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PropertyOrder.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PropertyOrder message.
                 * @function verify
                 * @memberof anymetrica.request.PropertyOrder
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PropertyOrder.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.property != null && message.hasOwnProperty("property"))
                        if (!$util.isString(message.property))
                            return "property: string expected";
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        switch (message.direction) {
                        default:
                            return "direction: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a PropertyOrder message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.request.PropertyOrder
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.request.PropertyOrder} PropertyOrder
                 */
                PropertyOrder.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.request.PropertyOrder)
                        return object;
                    var message = new $root.anymetrica.request.PropertyOrder();
                    if (object.property != null)
                        message.property = String(object.property);
                    switch (object.direction) {
                    case "DIRECTION_UNSPECIFIED":
                    case 0:
                        message.direction = 0;
                        break;
                    case "ASCENDING":
                    case 1:
                        message.direction = 1;
                        break;
                    case "DESCENDING":
                    case 2:
                        message.direction = 2;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PropertyOrder message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.request.PropertyOrder
                 * @static
                 * @param {anymetrica.request.PropertyOrder} message PropertyOrder
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PropertyOrder.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.property = "";
                        object.direction = options.enums === String ? "DIRECTION_UNSPECIFIED" : 0;
                    }
                    if (message.property != null && message.hasOwnProperty("property"))
                        object.property = message.property;
                    if (message.direction != null && message.hasOwnProperty("direction"))
                        object.direction = options.enums === String ? $root.anymetrica.request.Direction[message.direction] : message.direction;
                    return object;
                };
    
                /**
                 * Converts this PropertyOrder to JSON.
                 * @function toJSON
                 * @memberof anymetrica.request.PropertyOrder
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PropertyOrder.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PropertyOrder;
            })();
    
            request.RequestMetadata = (function() {
    
                /**
                 * Properties of a RequestMetadata.
                 * @memberof anymetrica.request
                 * @interface IRequestMetadata
                 * @property {anymetrica.credential.ICredential|null} [credential] RequestMetadata credential
                 * @property {Array.<anymetrica.request.IPropertyOrder>|null} [order] RequestMetadata order
                 * @property {number|null} [offset] RequestMetadata offset
                 * @property {number|null} [limit] RequestMetadata limit
                 * @property {Array.<anymetrica.entity.EntityType>|null} [types] RequestMetadata types
                 * @property {number|null} [traverse_depth] RequestMetadata traverse_depth
                 * @property {boolean|null} [two_way_discovery] RequestMetadata two_way_discovery
                 * @property {Array.<anymetrica.relation.RelationType>|null} [relation_types] RequestMetadata relation_types
                 */
    
                /**
                 * Constructs a new RequestMetadata.
                 * @memberof anymetrica.request
                 * @classdesc Represents a RequestMetadata.
                 * @implements IRequestMetadata
                 * @constructor
                 * @param {anymetrica.request.IRequestMetadata=} [properties] Properties to set
                 */
                function RequestMetadata(properties) {
                    this.order = [];
                    this.types = [];
                    this.relation_types = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestMetadata credential.
                 * @member {anymetrica.credential.ICredential|null|undefined} credential
                 * @memberof anymetrica.request.RequestMetadata
                 * @instance
                 */
                RequestMetadata.prototype.credential = null;
    
                /**
                 * RequestMetadata order.
                 * @member {Array.<anymetrica.request.IPropertyOrder>} order
                 * @memberof anymetrica.request.RequestMetadata
                 * @instance
                 */
                RequestMetadata.prototype.order = $util.emptyArray;
    
                /**
                 * RequestMetadata offset.
                 * @member {number} offset
                 * @memberof anymetrica.request.RequestMetadata
                 * @instance
                 */
                RequestMetadata.prototype.offset = 0;
    
                /**
                 * RequestMetadata limit.
                 * @member {number} limit
                 * @memberof anymetrica.request.RequestMetadata
                 * @instance
                 */
                RequestMetadata.prototype.limit = 0;
    
                /**
                 * RequestMetadata types.
                 * @member {Array.<anymetrica.entity.EntityType>} types
                 * @memberof anymetrica.request.RequestMetadata
                 * @instance
                 */
                RequestMetadata.prototype.types = $util.emptyArray;
    
                /**
                 * RequestMetadata traverse_depth.
                 * @member {number} traverse_depth
                 * @memberof anymetrica.request.RequestMetadata
                 * @instance
                 */
                RequestMetadata.prototype.traverse_depth = 0;
    
                /**
                 * RequestMetadata two_way_discovery.
                 * @member {boolean} two_way_discovery
                 * @memberof anymetrica.request.RequestMetadata
                 * @instance
                 */
                RequestMetadata.prototype.two_way_discovery = false;
    
                /**
                 * RequestMetadata relation_types.
                 * @member {Array.<anymetrica.relation.RelationType>} relation_types
                 * @memberof anymetrica.request.RequestMetadata
                 * @instance
                 */
                RequestMetadata.prototype.relation_types = $util.emptyArray;
    
                /**
                 * Creates a new RequestMetadata instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.request.RequestMetadata
                 * @static
                 * @param {anymetrica.request.IRequestMetadata=} [properties] Properties to set
                 * @returns {anymetrica.request.RequestMetadata} RequestMetadata instance
                 */
                RequestMetadata.create = function create(properties) {
                    return new RequestMetadata(properties);
                };
    
                /**
                 * Encodes the specified RequestMetadata message. Does not implicitly {@link anymetrica.request.RequestMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.request.RequestMetadata
                 * @static
                 * @param {anymetrica.request.IRequestMetadata} message RequestMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.credential != null && message.hasOwnProperty("credential"))
                        $root.anymetrica.credential.Credential.encode(message.credential, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.order != null && message.order.length)
                        for (var i = 0; i < message.order.length; ++i)
                            $root.anymetrica.request.PropertyOrder.encode(message.order[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.offset);
                    if (message.limit != null && message.hasOwnProperty("limit"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.limit);
                    if (message.types != null && message.types.length) {
                        writer.uint32(/* id 14, wireType 2 =*/114).fork();
                        for (var i = 0; i < message.types.length; ++i)
                            writer.int32(message.types[i]);
                        writer.ldelim();
                    }
                    if (message.traverse_depth != null && message.hasOwnProperty("traverse_depth"))
                        writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.traverse_depth);
                    if (message.two_way_discovery != null && message.hasOwnProperty("two_way_discovery"))
                        writer.uint32(/* id 34, wireType 0 =*/272).bool(message.two_way_discovery);
                    if (message.relation_types != null && message.relation_types.length) {
                        writer.uint32(/* id 38, wireType 2 =*/306).fork();
                        for (var i = 0; i < message.relation_types.length; ++i)
                            writer.int32(message.relation_types[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestMetadata message, length delimited. Does not implicitly {@link anymetrica.request.RequestMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.request.RequestMetadata
                 * @static
                 * @param {anymetrica.request.IRequestMetadata} message RequestMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.request.RequestMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.request.RequestMetadata} RequestMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.request.RequestMetadata();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.credential = $root.anymetrica.credential.Credential.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.order && message.order.length))
                                message.order = [];
                            message.order.push($root.anymetrica.request.PropertyOrder.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            message.offset = reader.uint32();
                            break;
                        case 8:
                            message.limit = reader.uint32();
                            break;
                        case 14:
                            if (!(message.types && message.types.length))
                                message.types = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.types.push(reader.int32());
                            } else
                                message.types.push(reader.int32());
                            break;
                        case 32:
                            message.traverse_depth = reader.uint32();
                            break;
                        case 34:
                            message.two_way_discovery = reader.bool();
                            break;
                        case 38:
                            if (!(message.relation_types && message.relation_types.length))
                                message.relation_types = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.relation_types.push(reader.int32());
                            } else
                                message.relation_types.push(reader.int32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.request.RequestMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.request.RequestMetadata} RequestMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestMetadata message.
                 * @function verify
                 * @memberof anymetrica.request.RequestMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.credential != null && message.hasOwnProperty("credential")) {
                        var error = $root.anymetrica.credential.Credential.verify(message.credential);
                        if (error)
                            return "credential." + error;
                    }
                    if (message.order != null && message.hasOwnProperty("order")) {
                        if (!Array.isArray(message.order))
                            return "order: array expected";
                        for (var i = 0; i < message.order.length; ++i) {
                            var error = $root.anymetrica.request.PropertyOrder.verify(message.order[i]);
                            if (error)
                                return "order." + error;
                        }
                    }
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        if (!$util.isInteger(message.offset))
                            return "offset: integer expected";
                    if (message.limit != null && message.hasOwnProperty("limit"))
                        if (!$util.isInteger(message.limit))
                            return "limit: integer expected";
                    if (message.types != null && message.hasOwnProperty("types")) {
                        if (!Array.isArray(message.types))
                            return "types: array expected";
                        for (var i = 0; i < message.types.length; ++i)
                            switch (message.types[i]) {
                            default:
                                return "types: enum value[] expected";
                            case 0:
                            case 23:
                            case 5:
                            case 21:
                            case 6:
                            case 3:
                            case 29:
                            case 27:
                            case 32:
                            case 9:
                            case 11:
                            case 1:
                            case 4:
                            case 7:
                            case 18:
                            case 28:
                            case 16:
                            case 20:
                            case 2:
                                break;
                            }
                    }
                    if (message.traverse_depth != null && message.hasOwnProperty("traverse_depth"))
                        if (!$util.isInteger(message.traverse_depth))
                            return "traverse_depth: integer expected";
                    if (message.two_way_discovery != null && message.hasOwnProperty("two_way_discovery"))
                        if (typeof message.two_way_discovery !== "boolean")
                            return "two_way_discovery: boolean expected";
                    if (message.relation_types != null && message.hasOwnProperty("relation_types")) {
                        if (!Array.isArray(message.relation_types))
                            return "relation_types: array expected";
                        for (var i = 0; i < message.relation_types.length; ++i)
                            switch (message.relation_types[i]) {
                            default:
                                return "relation_types: enum value[] expected";
                            case 0:
                            case 1:
                            case 3:
                            case 7:
                            case 15:
                            case 31:
                            case 64:
                            case 66:
                            case 68:
                            case 72:
                            case 78:
                            case 80:
                            case 82:
                            case 104:
                            case 106:
                            case 110:
                            case 112:
                            case 116:
                            case 120:
                            case 128:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a RequestMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.request.RequestMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.request.RequestMetadata} RequestMetadata
                 */
                RequestMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.request.RequestMetadata)
                        return object;
                    var message = new $root.anymetrica.request.RequestMetadata();
                    if (object.credential != null) {
                        if (typeof object.credential !== "object")
                            throw TypeError(".anymetrica.request.RequestMetadata.credential: object expected");
                        message.credential = $root.anymetrica.credential.Credential.fromObject(object.credential);
                    }
                    if (object.order) {
                        if (!Array.isArray(object.order))
                            throw TypeError(".anymetrica.request.RequestMetadata.order: array expected");
                        message.order = [];
                        for (var i = 0; i < object.order.length; ++i) {
                            if (typeof object.order[i] !== "object")
                                throw TypeError(".anymetrica.request.RequestMetadata.order: object expected");
                            message.order[i] = $root.anymetrica.request.PropertyOrder.fromObject(object.order[i]);
                        }
                    }
                    if (object.offset != null)
                        message.offset = object.offset >>> 0;
                    if (object.limit != null)
                        message.limit = object.limit >>> 0;
                    if (object.types) {
                        if (!Array.isArray(object.types))
                            throw TypeError(".anymetrica.request.RequestMetadata.types: array expected");
                        message.types = [];
                        for (var i = 0; i < object.types.length; ++i)
                            switch (object.types[i]) {
                            default:
                            case "EntityUnknown":
                            case 0:
                                message.types[i] = 0;
                                break;
                            case "Contact":
                            case 23:
                                message.types[i] = 23;
                                break;
                            case "DemoRequestInfo":
                            case 5:
                                message.types[i] = 5;
                                break;
                            case "Device":
                            case 21:
                                message.types[i] = 21;
                                break;
                            case "File":
                            case 6:
                                message.types[i] = 6;
                                break;
                            case "Group":
                            case 3:
                                message.types[i] = 3;
                                break;
                            case "Human":
                            case 29:
                                message.types[i] = 29;
                                break;
                            case "Location":
                            case 27:
                                message.types[i] = 27;
                                break;
                            case "OTP":
                            case 32:
                                message.types[i] = 32;
                                break;
                            case "Operation":
                            case 9:
                                message.types[i] = 9;
                                break;
                            case "Organization":
                            case 11:
                                message.types[i] = 11;
                                break;
                            case "PostalAddress":
                            case 1:
                                message.types[i] = 1;
                                break;
                            case "Relation":
                            case 4:
                                message.types[i] = 4;
                                break;
                            case "SessionToken":
                            case 7:
                                message.types[i] = 7;
                                break;
                            case "TOTP":
                            case 18:
                                message.types[i] = 18;
                                break;
                            case "UsernamePassword":
                            case 28:
                                message.types[i] = 28;
                                break;
                            case "VadResult":
                            case 16:
                                message.types[i] = 16;
                                break;
                            case "Vehicle":
                            case 20:
                                message.types[i] = 20;
                                break;
                            case "Waveform":
                            case 2:
                                message.types[i] = 2;
                                break;
                            }
                    }
                    if (object.traverse_depth != null)
                        message.traverse_depth = object.traverse_depth >>> 0;
                    if (object.two_way_discovery != null)
                        message.two_way_discovery = Boolean(object.two_way_discovery);
                    if (object.relation_types) {
                        if (!Array.isArray(object.relation_types))
                            throw TypeError(".anymetrica.request.RequestMetadata.relation_types: array expected");
                        message.relation_types = [];
                        for (var i = 0; i < object.relation_types.length; ++i)
                            switch (object.relation_types[i]) {
                            default:
                            case "RESTRICTED":
                            case 0:
                                message.relation_types[i] = 0;
                                break;
                            case "CAN_RESET":
                            case 1:
                                message.relation_types[i] = 1;
                                break;
                            case "CAN_READ":
                            case 3:
                                message.relation_types[i] = 3;
                                break;
                            case "CAN_WRITE":
                            case 7:
                                message.relation_types[i] = 7;
                                break;
                            case "CAN_READ_RELATIONS":
                            case 15:
                                message.relation_types[i] = 15;
                                break;
                            case "CAN_WRITE_RELATIONS":
                            case 31:
                                message.relation_types[i] = 31;
                                break;
                            case "OWNS":
                            case 64:
                                message.relation_types[i] = 64;
                                break;
                            case "ADMINISTRATING":
                            case 66:
                                message.relation_types[i] = 66;
                                break;
                            case "CREATED":
                            case 68:
                                message.relation_types[i] = 68;
                                break;
                            case "HAVE_PART":
                            case 72:
                                message.relation_types[i] = 72;
                                break;
                            case "HAVE_MEMBER":
                            case 78:
                                message.relation_types[i] = 78;
                                break;
                            case "INPUT":
                            case 80:
                                message.relation_types[i] = 80;
                                break;
                            case "OUTPUT":
                            case 82:
                                message.relation_types[i] = 82;
                                break;
                            case "CONTACT_WORK":
                            case 104:
                                message.relation_types[i] = 104;
                                break;
                            case "CONTACT_WORK_GROUP":
                            case 106:
                                message.relation_types[i] = 106;
                                break;
                            case "CONTACT_PERSONAL":
                            case 110:
                                message.relation_types[i] = 110;
                                break;
                            case "CONTACT_FAMILY":
                            case 112:
                                message.relation_types[i] = 112;
                                break;
                            case "CONTACT_ORGANISATION":
                            case 116:
                                message.relation_types[i] = 116;
                                break;
                            case "CONTACT_NOTICED_USAGE":
                            case 120:
                                message.relation_types[i] = 120;
                                break;
                            case "CONTACT_DO_NOT_CALL":
                            case 128:
                                message.relation_types[i] = 128;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.request.RequestMetadata
                 * @static
                 * @param {anymetrica.request.RequestMetadata} message RequestMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.order = [];
                        object.types = [];
                        object.relation_types = [];
                    }
                    if (options.defaults) {
                        object.credential = null;
                        object.offset = 0;
                        object.limit = 0;
                        object.traverse_depth = 0;
                        object.two_way_discovery = false;
                    }
                    if (message.credential != null && message.hasOwnProperty("credential"))
                        object.credential = $root.anymetrica.credential.Credential.toObject(message.credential, options);
                    if (message.order && message.order.length) {
                        object.order = [];
                        for (var j = 0; j < message.order.length; ++j)
                            object.order[j] = $root.anymetrica.request.PropertyOrder.toObject(message.order[j], options);
                    }
                    if (message.offset != null && message.hasOwnProperty("offset"))
                        object.offset = message.offset;
                    if (message.limit != null && message.hasOwnProperty("limit"))
                        object.limit = message.limit;
                    if (message.types && message.types.length) {
                        object.types = [];
                        for (var j = 0; j < message.types.length; ++j)
                            object.types[j] = options.enums === String ? $root.anymetrica.entity.EntityType[message.types[j]] : message.types[j];
                    }
                    if (message.traverse_depth != null && message.hasOwnProperty("traverse_depth"))
                        object.traverse_depth = message.traverse_depth;
                    if (message.two_way_discovery != null && message.hasOwnProperty("two_way_discovery"))
                        object.two_way_discovery = message.two_way_discovery;
                    if (message.relation_types && message.relation_types.length) {
                        object.relation_types = [];
                        for (var j = 0; j < message.relation_types.length; ++j)
                            object.relation_types[j] = options.enums === String ? $root.anymetrica.relation.RelationType[message.relation_types[j]] : message.relation_types[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this RequestMetadata to JSON.
                 * @function toJSON
                 * @memberof anymetrica.request.RequestMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestMetadata;
            })();
    
            request.ResponseMetadata = (function() {
    
                /**
                 * Properties of a ResponseMetadata.
                 * @memberof anymetrica.request
                 * @interface IResponseMetadata
                 * @property {anymetrica.credential.ICredential|null} [credential] ResponseMetadata credential
                 * @property {number|null} [skipped_results] ResponseMetadata skipped_results
                 * @property {anymetrica.request.MoreResultsType|null} [more_results] ResponseMetadata more_results
                 * @property {google.protobuf.ITimestamp|null} [read_time] ResponseMetadata read_time
                 * @property {number|null} [used_traverse_depth] ResponseMetadata used_traverse_depth
                 */
    
                /**
                 * Constructs a new ResponseMetadata.
                 * @memberof anymetrica.request
                 * @classdesc Represents a ResponseMetadata.
                 * @implements IResponseMetadata
                 * @constructor
                 * @param {anymetrica.request.IResponseMetadata=} [properties] Properties to set
                 */
                function ResponseMetadata(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseMetadata credential.
                 * @member {anymetrica.credential.ICredential|null|undefined} credential
                 * @memberof anymetrica.request.ResponseMetadata
                 * @instance
                 */
                ResponseMetadata.prototype.credential = null;
    
                /**
                 * ResponseMetadata skipped_results.
                 * @member {number} skipped_results
                 * @memberof anymetrica.request.ResponseMetadata
                 * @instance
                 */
                ResponseMetadata.prototype.skipped_results = 0;
    
                /**
                 * ResponseMetadata more_results.
                 * @member {anymetrica.request.MoreResultsType} more_results
                 * @memberof anymetrica.request.ResponseMetadata
                 * @instance
                 */
                ResponseMetadata.prototype.more_results = 0;
    
                /**
                 * ResponseMetadata read_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} read_time
                 * @memberof anymetrica.request.ResponseMetadata
                 * @instance
                 */
                ResponseMetadata.prototype.read_time = null;
    
                /**
                 * ResponseMetadata used_traverse_depth.
                 * @member {number} used_traverse_depth
                 * @memberof anymetrica.request.ResponseMetadata
                 * @instance
                 */
                ResponseMetadata.prototype.used_traverse_depth = 0;
    
                /**
                 * Creates a new ResponseMetadata instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.request.ResponseMetadata
                 * @static
                 * @param {anymetrica.request.IResponseMetadata=} [properties] Properties to set
                 * @returns {anymetrica.request.ResponseMetadata} ResponseMetadata instance
                 */
                ResponseMetadata.create = function create(properties) {
                    return new ResponseMetadata(properties);
                };
    
                /**
                 * Encodes the specified ResponseMetadata message. Does not implicitly {@link anymetrica.request.ResponseMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.request.ResponseMetadata
                 * @static
                 * @param {anymetrica.request.IResponseMetadata} message ResponseMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.credential != null && message.hasOwnProperty("credential"))
                        $root.anymetrica.credential.Credential.encode(message.credential, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.used_traverse_depth != null && message.hasOwnProperty("used_traverse_depth"))
                        writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.used_traverse_depth);
                    if (message.skipped_results != null && message.hasOwnProperty("skipped_results"))
                        writer.uint32(/* id 16, wireType 0 =*/128).int32(message.skipped_results);
                    if (message.more_results != null && message.hasOwnProperty("more_results"))
                        writer.uint32(/* id 18, wireType 0 =*/144).int32(message.more_results);
                    if (message.read_time != null && message.hasOwnProperty("read_time"))
                        $root.google.protobuf.Timestamp.encode(message.read_time, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseMetadata message, length delimited. Does not implicitly {@link anymetrica.request.ResponseMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.request.ResponseMetadata
                 * @static
                 * @param {anymetrica.request.IResponseMetadata} message ResponseMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.request.ResponseMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.request.ResponseMetadata} ResponseMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.request.ResponseMetadata();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.credential = $root.anymetrica.credential.Credential.decode(reader, reader.uint32());
                            break;
                        case 16:
                            message.skipped_results = reader.int32();
                            break;
                        case 18:
                            message.more_results = reader.int32();
                            break;
                        case 20:
                            message.read_time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.used_traverse_depth = reader.uint32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.request.ResponseMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.request.ResponseMetadata} ResponseMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseMetadata message.
                 * @function verify
                 * @memberof anymetrica.request.ResponseMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.credential != null && message.hasOwnProperty("credential")) {
                        var error = $root.anymetrica.credential.Credential.verify(message.credential);
                        if (error)
                            return "credential." + error;
                    }
                    if (message.skipped_results != null && message.hasOwnProperty("skipped_results"))
                        if (!$util.isInteger(message.skipped_results))
                            return "skipped_results: integer expected";
                    if (message.more_results != null && message.hasOwnProperty("more_results"))
                        switch (message.more_results) {
                        default:
                            return "more_results: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 4:
                        case 3:
                            break;
                        }
                    if (message.read_time != null && message.hasOwnProperty("read_time")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.read_time);
                        if (error)
                            return "read_time." + error;
                    }
                    if (message.used_traverse_depth != null && message.hasOwnProperty("used_traverse_depth"))
                        if (!$util.isInteger(message.used_traverse_depth))
                            return "used_traverse_depth: integer expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.request.ResponseMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.request.ResponseMetadata} ResponseMetadata
                 */
                ResponseMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.request.ResponseMetadata)
                        return object;
                    var message = new $root.anymetrica.request.ResponseMetadata();
                    if (object.credential != null) {
                        if (typeof object.credential !== "object")
                            throw TypeError(".anymetrica.request.ResponseMetadata.credential: object expected");
                        message.credential = $root.anymetrica.credential.Credential.fromObject(object.credential);
                    }
                    if (object.skipped_results != null)
                        message.skipped_results = object.skipped_results | 0;
                    switch (object.more_results) {
                    case "MORE_RESULTS_TYPE_UNSPECIFIED":
                    case 0:
                        message.more_results = 0;
                        break;
                    case "NOT_FINISHED":
                    case 1:
                        message.more_results = 1;
                        break;
                    case "MORE_RESULTS_AFTER_LIMIT":
                    case 2:
                        message.more_results = 2;
                        break;
                    case "MORE_RESULTS_AFTER_CURSOR":
                    case 4:
                        message.more_results = 4;
                        break;
                    case "NO_MORE_RESULTS":
                    case 3:
                        message.more_results = 3;
                        break;
                    }
                    if (object.read_time != null) {
                        if (typeof object.read_time !== "object")
                            throw TypeError(".anymetrica.request.ResponseMetadata.read_time: object expected");
                        message.read_time = $root.google.protobuf.Timestamp.fromObject(object.read_time);
                    }
                    if (object.used_traverse_depth != null)
                        message.used_traverse_depth = object.used_traverse_depth >>> 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.request.ResponseMetadata
                 * @static
                 * @param {anymetrica.request.ResponseMetadata} message ResponseMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.credential = null;
                        object.used_traverse_depth = 0;
                        object.skipped_results = 0;
                        object.more_results = options.enums === String ? "MORE_RESULTS_TYPE_UNSPECIFIED" : 0;
                        object.read_time = null;
                    }
                    if (message.credential != null && message.hasOwnProperty("credential"))
                        object.credential = $root.anymetrica.credential.Credential.toObject(message.credential, options);
                    if (message.used_traverse_depth != null && message.hasOwnProperty("used_traverse_depth"))
                        object.used_traverse_depth = message.used_traverse_depth;
                    if (message.skipped_results != null && message.hasOwnProperty("skipped_results"))
                        object.skipped_results = message.skipped_results;
                    if (message.more_results != null && message.hasOwnProperty("more_results"))
                        object.more_results = options.enums === String ? $root.anymetrica.request.MoreResultsType[message.more_results] : message.more_results;
                    if (message.read_time != null && message.hasOwnProperty("read_time"))
                        object.read_time = $root.google.protobuf.Timestamp.toObject(message.read_time, options);
                    return object;
                };
    
                /**
                 * Converts this ResponseMetadata to JSON.
                 * @function toJSON
                 * @memberof anymetrica.request.ResponseMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseMetadata;
            })();
    
            request.ListRequest = (function() {
    
                /**
                 * Properties of a ListRequest.
                 * @memberof anymetrica.request
                 * @interface IListRequest
                 * @property {anymetrica.request.IRequestMetadata|null} [request] ListRequest request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] ListRequest response
                 * @property {Array.<anymetrica.metadata.IShallowEntity>|null} [entities] ListRequest entities
                 * @property {Array.<string>|null} [ids] ListRequest ids
                 * @property {Array.<anymetrica.entity.EntityType>|null} [types] ListRequest types
                 */
    
                /**
                 * Constructs a new ListRequest.
                 * @memberof anymetrica.request
                 * @classdesc Represents a ListRequest.
                 * @implements IListRequest
                 * @constructor
                 * @param {anymetrica.request.IListRequest=} [properties] Properties to set
                 */
                function ListRequest(properties) {
                    this.entities = [];
                    this.ids = [];
                    this.types = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListRequest request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.request.ListRequest
                 * @instance
                 */
                ListRequest.prototype.request = null;
    
                /**
                 * ListRequest response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.request.ListRequest
                 * @instance
                 */
                ListRequest.prototype.response = null;
    
                /**
                 * ListRequest entities.
                 * @member {Array.<anymetrica.metadata.IShallowEntity>} entities
                 * @memberof anymetrica.request.ListRequest
                 * @instance
                 */
                ListRequest.prototype.entities = $util.emptyArray;
    
                /**
                 * ListRequest ids.
                 * @member {Array.<string>} ids
                 * @memberof anymetrica.request.ListRequest
                 * @instance
                 */
                ListRequest.prototype.ids = $util.emptyArray;
    
                /**
                 * ListRequest types.
                 * @member {Array.<anymetrica.entity.EntityType>} types
                 * @memberof anymetrica.request.ListRequest
                 * @instance
                 */
                ListRequest.prototype.types = $util.emptyArray;
    
                /**
                 * Creates a new ListRequest instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.request.ListRequest
                 * @static
                 * @param {anymetrica.request.IListRequest=} [properties] Properties to set
                 * @returns {anymetrica.request.ListRequest} ListRequest instance
                 */
                ListRequest.create = function create(properties) {
                    return new ListRequest(properties);
                };
    
                /**
                 * Encodes the specified ListRequest message. Does not implicitly {@link anymetrica.request.ListRequest.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.request.ListRequest
                 * @static
                 * @param {anymetrica.request.IListRequest} message ListRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.metadata.ShallowEntity.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.ids != null && message.ids.length)
                        for (var i = 0; i < message.ids.length; ++i)
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.ids[i]);
                    if (message.types != null && message.types.length) {
                        writer.uint32(/* id 14, wireType 2 =*/114).fork();
                        for (var i = 0; i < message.types.length; ++i)
                            writer.int32(message.types[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified ListRequest message, length delimited. Does not implicitly {@link anymetrica.request.ListRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.request.ListRequest
                 * @static
                 * @param {anymetrica.request.IListRequest} message ListRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.request.ListRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.request.ListRequest} ListRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.request.ListRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.metadata.ShallowEntity.decode(reader, reader.uint32()));
                            break;
                        case 12:
                            if (!(message.ids && message.ids.length))
                                message.ids = [];
                            message.ids.push(reader.string());
                            break;
                        case 14:
                            if (!(message.types && message.types.length))
                                message.types = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.types.push(reader.int32());
                            } else
                                message.types.push(reader.int32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.request.ListRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.request.ListRequest} ListRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListRequest message.
                 * @function verify
                 * @memberof anymetrica.request.ListRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.metadata.ShallowEntity.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    if (message.ids != null && message.hasOwnProperty("ids")) {
                        if (!Array.isArray(message.ids))
                            return "ids: array expected";
                        for (var i = 0; i < message.ids.length; ++i)
                            if (!$util.isString(message.ids[i]))
                                return "ids: string[] expected";
                    }
                    if (message.types != null && message.hasOwnProperty("types")) {
                        if (!Array.isArray(message.types))
                            return "types: array expected";
                        for (var i = 0; i < message.types.length; ++i)
                            switch (message.types[i]) {
                            default:
                                return "types: enum value[] expected";
                            case 0:
                            case 23:
                            case 5:
                            case 21:
                            case 6:
                            case 3:
                            case 29:
                            case 27:
                            case 32:
                            case 9:
                            case 11:
                            case 1:
                            case 4:
                            case 7:
                            case 18:
                            case 28:
                            case 16:
                            case 20:
                            case 2:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a ListRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.request.ListRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.request.ListRequest} ListRequest
                 */
                ListRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.request.ListRequest)
                        return object;
                    var message = new $root.anymetrica.request.ListRequest();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.request.ListRequest.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.request.ListRequest.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.request.ListRequest.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.request.ListRequest.entities: object expected");
                            message.entities[i] = $root.anymetrica.metadata.ShallowEntity.fromObject(object.entities[i]);
                        }
                    }
                    if (object.ids) {
                        if (!Array.isArray(object.ids))
                            throw TypeError(".anymetrica.request.ListRequest.ids: array expected");
                        message.ids = [];
                        for (var i = 0; i < object.ids.length; ++i)
                            message.ids[i] = String(object.ids[i]);
                    }
                    if (object.types) {
                        if (!Array.isArray(object.types))
                            throw TypeError(".anymetrica.request.ListRequest.types: array expected");
                        message.types = [];
                        for (var i = 0; i < object.types.length; ++i)
                            switch (object.types[i]) {
                            default:
                            case "EntityUnknown":
                            case 0:
                                message.types[i] = 0;
                                break;
                            case "Contact":
                            case 23:
                                message.types[i] = 23;
                                break;
                            case "DemoRequestInfo":
                            case 5:
                                message.types[i] = 5;
                                break;
                            case "Device":
                            case 21:
                                message.types[i] = 21;
                                break;
                            case "File":
                            case 6:
                                message.types[i] = 6;
                                break;
                            case "Group":
                            case 3:
                                message.types[i] = 3;
                                break;
                            case "Human":
                            case 29:
                                message.types[i] = 29;
                                break;
                            case "Location":
                            case 27:
                                message.types[i] = 27;
                                break;
                            case "OTP":
                            case 32:
                                message.types[i] = 32;
                                break;
                            case "Operation":
                            case 9:
                                message.types[i] = 9;
                                break;
                            case "Organization":
                            case 11:
                                message.types[i] = 11;
                                break;
                            case "PostalAddress":
                            case 1:
                                message.types[i] = 1;
                                break;
                            case "Relation":
                            case 4:
                                message.types[i] = 4;
                                break;
                            case "SessionToken":
                            case 7:
                                message.types[i] = 7;
                                break;
                            case "TOTP":
                            case 18:
                                message.types[i] = 18;
                                break;
                            case "UsernamePassword":
                            case 28:
                                message.types[i] = 28;
                                break;
                            case "VadResult":
                            case 16:
                                message.types[i] = 16;
                                break;
                            case "Vehicle":
                            case 20:
                                message.types[i] = 20;
                                break;
                            case "Waveform":
                            case 2:
                                message.types[i] = 2;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.request.ListRequest
                 * @static
                 * @param {anymetrica.request.ListRequest} message ListRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.entities = [];
                        object.ids = [];
                        object.types = [];
                    }
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.metadata.ShallowEntity.toObject(message.entities[j], options);
                    }
                    if (message.ids && message.ids.length) {
                        object.ids = [];
                        for (var j = 0; j < message.ids.length; ++j)
                            object.ids[j] = message.ids[j];
                    }
                    if (message.types && message.types.length) {
                        object.types = [];
                        for (var j = 0; j < message.types.length; ++j)
                            object.types[j] = options.enums === String ? $root.anymetrica.entity.EntityType[message.types[j]] : message.types[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ListRequest to JSON.
                 * @function toJSON
                 * @memberof anymetrica.request.ListRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ListRequest;
            })();
    
            request.EmptyResponse = (function() {
    
                /**
                 * Properties of an EmptyResponse.
                 * @memberof anymetrica.request
                 * @interface IEmptyResponse
                 */
    
                /**
                 * Constructs a new EmptyResponse.
                 * @memberof anymetrica.request
                 * @classdesc Represents an EmptyResponse.
                 * @implements IEmptyResponse
                 * @constructor
                 * @param {anymetrica.request.IEmptyResponse=} [properties] Properties to set
                 */
                function EmptyResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new EmptyResponse instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.request.EmptyResponse
                 * @static
                 * @param {anymetrica.request.IEmptyResponse=} [properties] Properties to set
                 * @returns {anymetrica.request.EmptyResponse} EmptyResponse instance
                 */
                EmptyResponse.create = function create(properties) {
                    return new EmptyResponse(properties);
                };
    
                /**
                 * Encodes the specified EmptyResponse message. Does not implicitly {@link anymetrica.request.EmptyResponse.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.request.EmptyResponse
                 * @static
                 * @param {anymetrica.request.IEmptyResponse} message EmptyResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EmptyResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified EmptyResponse message, length delimited. Does not implicitly {@link anymetrica.request.EmptyResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.request.EmptyResponse
                 * @static
                 * @param {anymetrica.request.IEmptyResponse} message EmptyResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EmptyResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EmptyResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.request.EmptyResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.request.EmptyResponse} EmptyResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EmptyResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.request.EmptyResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EmptyResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.request.EmptyResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.request.EmptyResponse} EmptyResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EmptyResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EmptyResponse message.
                 * @function verify
                 * @memberof anymetrica.request.EmptyResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EmptyResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an EmptyResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.request.EmptyResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.request.EmptyResponse} EmptyResponse
                 */
                EmptyResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.request.EmptyResponse)
                        return object;
                    return new $root.anymetrica.request.EmptyResponse();
                };
    
                /**
                 * Creates a plain object from an EmptyResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.request.EmptyResponse
                 * @static
                 * @param {anymetrica.request.EmptyResponse} message EmptyResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EmptyResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this EmptyResponse to JSON.
                 * @function toJSON
                 * @memberof anymetrica.request.EmptyResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EmptyResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EmptyResponse;
            })();
    
            request.TransferOwnership = (function() {
    
                /**
                 * Properties of a TransferOwnership.
                 * @memberof anymetrica.request
                 * @interface ITransferOwnership
                 * @property {string|null} [entity_id] TransferOwnership entity_id
                 * @property {string|null} [new_owner_id] TransferOwnership new_owner_id
                 */
    
                /**
                 * Constructs a new TransferOwnership.
                 * @memberof anymetrica.request
                 * @classdesc Represents a TransferOwnership.
                 * @implements ITransferOwnership
                 * @constructor
                 * @param {anymetrica.request.ITransferOwnership=} [properties] Properties to set
                 */
                function TransferOwnership(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * TransferOwnership entity_id.
                 * @member {string} entity_id
                 * @memberof anymetrica.request.TransferOwnership
                 * @instance
                 */
                TransferOwnership.prototype.entity_id = "";
    
                /**
                 * TransferOwnership new_owner_id.
                 * @member {string} new_owner_id
                 * @memberof anymetrica.request.TransferOwnership
                 * @instance
                 */
                TransferOwnership.prototype.new_owner_id = "";
    
                /**
                 * Creates a new TransferOwnership instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.request.TransferOwnership
                 * @static
                 * @param {anymetrica.request.ITransferOwnership=} [properties] Properties to set
                 * @returns {anymetrica.request.TransferOwnership} TransferOwnership instance
                 */
                TransferOwnership.create = function create(properties) {
                    return new TransferOwnership(properties);
                };
    
                /**
                 * Encodes the specified TransferOwnership message. Does not implicitly {@link anymetrica.request.TransferOwnership.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.request.TransferOwnership
                 * @static
                 * @param {anymetrica.request.ITransferOwnership} message TransferOwnership message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TransferOwnership.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.entity_id != null && message.hasOwnProperty("entity_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.entity_id);
                    if (message.new_owner_id != null && message.hasOwnProperty("new_owner_id"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.new_owner_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified TransferOwnership message, length delimited. Does not implicitly {@link anymetrica.request.TransferOwnership.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.request.TransferOwnership
                 * @static
                 * @param {anymetrica.request.ITransferOwnership} message TransferOwnership message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TransferOwnership.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a TransferOwnership message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.request.TransferOwnership
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.request.TransferOwnership} TransferOwnership
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TransferOwnership.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.request.TransferOwnership();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.entity_id = reader.string();
                            break;
                        case 2:
                            message.new_owner_id = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a TransferOwnership message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.request.TransferOwnership
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.request.TransferOwnership} TransferOwnership
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TransferOwnership.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a TransferOwnership message.
                 * @function verify
                 * @memberof anymetrica.request.TransferOwnership
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TransferOwnership.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.entity_id != null && message.hasOwnProperty("entity_id"))
                        if (!$util.isString(message.entity_id))
                            return "entity_id: string expected";
                    if (message.new_owner_id != null && message.hasOwnProperty("new_owner_id"))
                        if (!$util.isString(message.new_owner_id))
                            return "new_owner_id: string expected";
                    return null;
                };
    
                /**
                 * Creates a TransferOwnership message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.request.TransferOwnership
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.request.TransferOwnership} TransferOwnership
                 */
                TransferOwnership.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.request.TransferOwnership)
                        return object;
                    var message = new $root.anymetrica.request.TransferOwnership();
                    if (object.entity_id != null)
                        message.entity_id = String(object.entity_id);
                    if (object.new_owner_id != null)
                        message.new_owner_id = String(object.new_owner_id);
                    return message;
                };
    
                /**
                 * Creates a plain object from a TransferOwnership message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.request.TransferOwnership
                 * @static
                 * @param {anymetrica.request.TransferOwnership} message TransferOwnership
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TransferOwnership.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.entity_id = "";
                        object.new_owner_id = "";
                    }
                    if (message.entity_id != null && message.hasOwnProperty("entity_id"))
                        object.entity_id = message.entity_id;
                    if (message.new_owner_id != null && message.hasOwnProperty("new_owner_id"))
                        object.new_owner_id = message.new_owner_id;
                    return object;
                };
    
                /**
                 * Converts this TransferOwnership to JSON.
                 * @function toJSON
                 * @memberof anymetrica.request.TransferOwnership
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TransferOwnership.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return TransferOwnership;
            })();
    
            request.TransferOwnerships = (function() {
    
                /**
                 * Properties of a TransferOwnerships.
                 * @memberof anymetrica.request
                 * @interface ITransferOwnerships
                 * @property {anymetrica.request.IRequestMetadata|null} [request] TransferOwnerships request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] TransferOwnerships response
                 * @property {Array.<anymetrica.request.ITransferOwnership>|null} [transfer_ownerships] TransferOwnerships transfer_ownerships
                 */
    
                /**
                 * Constructs a new TransferOwnerships.
                 * @memberof anymetrica.request
                 * @classdesc Represents a TransferOwnerships.
                 * @implements ITransferOwnerships
                 * @constructor
                 * @param {anymetrica.request.ITransferOwnerships=} [properties] Properties to set
                 */
                function TransferOwnerships(properties) {
                    this.transfer_ownerships = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * TransferOwnerships request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.request.TransferOwnerships
                 * @instance
                 */
                TransferOwnerships.prototype.request = null;
    
                /**
                 * TransferOwnerships response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.request.TransferOwnerships
                 * @instance
                 */
                TransferOwnerships.prototype.response = null;
    
                /**
                 * TransferOwnerships transfer_ownerships.
                 * @member {Array.<anymetrica.request.ITransferOwnership>} transfer_ownerships
                 * @memberof anymetrica.request.TransferOwnerships
                 * @instance
                 */
                TransferOwnerships.prototype.transfer_ownerships = $util.emptyArray;
    
                /**
                 * Creates a new TransferOwnerships instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.request.TransferOwnerships
                 * @static
                 * @param {anymetrica.request.ITransferOwnerships=} [properties] Properties to set
                 * @returns {anymetrica.request.TransferOwnerships} TransferOwnerships instance
                 */
                TransferOwnerships.create = function create(properties) {
                    return new TransferOwnerships(properties);
                };
    
                /**
                 * Encodes the specified TransferOwnerships message. Does not implicitly {@link anymetrica.request.TransferOwnerships.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.request.TransferOwnerships
                 * @static
                 * @param {anymetrica.request.ITransferOwnerships} message TransferOwnerships message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TransferOwnerships.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.transfer_ownerships != null && message.transfer_ownerships.length)
                        for (var i = 0; i < message.transfer_ownerships.length; ++i)
                            $root.anymetrica.request.TransferOwnership.encode(message.transfer_ownerships[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified TransferOwnerships message, length delimited. Does not implicitly {@link anymetrica.request.TransferOwnerships.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.request.TransferOwnerships
                 * @static
                 * @param {anymetrica.request.ITransferOwnerships} message TransferOwnerships message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TransferOwnerships.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a TransferOwnerships message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.request.TransferOwnerships
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.request.TransferOwnerships} TransferOwnerships
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TransferOwnerships.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.request.TransferOwnerships();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 1:
                            if (!(message.transfer_ownerships && message.transfer_ownerships.length))
                                message.transfer_ownerships = [];
                            message.transfer_ownerships.push($root.anymetrica.request.TransferOwnership.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a TransferOwnerships message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.request.TransferOwnerships
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.request.TransferOwnerships} TransferOwnerships
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TransferOwnerships.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a TransferOwnerships message.
                 * @function verify
                 * @memberof anymetrica.request.TransferOwnerships
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TransferOwnerships.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.transfer_ownerships != null && message.hasOwnProperty("transfer_ownerships")) {
                        if (!Array.isArray(message.transfer_ownerships))
                            return "transfer_ownerships: array expected";
                        for (var i = 0; i < message.transfer_ownerships.length; ++i) {
                            var error = $root.anymetrica.request.TransferOwnership.verify(message.transfer_ownerships[i]);
                            if (error)
                                return "transfer_ownerships." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a TransferOwnerships message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.request.TransferOwnerships
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.request.TransferOwnerships} TransferOwnerships
                 */
                TransferOwnerships.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.request.TransferOwnerships)
                        return object;
                    var message = new $root.anymetrica.request.TransferOwnerships();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.request.TransferOwnerships.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.request.TransferOwnerships.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.transfer_ownerships) {
                        if (!Array.isArray(object.transfer_ownerships))
                            throw TypeError(".anymetrica.request.TransferOwnerships.transfer_ownerships: array expected");
                        message.transfer_ownerships = [];
                        for (var i = 0; i < object.transfer_ownerships.length; ++i) {
                            if (typeof object.transfer_ownerships[i] !== "object")
                                throw TypeError(".anymetrica.request.TransferOwnerships.transfer_ownerships: object expected");
                            message.transfer_ownerships[i] = $root.anymetrica.request.TransferOwnership.fromObject(object.transfer_ownerships[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a TransferOwnerships message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.request.TransferOwnerships
                 * @static
                 * @param {anymetrica.request.TransferOwnerships} message TransferOwnerships
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TransferOwnerships.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.transfer_ownerships = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.transfer_ownerships && message.transfer_ownerships.length) {
                        object.transfer_ownerships = [];
                        for (var j = 0; j < message.transfer_ownerships.length; ++j)
                            object.transfer_ownerships[j] = $root.anymetrica.request.TransferOwnership.toObject(message.transfer_ownerships[j], options);
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    return object;
                };
    
                /**
                 * Converts this TransferOwnerships to JSON.
                 * @function toJSON
                 * @memberof anymetrica.request.TransferOwnerships
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TransferOwnerships.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return TransferOwnerships;
            })();
    
            request.ShallowEntities = (function() {
    
                /**
                 * Properties of a ShallowEntities.
                 * @memberof anymetrica.request
                 * @interface IShallowEntities
                 * @property {anymetrica.request.IRequestMetadata|null} [request] ShallowEntities request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] ShallowEntities response
                 * @property {Array.<anymetrica.metadata.IShallowEntity>|null} [entities] ShallowEntities entities
                 */
    
                /**
                 * Constructs a new ShallowEntities.
                 * @memberof anymetrica.request
                 * @classdesc Represents a ShallowEntities.
                 * @implements IShallowEntities
                 * @constructor
                 * @param {anymetrica.request.IShallowEntities=} [properties] Properties to set
                 */
                function ShallowEntities(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ShallowEntities request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.request.ShallowEntities
                 * @instance
                 */
                ShallowEntities.prototype.request = null;
    
                /**
                 * ShallowEntities response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.request.ShallowEntities
                 * @instance
                 */
                ShallowEntities.prototype.response = null;
    
                /**
                 * ShallowEntities entities.
                 * @member {Array.<anymetrica.metadata.IShallowEntity>} entities
                 * @memberof anymetrica.request.ShallowEntities
                 * @instance
                 */
                ShallowEntities.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new ShallowEntities instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.request.ShallowEntities
                 * @static
                 * @param {anymetrica.request.IShallowEntities=} [properties] Properties to set
                 * @returns {anymetrica.request.ShallowEntities} ShallowEntities instance
                 */
                ShallowEntities.create = function create(properties) {
                    return new ShallowEntities(properties);
                };
    
                /**
                 * Encodes the specified ShallowEntities message. Does not implicitly {@link anymetrica.request.ShallowEntities.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.request.ShallowEntities
                 * @static
                 * @param {anymetrica.request.IShallowEntities} message ShallowEntities message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ShallowEntities.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.metadata.ShallowEntity.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ShallowEntities message, length delimited. Does not implicitly {@link anymetrica.request.ShallowEntities.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.request.ShallowEntities
                 * @static
                 * @param {anymetrica.request.IShallowEntities} message ShallowEntities message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ShallowEntities.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ShallowEntities message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.request.ShallowEntities
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.request.ShallowEntities} ShallowEntities
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ShallowEntities.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.request.ShallowEntities();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.metadata.ShallowEntity.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ShallowEntities message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.request.ShallowEntities
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.request.ShallowEntities} ShallowEntities
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ShallowEntities.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ShallowEntities message.
                 * @function verify
                 * @memberof anymetrica.request.ShallowEntities
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ShallowEntities.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.metadata.ShallowEntity.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ShallowEntities message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.request.ShallowEntities
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.request.ShallowEntities} ShallowEntities
                 */
                ShallowEntities.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.request.ShallowEntities)
                        return object;
                    var message = new $root.anymetrica.request.ShallowEntities();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.request.ShallowEntities.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.request.ShallowEntities.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.request.ShallowEntities.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.request.ShallowEntities.entities: object expected");
                            message.entities[i] = $root.anymetrica.metadata.ShallowEntity.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ShallowEntities message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.request.ShallowEntities
                 * @static
                 * @param {anymetrica.request.ShallowEntities} message ShallowEntities
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ShallowEntities.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.metadata.ShallowEntity.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ShallowEntities to JSON.
                 * @function toJSON
                 * @memberof anymetrica.request.ShallowEntities
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ShallowEntities.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ShallowEntities;
            })();
    
            return request;
        })();
    
        anymetrica.credential = (function() {
    
            /**
             * Namespace credential.
             * @memberof anymetrica
             * @namespace
             */
            var credential = {};
    
            credential.UsernamePassword = (function() {
    
                /**
                 * Properties of a UsernamePassword.
                 * @memberof anymetrica.credential
                 * @interface IUsernamePassword
                 * @property {string|null} [id] UsernamePassword id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] UsernamePassword metadata
                 * @property {string|null} [username] UsernamePassword username
                 * @property {string|null} [namespace] UsernamePassword namespace
                 * @property {string|null} [password] UsernamePassword password
                 * @property {boolean|null} [is_not_set] UsernamePassword is_not_set
                 * @property {boolean|null} [is_revoked] UsernamePassword is_revoked
                 * @property {google.protobuf.ITimestamp|null} [expires_ts] UsernamePassword expires_ts
                 */
    
                /**
                 * Constructs a new UsernamePassword.
                 * @memberof anymetrica.credential
                 * @classdesc Represents a UsernamePassword.
                 * @implements IUsernamePassword
                 * @constructor
                 * @param {anymetrica.credential.IUsernamePassword=} [properties] Properties to set
                 */
                function UsernamePassword(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UsernamePassword id.
                 * @member {string} id
                 * @memberof anymetrica.credential.UsernamePassword
                 * @instance
                 */
                UsernamePassword.prototype.id = "";
    
                /**
                 * UsernamePassword metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.credential.UsernamePassword
                 * @instance
                 */
                UsernamePassword.prototype.metadata = null;
    
                /**
                 * UsernamePassword username.
                 * @member {string} username
                 * @memberof anymetrica.credential.UsernamePassword
                 * @instance
                 */
                UsernamePassword.prototype.username = "";
    
                /**
                 * UsernamePassword namespace.
                 * @member {string} namespace
                 * @memberof anymetrica.credential.UsernamePassword
                 * @instance
                 */
                UsernamePassword.prototype.namespace = "";
    
                /**
                 * UsernamePassword password.
                 * @member {string} password
                 * @memberof anymetrica.credential.UsernamePassword
                 * @instance
                 */
                UsernamePassword.prototype.password = "";
    
                /**
                 * UsernamePassword is_not_set.
                 * @member {boolean} is_not_set
                 * @memberof anymetrica.credential.UsernamePassword
                 * @instance
                 */
                UsernamePassword.prototype.is_not_set = false;
    
                /**
                 * UsernamePassword is_revoked.
                 * @member {boolean} is_revoked
                 * @memberof anymetrica.credential.UsernamePassword
                 * @instance
                 */
                UsernamePassword.prototype.is_revoked = false;
    
                /**
                 * UsernamePassword expires_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} expires_ts
                 * @memberof anymetrica.credential.UsernamePassword
                 * @instance
                 */
                UsernamePassword.prototype.expires_ts = null;
    
                /**
                 * Creates a new UsernamePassword instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.credential.UsernamePassword
                 * @static
                 * @param {anymetrica.credential.IUsernamePassword=} [properties] Properties to set
                 * @returns {anymetrica.credential.UsernamePassword} UsernamePassword instance
                 */
                UsernamePassword.create = function create(properties) {
                    return new UsernamePassword(properties);
                };
    
                /**
                 * Encodes the specified UsernamePassword message. Does not implicitly {@link anymetrica.credential.UsernamePassword.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.credential.UsernamePassword
                 * @static
                 * @param {anymetrica.credential.IUsernamePassword} message UsernamePassword message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UsernamePassword.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.username != null && message.hasOwnProperty("username"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.username);
                    if (message.namespace != null && message.hasOwnProperty("namespace"))
                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.namespace);
                    if (message.password != null && message.hasOwnProperty("password"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.password);
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.is_not_set);
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.is_revoked);
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts"))
                        $root.google.protobuf.Timestamp.encode(message.expires_ts, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified UsernamePassword message, length delimited. Does not implicitly {@link anymetrica.credential.UsernamePassword.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.credential.UsernamePassword
                 * @static
                 * @param {anymetrica.credential.IUsernamePassword} message UsernamePassword message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UsernamePassword.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a UsernamePassword message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.credential.UsernamePassword
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.credential.UsernamePassword} UsernamePassword
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UsernamePassword.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.credential.UsernamePassword();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.username = reader.string();
                            break;
                        case 9:
                            message.namespace = reader.string();
                            break;
                        case 10:
                            message.password = reader.string();
                            break;
                        case 16:
                            message.is_not_set = reader.bool();
                            break;
                        case 20:
                            message.is_revoked = reader.bool();
                            break;
                        case 64:
                            message.expires_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a UsernamePassword message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.credential.UsernamePassword
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.credential.UsernamePassword} UsernamePassword
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UsernamePassword.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a UsernamePassword message.
                 * @function verify
                 * @memberof anymetrica.credential.UsernamePassword
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UsernamePassword.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.username != null && message.hasOwnProperty("username"))
                        if (!$util.isString(message.username))
                            return "username: string expected";
                    if (message.namespace != null && message.hasOwnProperty("namespace"))
                        if (!$util.isString(message.namespace))
                            return "namespace: string expected";
                    if (message.password != null && message.hasOwnProperty("password"))
                        if (!$util.isString(message.password))
                            return "password: string expected";
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        if (typeof message.is_not_set !== "boolean")
                            return "is_not_set: boolean expected";
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        if (typeof message.is_revoked !== "boolean")
                            return "is_revoked: boolean expected";
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.expires_ts);
                        if (error)
                            return "expires_ts." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a UsernamePassword message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.credential.UsernamePassword
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.credential.UsernamePassword} UsernamePassword
                 */
                UsernamePassword.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.credential.UsernamePassword)
                        return object;
                    var message = new $root.anymetrica.credential.UsernamePassword();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.credential.UsernamePassword.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.username != null)
                        message.username = String(object.username);
                    if (object.namespace != null)
                        message.namespace = String(object.namespace);
                    if (object.password != null)
                        message.password = String(object.password);
                    if (object.is_not_set != null)
                        message.is_not_set = Boolean(object.is_not_set);
                    if (object.is_revoked != null)
                        message.is_revoked = Boolean(object.is_revoked);
                    if (object.expires_ts != null) {
                        if (typeof object.expires_ts !== "object")
                            throw TypeError(".anymetrica.credential.UsernamePassword.expires_ts: object expected");
                        message.expires_ts = $root.google.protobuf.Timestamp.fromObject(object.expires_ts);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a UsernamePassword message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.credential.UsernamePassword
                 * @static
                 * @param {anymetrica.credential.UsernamePassword} message UsernamePassword
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UsernamePassword.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.username = "";
                        object.namespace = "";
                        object.password = "";
                        object.is_not_set = false;
                        object.is_revoked = false;
                        object.expires_ts = null;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.username != null && message.hasOwnProperty("username"))
                        object.username = message.username;
                    if (message.namespace != null && message.hasOwnProperty("namespace"))
                        object.namespace = message.namespace;
                    if (message.password != null && message.hasOwnProperty("password"))
                        object.password = message.password;
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        object.is_not_set = message.is_not_set;
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        object.is_revoked = message.is_revoked;
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts"))
                        object.expires_ts = $root.google.protobuf.Timestamp.toObject(message.expires_ts, options);
                    return object;
                };
    
                /**
                 * Converts this UsernamePassword to JSON.
                 * @function toJSON
                 * @memberof anymetrica.credential.UsernamePassword
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UsernamePassword.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return UsernamePassword;
            })();
    
            credential.UsernamePasswords = (function() {
    
                /**
                 * Properties of a UsernamePasswords.
                 * @memberof anymetrica.credential
                 * @interface IUsernamePasswords
                 * @property {anymetrica.request.IRequestMetadata|null} [request] UsernamePasswords request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] UsernamePasswords response
                 * @property {Array.<anymetrica.credential.IUsernamePassword>|null} [entities] UsernamePasswords entities
                 */
    
                /**
                 * Constructs a new UsernamePasswords.
                 * @memberof anymetrica.credential
                 * @classdesc Represents a UsernamePasswords.
                 * @implements IUsernamePasswords
                 * @constructor
                 * @param {anymetrica.credential.IUsernamePasswords=} [properties] Properties to set
                 */
                function UsernamePasswords(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UsernamePasswords request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @instance
                 */
                UsernamePasswords.prototype.request = null;
    
                /**
                 * UsernamePasswords response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @instance
                 */
                UsernamePasswords.prototype.response = null;
    
                /**
                 * UsernamePasswords entities.
                 * @member {Array.<anymetrica.credential.IUsernamePassword>} entities
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @instance
                 */
                UsernamePasswords.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new UsernamePasswords instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @static
                 * @param {anymetrica.credential.IUsernamePasswords=} [properties] Properties to set
                 * @returns {anymetrica.credential.UsernamePasswords} UsernamePasswords instance
                 */
                UsernamePasswords.create = function create(properties) {
                    return new UsernamePasswords(properties);
                };
    
                /**
                 * Encodes the specified UsernamePasswords message. Does not implicitly {@link anymetrica.credential.UsernamePasswords.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @static
                 * @param {anymetrica.credential.IUsernamePasswords} message UsernamePasswords message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UsernamePasswords.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.credential.UsernamePassword.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified UsernamePasswords message, length delimited. Does not implicitly {@link anymetrica.credential.UsernamePasswords.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @static
                 * @param {anymetrica.credential.IUsernamePasswords} message UsernamePasswords message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UsernamePasswords.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a UsernamePasswords message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.credential.UsernamePasswords} UsernamePasswords
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UsernamePasswords.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.credential.UsernamePasswords();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.credential.UsernamePassword.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a UsernamePasswords message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.credential.UsernamePasswords} UsernamePasswords
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UsernamePasswords.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a UsernamePasswords message.
                 * @function verify
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UsernamePasswords.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.credential.UsernamePassword.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a UsernamePasswords message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.credential.UsernamePasswords} UsernamePasswords
                 */
                UsernamePasswords.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.credential.UsernamePasswords)
                        return object;
                    var message = new $root.anymetrica.credential.UsernamePasswords();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.credential.UsernamePasswords.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.credential.UsernamePasswords.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.credential.UsernamePasswords.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.credential.UsernamePasswords.entities: object expected");
                            message.entities[i] = $root.anymetrica.credential.UsernamePassword.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a UsernamePasswords message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @static
                 * @param {anymetrica.credential.UsernamePasswords} message UsernamePasswords
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UsernamePasswords.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.credential.UsernamePassword.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this UsernamePasswords to JSON.
                 * @function toJSON
                 * @memberof anymetrica.credential.UsernamePasswords
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UsernamePasswords.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return UsernamePasswords;
            })();
    
            credential.SessionToken = (function() {
    
                /**
                 * Properties of a SessionToken.
                 * @memberof anymetrica.credential
                 * @interface ISessionToken
                 * @property {string|null} [id] SessionToken id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] SessionToken metadata
                 * @property {string|null} [token] SessionToken token
                 * @property {string|null} [session_token] SessionToken session_token
                 * @property {boolean|null} [is_not_set] SessionToken is_not_set
                 * @property {boolean|null} [is_revoked] SessionToken is_revoked
                 * @property {google.protobuf.ITimestamp|null} [expires_ts] SessionToken expires_ts
                 */
    
                /**
                 * Constructs a new SessionToken.
                 * @memberof anymetrica.credential
                 * @classdesc Represents a SessionToken.
                 * @implements ISessionToken
                 * @constructor
                 * @param {anymetrica.credential.ISessionToken=} [properties] Properties to set
                 */
                function SessionToken(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SessionToken id.
                 * @member {string} id
                 * @memberof anymetrica.credential.SessionToken
                 * @instance
                 */
                SessionToken.prototype.id = "";
    
                /**
                 * SessionToken metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.credential.SessionToken
                 * @instance
                 */
                SessionToken.prototype.metadata = null;
    
                /**
                 * SessionToken token.
                 * @member {string} token
                 * @memberof anymetrica.credential.SessionToken
                 * @instance
                 */
                SessionToken.prototype.token = "";
    
                /**
                 * SessionToken session_token.
                 * @member {string} session_token
                 * @memberof anymetrica.credential.SessionToken
                 * @instance
                 */
                SessionToken.prototype.session_token = "";
    
                /**
                 * SessionToken is_not_set.
                 * @member {boolean} is_not_set
                 * @memberof anymetrica.credential.SessionToken
                 * @instance
                 */
                SessionToken.prototype.is_not_set = false;
    
                /**
                 * SessionToken is_revoked.
                 * @member {boolean} is_revoked
                 * @memberof anymetrica.credential.SessionToken
                 * @instance
                 */
                SessionToken.prototype.is_revoked = false;
    
                /**
                 * SessionToken expires_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} expires_ts
                 * @memberof anymetrica.credential.SessionToken
                 * @instance
                 */
                SessionToken.prototype.expires_ts = null;
    
                /**
                 * Creates a new SessionToken instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.credential.SessionToken
                 * @static
                 * @param {anymetrica.credential.ISessionToken=} [properties] Properties to set
                 * @returns {anymetrica.credential.SessionToken} SessionToken instance
                 */
                SessionToken.create = function create(properties) {
                    return new SessionToken(properties);
                };
    
                /**
                 * Encodes the specified SessionToken message. Does not implicitly {@link anymetrica.credential.SessionToken.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.credential.SessionToken
                 * @static
                 * @param {anymetrica.credential.ISessionToken} message SessionToken message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SessionToken.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.token != null && message.hasOwnProperty("token"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.token);
                    if (message.session_token != null && message.hasOwnProperty("session_token"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.session_token);
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.is_not_set);
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.is_revoked);
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts"))
                        $root.google.protobuf.Timestamp.encode(message.expires_ts, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SessionToken message, length delimited. Does not implicitly {@link anymetrica.credential.SessionToken.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.credential.SessionToken
                 * @static
                 * @param {anymetrica.credential.ISessionToken} message SessionToken message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SessionToken.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SessionToken message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.credential.SessionToken
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.credential.SessionToken} SessionToken
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SessionToken.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.credential.SessionToken();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.token = reader.string();
                            break;
                        case 11:
                            message.session_token = reader.string();
                            break;
                        case 16:
                            message.is_not_set = reader.bool();
                            break;
                        case 20:
                            message.is_revoked = reader.bool();
                            break;
                        case 64:
                            message.expires_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SessionToken message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.credential.SessionToken
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.credential.SessionToken} SessionToken
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SessionToken.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SessionToken message.
                 * @function verify
                 * @memberof anymetrica.credential.SessionToken
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SessionToken.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.token != null && message.hasOwnProperty("token"))
                        if (!$util.isString(message.token))
                            return "token: string expected";
                    if (message.session_token != null && message.hasOwnProperty("session_token"))
                        if (!$util.isString(message.session_token))
                            return "session_token: string expected";
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        if (typeof message.is_not_set !== "boolean")
                            return "is_not_set: boolean expected";
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        if (typeof message.is_revoked !== "boolean")
                            return "is_revoked: boolean expected";
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.expires_ts);
                        if (error)
                            return "expires_ts." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a SessionToken message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.credential.SessionToken
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.credential.SessionToken} SessionToken
                 */
                SessionToken.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.credential.SessionToken)
                        return object;
                    var message = new $root.anymetrica.credential.SessionToken();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.credential.SessionToken.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.token != null)
                        message.token = String(object.token);
                    if (object.session_token != null)
                        message.session_token = String(object.session_token);
                    if (object.is_not_set != null)
                        message.is_not_set = Boolean(object.is_not_set);
                    if (object.is_revoked != null)
                        message.is_revoked = Boolean(object.is_revoked);
                    if (object.expires_ts != null) {
                        if (typeof object.expires_ts !== "object")
                            throw TypeError(".anymetrica.credential.SessionToken.expires_ts: object expected");
                        message.expires_ts = $root.google.protobuf.Timestamp.fromObject(object.expires_ts);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SessionToken message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.credential.SessionToken
                 * @static
                 * @param {anymetrica.credential.SessionToken} message SessionToken
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SessionToken.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.token = "";
                        object.session_token = "";
                        object.is_not_set = false;
                        object.is_revoked = false;
                        object.expires_ts = null;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.token != null && message.hasOwnProperty("token"))
                        object.token = message.token;
                    if (message.session_token != null && message.hasOwnProperty("session_token"))
                        object.session_token = message.session_token;
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        object.is_not_set = message.is_not_set;
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        object.is_revoked = message.is_revoked;
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts"))
                        object.expires_ts = $root.google.protobuf.Timestamp.toObject(message.expires_ts, options);
                    return object;
                };
    
                /**
                 * Converts this SessionToken to JSON.
                 * @function toJSON
                 * @memberof anymetrica.credential.SessionToken
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SessionToken.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SessionToken;
            })();
    
            credential.SessionTokens = (function() {
    
                /**
                 * Properties of a SessionTokens.
                 * @memberof anymetrica.credential
                 * @interface ISessionTokens
                 * @property {anymetrica.request.IRequestMetadata|null} [request] SessionTokens request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] SessionTokens response
                 * @property {Array.<anymetrica.credential.ISessionToken>|null} [entities] SessionTokens entities
                 */
    
                /**
                 * Constructs a new SessionTokens.
                 * @memberof anymetrica.credential
                 * @classdesc Represents a SessionTokens.
                 * @implements ISessionTokens
                 * @constructor
                 * @param {anymetrica.credential.ISessionTokens=} [properties] Properties to set
                 */
                function SessionTokens(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SessionTokens request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.credential.SessionTokens
                 * @instance
                 */
                SessionTokens.prototype.request = null;
    
                /**
                 * SessionTokens response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.credential.SessionTokens
                 * @instance
                 */
                SessionTokens.prototype.response = null;
    
                /**
                 * SessionTokens entities.
                 * @member {Array.<anymetrica.credential.ISessionToken>} entities
                 * @memberof anymetrica.credential.SessionTokens
                 * @instance
                 */
                SessionTokens.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new SessionTokens instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.credential.SessionTokens
                 * @static
                 * @param {anymetrica.credential.ISessionTokens=} [properties] Properties to set
                 * @returns {anymetrica.credential.SessionTokens} SessionTokens instance
                 */
                SessionTokens.create = function create(properties) {
                    return new SessionTokens(properties);
                };
    
                /**
                 * Encodes the specified SessionTokens message. Does not implicitly {@link anymetrica.credential.SessionTokens.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.credential.SessionTokens
                 * @static
                 * @param {anymetrica.credential.ISessionTokens} message SessionTokens message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SessionTokens.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.credential.SessionToken.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SessionTokens message, length delimited. Does not implicitly {@link anymetrica.credential.SessionTokens.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.credential.SessionTokens
                 * @static
                 * @param {anymetrica.credential.ISessionTokens} message SessionTokens message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SessionTokens.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SessionTokens message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.credential.SessionTokens
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.credential.SessionTokens} SessionTokens
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SessionTokens.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.credential.SessionTokens();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.credential.SessionToken.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SessionTokens message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.credential.SessionTokens
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.credential.SessionTokens} SessionTokens
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SessionTokens.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SessionTokens message.
                 * @function verify
                 * @memberof anymetrica.credential.SessionTokens
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SessionTokens.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.credential.SessionToken.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SessionTokens message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.credential.SessionTokens
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.credential.SessionTokens} SessionTokens
                 */
                SessionTokens.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.credential.SessionTokens)
                        return object;
                    var message = new $root.anymetrica.credential.SessionTokens();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.credential.SessionTokens.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.credential.SessionTokens.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.credential.SessionTokens.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.credential.SessionTokens.entities: object expected");
                            message.entities[i] = $root.anymetrica.credential.SessionToken.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SessionTokens message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.credential.SessionTokens
                 * @static
                 * @param {anymetrica.credential.SessionTokens} message SessionTokens
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SessionTokens.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.credential.SessionToken.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SessionTokens to JSON.
                 * @function toJSON
                 * @memberof anymetrica.credential.SessionTokens
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SessionTokens.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SessionTokens;
            })();
    
            credential.OTP = (function() {
    
                /**
                 * Properties of a OTP.
                 * @memberof anymetrica.credential
                 * @interface IOTP
                 * @property {string|null} [id] OTP id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] OTP metadata
                 * @property {string|null} [otp] OTP otp
                 * @property {boolean|null} [is_not_set] OTP is_not_set
                 * @property {boolean|null} [is_revoked] OTP is_revoked
                 * @property {google.protobuf.ITimestamp|null} [expires_ts] OTP expires_ts
                 */
    
                /**
                 * Constructs a new OTP.
                 * @memberof anymetrica.credential
                 * @classdesc Represents a OTP.
                 * @implements IOTP
                 * @constructor
                 * @param {anymetrica.credential.IOTP=} [properties] Properties to set
                 */
                function OTP(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OTP id.
                 * @member {string} id
                 * @memberof anymetrica.credential.OTP
                 * @instance
                 */
                OTP.prototype.id = "";
    
                /**
                 * OTP metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.credential.OTP
                 * @instance
                 */
                OTP.prototype.metadata = null;
    
                /**
                 * OTP otp.
                 * @member {string} otp
                 * @memberof anymetrica.credential.OTP
                 * @instance
                 */
                OTP.prototype.otp = "";
    
                /**
                 * OTP is_not_set.
                 * @member {boolean} is_not_set
                 * @memberof anymetrica.credential.OTP
                 * @instance
                 */
                OTP.prototype.is_not_set = false;
    
                /**
                 * OTP is_revoked.
                 * @member {boolean} is_revoked
                 * @memberof anymetrica.credential.OTP
                 * @instance
                 */
                OTP.prototype.is_revoked = false;
    
                /**
                 * OTP expires_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} expires_ts
                 * @memberof anymetrica.credential.OTP
                 * @instance
                 */
                OTP.prototype.expires_ts = null;
    
                /**
                 * Creates a new OTP instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.credential.OTP
                 * @static
                 * @param {anymetrica.credential.IOTP=} [properties] Properties to set
                 * @returns {anymetrica.credential.OTP} OTP instance
                 */
                OTP.create = function create(properties) {
                    return new OTP(properties);
                };
    
                /**
                 * Encodes the specified OTP message. Does not implicitly {@link anymetrica.credential.OTP.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.credential.OTP
                 * @static
                 * @param {anymetrica.credential.IOTP} message OTP message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OTP.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.otp != null && message.hasOwnProperty("otp"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.otp);
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.is_not_set);
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.is_revoked);
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts"))
                        $root.google.protobuf.Timestamp.encode(message.expires_ts, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OTP message, length delimited. Does not implicitly {@link anymetrica.credential.OTP.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.credential.OTP
                 * @static
                 * @param {anymetrica.credential.IOTP} message OTP message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OTP.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a OTP message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.credential.OTP
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.credential.OTP} OTP
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OTP.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.credential.OTP();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.otp = reader.string();
                            break;
                        case 16:
                            message.is_not_set = reader.bool();
                            break;
                        case 20:
                            message.is_revoked = reader.bool();
                            break;
                        case 64:
                            message.expires_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a OTP message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.credential.OTP
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.credential.OTP} OTP
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OTP.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a OTP message.
                 * @function verify
                 * @memberof anymetrica.credential.OTP
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OTP.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.otp != null && message.hasOwnProperty("otp"))
                        if (!$util.isString(message.otp))
                            return "otp: string expected";
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        if (typeof message.is_not_set !== "boolean")
                            return "is_not_set: boolean expected";
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        if (typeof message.is_revoked !== "boolean")
                            return "is_revoked: boolean expected";
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.expires_ts);
                        if (error)
                            return "expires_ts." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a OTP message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.credential.OTP
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.credential.OTP} OTP
                 */
                OTP.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.credential.OTP)
                        return object;
                    var message = new $root.anymetrica.credential.OTP();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.credential.OTP.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.otp != null)
                        message.otp = String(object.otp);
                    if (object.is_not_set != null)
                        message.is_not_set = Boolean(object.is_not_set);
                    if (object.is_revoked != null)
                        message.is_revoked = Boolean(object.is_revoked);
                    if (object.expires_ts != null) {
                        if (typeof object.expires_ts !== "object")
                            throw TypeError(".anymetrica.credential.OTP.expires_ts: object expected");
                        message.expires_ts = $root.google.protobuf.Timestamp.fromObject(object.expires_ts);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a OTP message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.credential.OTP
                 * @static
                 * @param {anymetrica.credential.OTP} message OTP
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OTP.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.otp = "";
                        object.is_not_set = false;
                        object.is_revoked = false;
                        object.expires_ts = null;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.otp != null && message.hasOwnProperty("otp"))
                        object.otp = message.otp;
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        object.is_not_set = message.is_not_set;
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        object.is_revoked = message.is_revoked;
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts"))
                        object.expires_ts = $root.google.protobuf.Timestamp.toObject(message.expires_ts, options);
                    return object;
                };
    
                /**
                 * Converts this OTP to JSON.
                 * @function toJSON
                 * @memberof anymetrica.credential.OTP
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OTP.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OTP;
            })();
    
            credential.OTPs = (function() {
    
                /**
                 * Properties of a OTPs.
                 * @memberof anymetrica.credential
                 * @interface IOTPs
                 * @property {anymetrica.request.IRequestMetadata|null} [request] OTPs request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] OTPs response
                 * @property {boolean|null} [is_not_set] OTPs is_not_set
                 * @property {boolean|null} [is_revoked] OTPs is_revoked
                 * @property {Array.<anymetrica.credential.IOTP>|null} [entities] OTPs entities
                 */
    
                /**
                 * Constructs a new OTPs.
                 * @memberof anymetrica.credential
                 * @classdesc Represents a OTPs.
                 * @implements IOTPs
                 * @constructor
                 * @param {anymetrica.credential.IOTPs=} [properties] Properties to set
                 */
                function OTPs(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OTPs request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.credential.OTPs
                 * @instance
                 */
                OTPs.prototype.request = null;
    
                /**
                 * OTPs response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.credential.OTPs
                 * @instance
                 */
                OTPs.prototype.response = null;
    
                /**
                 * OTPs is_not_set.
                 * @member {boolean} is_not_set
                 * @memberof anymetrica.credential.OTPs
                 * @instance
                 */
                OTPs.prototype.is_not_set = false;
    
                /**
                 * OTPs is_revoked.
                 * @member {boolean} is_revoked
                 * @memberof anymetrica.credential.OTPs
                 * @instance
                 */
                OTPs.prototype.is_revoked = false;
    
                /**
                 * OTPs entities.
                 * @member {Array.<anymetrica.credential.IOTP>} entities
                 * @memberof anymetrica.credential.OTPs
                 * @instance
                 */
                OTPs.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new OTPs instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.credential.OTPs
                 * @static
                 * @param {anymetrica.credential.IOTPs=} [properties] Properties to set
                 * @returns {anymetrica.credential.OTPs} OTPs instance
                 */
                OTPs.create = function create(properties) {
                    return new OTPs(properties);
                };
    
                /**
                 * Encodes the specified OTPs message. Does not implicitly {@link anymetrica.credential.OTPs.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.credential.OTPs
                 * @static
                 * @param {anymetrica.credential.IOTPs} message OTPs message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OTPs.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.credential.OTP.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.is_not_set);
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.is_revoked);
                    return writer;
                };
    
                /**
                 * Encodes the specified OTPs message, length delimited. Does not implicitly {@link anymetrica.credential.OTPs.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.credential.OTPs
                 * @static
                 * @param {anymetrica.credential.IOTPs} message OTPs message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OTPs.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a OTPs message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.credential.OTPs
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.credential.OTPs} OTPs
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OTPs.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.credential.OTPs();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 16:
                            message.is_not_set = reader.bool();
                            break;
                        case 20:
                            message.is_revoked = reader.bool();
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.credential.OTP.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a OTPs message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.credential.OTPs
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.credential.OTPs} OTPs
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OTPs.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a OTPs message.
                 * @function verify
                 * @memberof anymetrica.credential.OTPs
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OTPs.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        if (typeof message.is_not_set !== "boolean")
                            return "is_not_set: boolean expected";
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        if (typeof message.is_revoked !== "boolean")
                            return "is_revoked: boolean expected";
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.credential.OTP.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a OTPs message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.credential.OTPs
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.credential.OTPs} OTPs
                 */
                OTPs.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.credential.OTPs)
                        return object;
                    var message = new $root.anymetrica.credential.OTPs();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.credential.OTPs.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.credential.OTPs.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.is_not_set != null)
                        message.is_not_set = Boolean(object.is_not_set);
                    if (object.is_revoked != null)
                        message.is_revoked = Boolean(object.is_revoked);
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.credential.OTPs.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.credential.OTPs.entities: object expected");
                            message.entities[i] = $root.anymetrica.credential.OTP.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a OTPs message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.credential.OTPs
                 * @static
                 * @param {anymetrica.credential.OTPs} message OTPs
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OTPs.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                        object.is_not_set = false;
                        object.is_revoked = false;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.credential.OTP.toObject(message.entities[j], options);
                    }
                    if (message.is_not_set != null && message.hasOwnProperty("is_not_set"))
                        object.is_not_set = message.is_not_set;
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        object.is_revoked = message.is_revoked;
                    return object;
                };
    
                /**
                 * Converts this OTPs to JSON.
                 * @function toJSON
                 * @memberof anymetrica.credential.OTPs
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OTPs.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OTPs;
            })();
    
            credential.TOTP = (function() {
    
                /**
                 * Properties of a TOTP.
                 * @memberof anymetrica.credential
                 * @interface ITOTP
                 * @property {string|null} [id] TOTP id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] TOTP metadata
                 * @property {string|null} [totp] TOTP totp
                 * @property {boolean|null} [is_revoked] TOTP is_revoked
                 * @property {google.protobuf.ITimestamp|null} [expires_ts] TOTP expires_ts
                 */
    
                /**
                 * Constructs a new TOTP.
                 * @memberof anymetrica.credential
                 * @classdesc Represents a TOTP.
                 * @implements ITOTP
                 * @constructor
                 * @param {anymetrica.credential.ITOTP=} [properties] Properties to set
                 */
                function TOTP(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * TOTP id.
                 * @member {string} id
                 * @memberof anymetrica.credential.TOTP
                 * @instance
                 */
                TOTP.prototype.id = "";
    
                /**
                 * TOTP metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.credential.TOTP
                 * @instance
                 */
                TOTP.prototype.metadata = null;
    
                /**
                 * TOTP totp.
                 * @member {string} totp
                 * @memberof anymetrica.credential.TOTP
                 * @instance
                 */
                TOTP.prototype.totp = "";
    
                /**
                 * TOTP is_revoked.
                 * @member {boolean} is_revoked
                 * @memberof anymetrica.credential.TOTP
                 * @instance
                 */
                TOTP.prototype.is_revoked = false;
    
                /**
                 * TOTP expires_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} expires_ts
                 * @memberof anymetrica.credential.TOTP
                 * @instance
                 */
                TOTP.prototype.expires_ts = null;
    
                /**
                 * Creates a new TOTP instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.credential.TOTP
                 * @static
                 * @param {anymetrica.credential.ITOTP=} [properties] Properties to set
                 * @returns {anymetrica.credential.TOTP} TOTP instance
                 */
                TOTP.create = function create(properties) {
                    return new TOTP(properties);
                };
    
                /**
                 * Encodes the specified TOTP message. Does not implicitly {@link anymetrica.credential.TOTP.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.credential.TOTP
                 * @static
                 * @param {anymetrica.credential.ITOTP} message TOTP message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TOTP.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.totp != null && message.hasOwnProperty("totp"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.totp);
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.is_revoked);
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts"))
                        $root.google.protobuf.Timestamp.encode(message.expires_ts, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified TOTP message, length delimited. Does not implicitly {@link anymetrica.credential.TOTP.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.credential.TOTP
                 * @static
                 * @param {anymetrica.credential.ITOTP} message TOTP message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TOTP.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a TOTP message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.credential.TOTP
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.credential.TOTP} TOTP
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TOTP.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.credential.TOTP();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.totp = reader.string();
                            break;
                        case 20:
                            message.is_revoked = reader.bool();
                            break;
                        case 64:
                            message.expires_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a TOTP message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.credential.TOTP
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.credential.TOTP} TOTP
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TOTP.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a TOTP message.
                 * @function verify
                 * @memberof anymetrica.credential.TOTP
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TOTP.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.totp != null && message.hasOwnProperty("totp"))
                        if (!$util.isString(message.totp))
                            return "totp: string expected";
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        if (typeof message.is_revoked !== "boolean")
                            return "is_revoked: boolean expected";
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.expires_ts);
                        if (error)
                            return "expires_ts." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a TOTP message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.credential.TOTP
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.credential.TOTP} TOTP
                 */
                TOTP.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.credential.TOTP)
                        return object;
                    var message = new $root.anymetrica.credential.TOTP();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.credential.TOTP.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.totp != null)
                        message.totp = String(object.totp);
                    if (object.is_revoked != null)
                        message.is_revoked = Boolean(object.is_revoked);
                    if (object.expires_ts != null) {
                        if (typeof object.expires_ts !== "object")
                            throw TypeError(".anymetrica.credential.TOTP.expires_ts: object expected");
                        message.expires_ts = $root.google.protobuf.Timestamp.fromObject(object.expires_ts);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a TOTP message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.credential.TOTP
                 * @static
                 * @param {anymetrica.credential.TOTP} message TOTP
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TOTP.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.totp = "";
                        object.is_revoked = false;
                        object.expires_ts = null;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.totp != null && message.hasOwnProperty("totp"))
                        object.totp = message.totp;
                    if (message.is_revoked != null && message.hasOwnProperty("is_revoked"))
                        object.is_revoked = message.is_revoked;
                    if (message.expires_ts != null && message.hasOwnProperty("expires_ts"))
                        object.expires_ts = $root.google.protobuf.Timestamp.toObject(message.expires_ts, options);
                    return object;
                };
    
                /**
                 * Converts this TOTP to JSON.
                 * @function toJSON
                 * @memberof anymetrica.credential.TOTP
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TOTP.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return TOTP;
            })();
    
            credential.TOTPs = (function() {
    
                /**
                 * Properties of a TOTPs.
                 * @memberof anymetrica.credential
                 * @interface ITOTPs
                 * @property {anymetrica.request.IRequestMetadata|null} [request] TOTPs request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] TOTPs response
                 * @property {Array.<anymetrica.credential.ITOTP>|null} [entities] TOTPs entities
                 */
    
                /**
                 * Constructs a new TOTPs.
                 * @memberof anymetrica.credential
                 * @classdesc Represents a TOTPs.
                 * @implements ITOTPs
                 * @constructor
                 * @param {anymetrica.credential.ITOTPs=} [properties] Properties to set
                 */
                function TOTPs(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * TOTPs request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.credential.TOTPs
                 * @instance
                 */
                TOTPs.prototype.request = null;
    
                /**
                 * TOTPs response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.credential.TOTPs
                 * @instance
                 */
                TOTPs.prototype.response = null;
    
                /**
                 * TOTPs entities.
                 * @member {Array.<anymetrica.credential.ITOTP>} entities
                 * @memberof anymetrica.credential.TOTPs
                 * @instance
                 */
                TOTPs.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new TOTPs instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.credential.TOTPs
                 * @static
                 * @param {anymetrica.credential.ITOTPs=} [properties] Properties to set
                 * @returns {anymetrica.credential.TOTPs} TOTPs instance
                 */
                TOTPs.create = function create(properties) {
                    return new TOTPs(properties);
                };
    
                /**
                 * Encodes the specified TOTPs message. Does not implicitly {@link anymetrica.credential.TOTPs.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.credential.TOTPs
                 * @static
                 * @param {anymetrica.credential.ITOTPs} message TOTPs message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TOTPs.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.credential.TOTP.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified TOTPs message, length delimited. Does not implicitly {@link anymetrica.credential.TOTPs.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.credential.TOTPs
                 * @static
                 * @param {anymetrica.credential.ITOTPs} message TOTPs message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TOTPs.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a TOTPs message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.credential.TOTPs
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.credential.TOTPs} TOTPs
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TOTPs.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.credential.TOTPs();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.credential.TOTP.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a TOTPs message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.credential.TOTPs
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.credential.TOTPs} TOTPs
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TOTPs.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a TOTPs message.
                 * @function verify
                 * @memberof anymetrica.credential.TOTPs
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TOTPs.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.credential.TOTP.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a TOTPs message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.credential.TOTPs
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.credential.TOTPs} TOTPs
                 */
                TOTPs.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.credential.TOTPs)
                        return object;
                    var message = new $root.anymetrica.credential.TOTPs();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.credential.TOTPs.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.credential.TOTPs.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.credential.TOTPs.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.credential.TOTPs.entities: object expected");
                            message.entities[i] = $root.anymetrica.credential.TOTP.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a TOTPs message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.credential.TOTPs
                 * @static
                 * @param {anymetrica.credential.TOTPs} message TOTPs
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TOTPs.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.credential.TOTP.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this TOTPs to JSON.
                 * @function toJSON
                 * @memberof anymetrica.credential.TOTPs
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TOTPs.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return TOTPs;
            })();
    
            credential.Credential = (function() {
    
                /**
                 * Properties of a Credential.
                 * @memberof anymetrica.credential
                 * @interface ICredential
                 * @property {anymetrica.credential.IOTP|null} [otp] Credential otp
                 * @property {anymetrica.credential.ITOTP|null} [totp] Credential totp
                 * @property {anymetrica.credential.ISessionToken|null} [session_token] Credential session_token
                 * @property {anymetrica.credential.IUsernamePassword|null} [username_password] Credential username_password
                 */
    
                /**
                 * Constructs a new Credential.
                 * @memberof anymetrica.credential
                 * @classdesc Represents a Credential.
                 * @implements ICredential
                 * @constructor
                 * @param {anymetrica.credential.ICredential=} [properties] Properties to set
                 */
                function Credential(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Credential otp.
                 * @member {anymetrica.credential.IOTP|null|undefined} otp
                 * @memberof anymetrica.credential.Credential
                 * @instance
                 */
                Credential.prototype.otp = null;
    
                /**
                 * Credential totp.
                 * @member {anymetrica.credential.ITOTP|null|undefined} totp
                 * @memberof anymetrica.credential.Credential
                 * @instance
                 */
                Credential.prototype.totp = null;
    
                /**
                 * Credential session_token.
                 * @member {anymetrica.credential.ISessionToken|null|undefined} session_token
                 * @memberof anymetrica.credential.Credential
                 * @instance
                 */
                Credential.prototype.session_token = null;
    
                /**
                 * Credential username_password.
                 * @member {anymetrica.credential.IUsernamePassword|null|undefined} username_password
                 * @memberof anymetrica.credential.Credential
                 * @instance
                 */
                Credential.prototype.username_password = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Credential credential.
                 * @member {"otp"|"totp"|"session_token"|"username_password"|undefined} credential
                 * @memberof anymetrica.credential.Credential
                 * @instance
                 */
                Object.defineProperty(Credential.prototype, "credential", {
                    get: $util.oneOfGetter($oneOfFields = ["otp", "totp", "session_token", "username_password"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Credential instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.credential.Credential
                 * @static
                 * @param {anymetrica.credential.ICredential=} [properties] Properties to set
                 * @returns {anymetrica.credential.Credential} Credential instance
                 */
                Credential.create = function create(properties) {
                    return new Credential(properties);
                };
    
                /**
                 * Encodes the specified Credential message. Does not implicitly {@link anymetrica.credential.Credential.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.credential.Credential
                 * @static
                 * @param {anymetrica.credential.ICredential} message Credential message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Credential.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.otp != null && message.hasOwnProperty("otp"))
                        $root.anymetrica.credential.OTP.encode(message.otp, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.totp != null && message.hasOwnProperty("totp"))
                        $root.anymetrica.credential.TOTP.encode(message.totp, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.session_token != null && message.hasOwnProperty("session_token"))
                        $root.anymetrica.credential.SessionToken.encode(message.session_token, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                    if (message.username_password != null && message.hasOwnProperty("username_password"))
                        $root.anymetrica.credential.UsernamePassword.encode(message.username_password, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Credential message, length delimited. Does not implicitly {@link anymetrica.credential.Credential.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.credential.Credential
                 * @static
                 * @param {anymetrica.credential.ICredential} message Credential message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Credential.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Credential message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.credential.Credential
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.credential.Credential} Credential
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Credential.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.credential.Credential();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 8:
                            message.otp = $root.anymetrica.credential.OTP.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.totp = $root.anymetrica.credential.TOTP.decode(reader, reader.uint32());
                            break;
                        case 16:
                            message.session_token = $root.anymetrica.credential.SessionToken.decode(reader, reader.uint32());
                            break;
                        case 17:
                            message.username_password = $root.anymetrica.credential.UsernamePassword.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Credential message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.credential.Credential
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.credential.Credential} Credential
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Credential.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Credential message.
                 * @function verify
                 * @memberof anymetrica.credential.Credential
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Credential.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.otp != null && message.hasOwnProperty("otp")) {
                        properties.credential = 1;
                        {
                            var error = $root.anymetrica.credential.OTP.verify(message.otp);
                            if (error)
                                return "otp." + error;
                        }
                    }
                    if (message.totp != null && message.hasOwnProperty("totp")) {
                        if (properties.credential === 1)
                            return "credential: multiple values";
                        properties.credential = 1;
                        {
                            var error = $root.anymetrica.credential.TOTP.verify(message.totp);
                            if (error)
                                return "totp." + error;
                        }
                    }
                    if (message.session_token != null && message.hasOwnProperty("session_token")) {
                        if (properties.credential === 1)
                            return "credential: multiple values";
                        properties.credential = 1;
                        {
                            var error = $root.anymetrica.credential.SessionToken.verify(message.session_token);
                            if (error)
                                return "session_token." + error;
                        }
                    }
                    if (message.username_password != null && message.hasOwnProperty("username_password")) {
                        if (properties.credential === 1)
                            return "credential: multiple values";
                        properties.credential = 1;
                        {
                            var error = $root.anymetrica.credential.UsernamePassword.verify(message.username_password);
                            if (error)
                                return "username_password." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Credential message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.credential.Credential
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.credential.Credential} Credential
                 */
                Credential.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.credential.Credential)
                        return object;
                    var message = new $root.anymetrica.credential.Credential();
                    if (object.otp != null) {
                        if (typeof object.otp !== "object")
                            throw TypeError(".anymetrica.credential.Credential.otp: object expected");
                        message.otp = $root.anymetrica.credential.OTP.fromObject(object.otp);
                    }
                    if (object.totp != null) {
                        if (typeof object.totp !== "object")
                            throw TypeError(".anymetrica.credential.Credential.totp: object expected");
                        message.totp = $root.anymetrica.credential.TOTP.fromObject(object.totp);
                    }
                    if (object.session_token != null) {
                        if (typeof object.session_token !== "object")
                            throw TypeError(".anymetrica.credential.Credential.session_token: object expected");
                        message.session_token = $root.anymetrica.credential.SessionToken.fromObject(object.session_token);
                    }
                    if (object.username_password != null) {
                        if (typeof object.username_password !== "object")
                            throw TypeError(".anymetrica.credential.Credential.username_password: object expected");
                        message.username_password = $root.anymetrica.credential.UsernamePassword.fromObject(object.username_password);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Credential message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.credential.Credential
                 * @static
                 * @param {anymetrica.credential.Credential} message Credential
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Credential.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.otp != null && message.hasOwnProperty("otp")) {
                        object.otp = $root.anymetrica.credential.OTP.toObject(message.otp, options);
                        if (options.oneofs)
                            object.credential = "otp";
                    }
                    if (message.totp != null && message.hasOwnProperty("totp")) {
                        object.totp = $root.anymetrica.credential.TOTP.toObject(message.totp, options);
                        if (options.oneofs)
                            object.credential = "totp";
                    }
                    if (message.session_token != null && message.hasOwnProperty("session_token")) {
                        object.session_token = $root.anymetrica.credential.SessionToken.toObject(message.session_token, options);
                        if (options.oneofs)
                            object.credential = "session_token";
                    }
                    if (message.username_password != null && message.hasOwnProperty("username_password")) {
                        object.username_password = $root.anymetrica.credential.UsernamePassword.toObject(message.username_password, options);
                        if (options.oneofs)
                            object.credential = "username_password";
                    }
                    return object;
                };
    
                /**
                 * Converts this Credential to JSON.
                 * @function toJSON
                 * @memberof anymetrica.credential.Credential
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Credential.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Credential;
            })();
    
            return credential;
        })();
    
        anymetrica.contact = (function() {
    
            /**
             * Namespace contact.
             * @memberof anymetrica
             * @namespace
             */
            var contact = {};
    
            /**
             * ContactType enum.
             * @name anymetrica.contact.ContactType
             * @enum {string}
             * @property {number} CONTACT_UNSPECIFIED=0 CONTACT_UNSPECIFIED value
             * @property {number} CONTACT_OTHER=1 CONTACT_OTHER value
             * @property {number} CONTACT_PHONE=16 CONTACT_PHONE value
             * @property {number} CONTACT_EMAIL=17 CONTACT_EMAIL value
             * @property {number} CONTACT_FAX=18 CONTACT_FAX value
             * @property {number} CONTACT_JABBER=32 CONTACT_JABBER value
             * @property {number} CONTACT_DISCORD=33 CONTACT_DISCORD value
             * @property {number} CONTACT_SKYPE=34 CONTACT_SKYPE value
             * @property {number} CONTACT_MSN=35 CONTACT_MSN value
             * @property {number} CONTACT_ICQ=36 CONTACT_ICQ value
             * @property {number} CONTACT_FACEBOOK_ID=128 CONTACT_FACEBOOK_ID value
             * @property {number} CONTACT_BADOO_LOGIN=129 CONTACT_BADOO_LOGIN value
             * @property {number} CONTACT_BAIDU_ID=130 CONTACT_BAIDU_ID value
             * @property {number} CONTACT_VKONTAKTE_ID=131 CONTACT_VKONTAKTE_ID value
             */
            contact.ContactType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CONTACT_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CONTACT_OTHER"] = 1;
                values[valuesById[16] = "CONTACT_PHONE"] = 16;
                values[valuesById[17] = "CONTACT_EMAIL"] = 17;
                values[valuesById[18] = "CONTACT_FAX"] = 18;
                values[valuesById[32] = "CONTACT_JABBER"] = 32;
                values[valuesById[33] = "CONTACT_DISCORD"] = 33;
                values[valuesById[34] = "CONTACT_SKYPE"] = 34;
                values[valuesById[35] = "CONTACT_MSN"] = 35;
                values[valuesById[36] = "CONTACT_ICQ"] = 36;
                values[valuesById[128] = "CONTACT_FACEBOOK_ID"] = 128;
                values[valuesById[129] = "CONTACT_BADOO_LOGIN"] = 129;
                values[valuesById[130] = "CONTACT_BAIDU_ID"] = 130;
                values[valuesById[131] = "CONTACT_VKONTAKTE_ID"] = 131;
                return values;
            })();
    
            contact.Contact = (function() {
    
                /**
                 * Properties of a Contact.
                 * @memberof anymetrica.contact
                 * @interface IContact
                 * @property {string|null} [id] Contact id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] Contact metadata
                 * @property {anymetrica.contact.ContactType|null} [contact_type] Contact contact_type
                 * @property {string|null} [data] Contact data
                 * @property {string|null} [location] Contact location
                 * @property {string|null} [comment] Contact comment
                 * @property {boolean|null} [do_not_call] Contact do_not_call
                 */
    
                /**
                 * Constructs a new Contact.
                 * @memberof anymetrica.contact
                 * @classdesc Represents a Contact.
                 * @implements IContact
                 * @constructor
                 * @param {anymetrica.contact.IContact=} [properties] Properties to set
                 */
                function Contact(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Contact id.
                 * @member {string} id
                 * @memberof anymetrica.contact.Contact
                 * @instance
                 */
                Contact.prototype.id = "";
    
                /**
                 * Contact metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.contact.Contact
                 * @instance
                 */
                Contact.prototype.metadata = null;
    
                /**
                 * Contact contact_type.
                 * @member {anymetrica.contact.ContactType} contact_type
                 * @memberof anymetrica.contact.Contact
                 * @instance
                 */
                Contact.prototype.contact_type = 0;
    
                /**
                 * Contact data.
                 * @member {string} data
                 * @memberof anymetrica.contact.Contact
                 * @instance
                 */
                Contact.prototype.data = "";
    
                /**
                 * Contact location.
                 * @member {string} location
                 * @memberof anymetrica.contact.Contact
                 * @instance
                 */
                Contact.prototype.location = "";
    
                /**
                 * Contact comment.
                 * @member {string} comment
                 * @memberof anymetrica.contact.Contact
                 * @instance
                 */
                Contact.prototype.comment = "";
    
                /**
                 * Contact do_not_call.
                 * @member {boolean} do_not_call
                 * @memberof anymetrica.contact.Contact
                 * @instance
                 */
                Contact.prototype.do_not_call = false;
    
                /**
                 * Creates a new Contact instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.contact.Contact
                 * @static
                 * @param {anymetrica.contact.IContact=} [properties] Properties to set
                 * @returns {anymetrica.contact.Contact} Contact instance
                 */
                Contact.create = function create(properties) {
                    return new Contact(properties);
                };
    
                /**
                 * Encodes the specified Contact message. Does not implicitly {@link anymetrica.contact.Contact.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.contact.Contact
                 * @static
                 * @param {anymetrica.contact.IContact} message Contact message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Contact.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.contact_type != null && message.hasOwnProperty("contact_type"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.contact_type);
                    if (message.location != null && message.hasOwnProperty("location"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.location);
                    if (message.comment != null && message.hasOwnProperty("comment"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.comment);
                    if (message.do_not_call != null && message.hasOwnProperty("do_not_call"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.do_not_call);
                    if (message.data != null && message.hasOwnProperty("data"))
                        writer.uint32(/* id 64, wireType 2 =*/514).string(message.data);
                    return writer;
                };
    
                /**
                 * Encodes the specified Contact message, length delimited. Does not implicitly {@link anymetrica.contact.Contact.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.contact.Contact
                 * @static
                 * @param {anymetrica.contact.IContact} message Contact message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Contact.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Contact message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.contact.Contact
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.contact.Contact} Contact
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Contact.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.contact.Contact();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.contact_type = reader.int32();
                            break;
                        case 64:
                            message.data = reader.string();
                            break;
                        case 11:
                            message.location = reader.string();
                            break;
                        case 12:
                            message.comment = reader.string();
                            break;
                        case 17:
                            message.do_not_call = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Contact message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.contact.Contact
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.contact.Contact} Contact
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Contact.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Contact message.
                 * @function verify
                 * @memberof anymetrica.contact.Contact
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Contact.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.contact_type != null && message.hasOwnProperty("contact_type"))
                        switch (message.contact_type) {
                        default:
                            return "contact_type: enum value expected";
                        case 0:
                        case 1:
                        case 16:
                        case 17:
                        case 18:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 128:
                        case 129:
                        case 130:
                        case 131:
                            break;
                        }
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!$util.isString(message.data))
                            return "data: string expected";
                    if (message.location != null && message.hasOwnProperty("location"))
                        if (!$util.isString(message.location))
                            return "location: string expected";
                    if (message.comment != null && message.hasOwnProperty("comment"))
                        if (!$util.isString(message.comment))
                            return "comment: string expected";
                    if (message.do_not_call != null && message.hasOwnProperty("do_not_call"))
                        if (typeof message.do_not_call !== "boolean")
                            return "do_not_call: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Contact message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.contact.Contact
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.contact.Contact} Contact
                 */
                Contact.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.contact.Contact)
                        return object;
                    var message = new $root.anymetrica.contact.Contact();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.contact.Contact.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    switch (object.contact_type) {
                    case "CONTACT_UNSPECIFIED":
                    case 0:
                        message.contact_type = 0;
                        break;
                    case "CONTACT_OTHER":
                    case 1:
                        message.contact_type = 1;
                        break;
                    case "CONTACT_PHONE":
                    case 16:
                        message.contact_type = 16;
                        break;
                    case "CONTACT_EMAIL":
                    case 17:
                        message.contact_type = 17;
                        break;
                    case "CONTACT_FAX":
                    case 18:
                        message.contact_type = 18;
                        break;
                    case "CONTACT_JABBER":
                    case 32:
                        message.contact_type = 32;
                        break;
                    case "CONTACT_DISCORD":
                    case 33:
                        message.contact_type = 33;
                        break;
                    case "CONTACT_SKYPE":
                    case 34:
                        message.contact_type = 34;
                        break;
                    case "CONTACT_MSN":
                    case 35:
                        message.contact_type = 35;
                        break;
                    case "CONTACT_ICQ":
                    case 36:
                        message.contact_type = 36;
                        break;
                    case "CONTACT_FACEBOOK_ID":
                    case 128:
                        message.contact_type = 128;
                        break;
                    case "CONTACT_BADOO_LOGIN":
                    case 129:
                        message.contact_type = 129;
                        break;
                    case "CONTACT_BAIDU_ID":
                    case 130:
                        message.contact_type = 130;
                        break;
                    case "CONTACT_VKONTAKTE_ID":
                    case 131:
                        message.contact_type = 131;
                        break;
                    }
                    if (object.data != null)
                        message.data = String(object.data);
                    if (object.location != null)
                        message.location = String(object.location);
                    if (object.comment != null)
                        message.comment = String(object.comment);
                    if (object.do_not_call != null)
                        message.do_not_call = Boolean(object.do_not_call);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Contact message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.contact.Contact
                 * @static
                 * @param {anymetrica.contact.Contact} message Contact
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Contact.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.contact_type = options.enums === String ? "CONTACT_UNSPECIFIED" : 0;
                        object.location = "";
                        object.comment = "";
                        object.do_not_call = false;
                        object.data = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.contact_type != null && message.hasOwnProperty("contact_type"))
                        object.contact_type = options.enums === String ? $root.anymetrica.contact.ContactType[message.contact_type] : message.contact_type;
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = message.location;
                    if (message.comment != null && message.hasOwnProperty("comment"))
                        object.comment = message.comment;
                    if (message.do_not_call != null && message.hasOwnProperty("do_not_call"))
                        object.do_not_call = message.do_not_call;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = message.data;
                    return object;
                };
    
                /**
                 * Converts this Contact to JSON.
                 * @function toJSON
                 * @memberof anymetrica.contact.Contact
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Contact.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Contact;
            })();
    
            contact.Contacts = (function() {
    
                /**
                 * Properties of a Contacts.
                 * @memberof anymetrica.contact
                 * @interface IContacts
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Contacts request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Contacts response
                 * @property {Array.<anymetrica.contact.IContact>|null} [entities] Contacts entities
                 */
    
                /**
                 * Constructs a new Contacts.
                 * @memberof anymetrica.contact
                 * @classdesc Represents a Contacts.
                 * @implements IContacts
                 * @constructor
                 * @param {anymetrica.contact.IContacts=} [properties] Properties to set
                 */
                function Contacts(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Contacts request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.contact.Contacts
                 * @instance
                 */
                Contacts.prototype.request = null;
    
                /**
                 * Contacts response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.contact.Contacts
                 * @instance
                 */
                Contacts.prototype.response = null;
    
                /**
                 * Contacts entities.
                 * @member {Array.<anymetrica.contact.IContact>} entities
                 * @memberof anymetrica.contact.Contacts
                 * @instance
                 */
                Contacts.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Contacts instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.contact.Contacts
                 * @static
                 * @param {anymetrica.contact.IContacts=} [properties] Properties to set
                 * @returns {anymetrica.contact.Contacts} Contacts instance
                 */
                Contacts.create = function create(properties) {
                    return new Contacts(properties);
                };
    
                /**
                 * Encodes the specified Contacts message. Does not implicitly {@link anymetrica.contact.Contacts.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.contact.Contacts
                 * @static
                 * @param {anymetrica.contact.IContacts} message Contacts message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Contacts.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.contact.Contact.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Contacts message, length delimited. Does not implicitly {@link anymetrica.contact.Contacts.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.contact.Contacts
                 * @static
                 * @param {anymetrica.contact.IContacts} message Contacts message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Contacts.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Contacts message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.contact.Contacts
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.contact.Contacts} Contacts
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Contacts.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.contact.Contacts();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.contact.Contact.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Contacts message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.contact.Contacts
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.contact.Contacts} Contacts
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Contacts.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Contacts message.
                 * @function verify
                 * @memberof anymetrica.contact.Contacts
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Contacts.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.contact.Contact.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Contacts message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.contact.Contacts
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.contact.Contacts} Contacts
                 */
                Contacts.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.contact.Contacts)
                        return object;
                    var message = new $root.anymetrica.contact.Contacts();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.contact.Contacts.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.contact.Contacts.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.contact.Contacts.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.contact.Contacts.entities: object expected");
                            message.entities[i] = $root.anymetrica.contact.Contact.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Contacts message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.contact.Contacts
                 * @static
                 * @param {anymetrica.contact.Contacts} message Contacts
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Contacts.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.contact.Contact.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Contacts to JSON.
                 * @function toJSON
                 * @memberof anymetrica.contact.Contacts
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Contacts.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Contacts;
            })();
    
            return contact;
        })();
    
        anymetrica.organization = (function() {
    
            /**
             * Namespace organization.
             * @memberof anymetrica
             * @namespace
             */
            var organization = {};
    
            organization.Organization = (function() {
    
                /**
                 * Properties of an Organization.
                 * @memberof anymetrica.organization
                 * @interface IOrganization
                 * @property {string|null} [id] Organization id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] Organization metadata
                 * @property {string|null} [name] Organization name
                 * @property {string|null} [domain] Organization domain
                 */
    
                /**
                 * Constructs a new Organization.
                 * @memberof anymetrica.organization
                 * @classdesc Represents an Organization.
                 * @implements IOrganization
                 * @constructor
                 * @param {anymetrica.organization.IOrganization=} [properties] Properties to set
                 */
                function Organization(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Organization id.
                 * @member {string} id
                 * @memberof anymetrica.organization.Organization
                 * @instance
                 */
                Organization.prototype.id = "";
    
                /**
                 * Organization metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.organization.Organization
                 * @instance
                 */
                Organization.prototype.metadata = null;
    
                /**
                 * Organization name.
                 * @member {string} name
                 * @memberof anymetrica.organization.Organization
                 * @instance
                 */
                Organization.prototype.name = "";
    
                /**
                 * Organization domain.
                 * @member {string} domain
                 * @memberof anymetrica.organization.Organization
                 * @instance
                 */
                Organization.prototype.domain = "";
    
                /**
                 * Creates a new Organization instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.organization.Organization
                 * @static
                 * @param {anymetrica.organization.IOrganization=} [properties] Properties to set
                 * @returns {anymetrica.organization.Organization} Organization instance
                 */
                Organization.create = function create(properties) {
                    return new Organization(properties);
                };
    
                /**
                 * Encodes the specified Organization message. Does not implicitly {@link anymetrica.organization.Organization.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.organization.Organization
                 * @static
                 * @param {anymetrica.organization.IOrganization} message Organization message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Organization.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);
                    if (message.domain != null && message.hasOwnProperty("domain"))
                        writer.uint32(/* id 16, wireType 2 =*/130).string(message.domain);
                    return writer;
                };
    
                /**
                 * Encodes the specified Organization message, length delimited. Does not implicitly {@link anymetrica.organization.Organization.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.organization.Organization
                 * @static
                 * @param {anymetrica.organization.IOrganization} message Organization message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Organization.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Organization message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.organization.Organization
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.organization.Organization} Organization
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Organization.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.organization.Organization();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.name = reader.string();
                            break;
                        case 16:
                            message.domain = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Organization message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.organization.Organization
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.organization.Organization} Organization
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Organization.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Organization message.
                 * @function verify
                 * @memberof anymetrica.organization.Organization
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Organization.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.domain != null && message.hasOwnProperty("domain"))
                        if (!$util.isString(message.domain))
                            return "domain: string expected";
                    return null;
                };
    
                /**
                 * Creates an Organization message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.organization.Organization
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.organization.Organization} Organization
                 */
                Organization.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.organization.Organization)
                        return object;
                    var message = new $root.anymetrica.organization.Organization();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.organization.Organization.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.domain != null)
                        message.domain = String(object.domain);
                    return message;
                };
    
                /**
                 * Creates a plain object from an Organization message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.organization.Organization
                 * @static
                 * @param {anymetrica.organization.Organization} message Organization
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Organization.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.name = "";
                        object.domain = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.domain != null && message.hasOwnProperty("domain"))
                        object.domain = message.domain;
                    return object;
                };
    
                /**
                 * Converts this Organization to JSON.
                 * @function toJSON
                 * @memberof anymetrica.organization.Organization
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Organization.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Organization;
            })();
    
            organization.Organizations = (function() {
    
                /**
                 * Properties of an Organizations.
                 * @memberof anymetrica.organization
                 * @interface IOrganizations
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Organizations request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Organizations response
                 * @property {Array.<anymetrica.organization.IOrganization>|null} [entities] Organizations entities
                 */
    
                /**
                 * Constructs a new Organizations.
                 * @memberof anymetrica.organization
                 * @classdesc Represents an Organizations.
                 * @implements IOrganizations
                 * @constructor
                 * @param {anymetrica.organization.IOrganizations=} [properties] Properties to set
                 */
                function Organizations(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Organizations request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.organization.Organizations
                 * @instance
                 */
                Organizations.prototype.request = null;
    
                /**
                 * Organizations response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.organization.Organizations
                 * @instance
                 */
                Organizations.prototype.response = null;
    
                /**
                 * Organizations entities.
                 * @member {Array.<anymetrica.organization.IOrganization>} entities
                 * @memberof anymetrica.organization.Organizations
                 * @instance
                 */
                Organizations.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Organizations instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.organization.Organizations
                 * @static
                 * @param {anymetrica.organization.IOrganizations=} [properties] Properties to set
                 * @returns {anymetrica.organization.Organizations} Organizations instance
                 */
                Organizations.create = function create(properties) {
                    return new Organizations(properties);
                };
    
                /**
                 * Encodes the specified Organizations message. Does not implicitly {@link anymetrica.organization.Organizations.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.organization.Organizations
                 * @static
                 * @param {anymetrica.organization.IOrganizations} message Organizations message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Organizations.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.organization.Organization.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Organizations message, length delimited. Does not implicitly {@link anymetrica.organization.Organizations.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.organization.Organizations
                 * @static
                 * @param {anymetrica.organization.IOrganizations} message Organizations message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Organizations.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Organizations message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.organization.Organizations
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.organization.Organizations} Organizations
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Organizations.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.organization.Organizations();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.organization.Organization.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Organizations message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.organization.Organizations
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.organization.Organizations} Organizations
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Organizations.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Organizations message.
                 * @function verify
                 * @memberof anymetrica.organization.Organizations
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Organizations.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.organization.Organization.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Organizations message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.organization.Organizations
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.organization.Organizations} Organizations
                 */
                Organizations.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.organization.Organizations)
                        return object;
                    var message = new $root.anymetrica.organization.Organizations();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.organization.Organizations.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.organization.Organizations.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.organization.Organizations.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.organization.Organizations.entities: object expected");
                            message.entities[i] = $root.anymetrica.organization.Organization.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Organizations message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.organization.Organizations
                 * @static
                 * @param {anymetrica.organization.Organizations} message Organizations
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Organizations.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.organization.Organization.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Organizations to JSON.
                 * @function toJSON
                 * @memberof anymetrica.organization.Organizations
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Organizations.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Organizations;
            })();
    
            return organization;
        })();
    
        anymetrica.device = (function() {
    
            /**
             * Namespace device.
             * @memberof anymetrica
             * @namespace
             */
            var device = {};
    
            /**
             * DeviceType enum.
             * @name anymetrica.device.DeviceType
             * @enum {string}
             * @property {number} UNSPECIFIED=0 UNSPECIFIED value
             * @property {number} OTHER=1 OTHER value
             * @property {number} POLYMORPHIC=2 POLYMORPHIC value
             * @property {number} PHONE=4 PHONE value
             * @property {number} TABLET=8 TABLET value
             * @property {number} DESKTOP=12 DESKTOP value
             * @property {number} TAG=16 TAG value
             * @property {number} BADGE=18 BADGE value
             * @property {number} SMART_WATCH=24 SMART_WATCH value
             * @property {number} FITNESS_DEVICE=25 FITNESS_DEVICE value
             * @property {number} SOUND_RECORDER=32 SOUND_RECORDER value
             * @property {number} VIDEO_RECORDER=33 VIDEO_RECORDER value
             * @property {number} ROBOTIC=64 ROBOTIC value
             */
            device.DeviceType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNSPECIFIED"] = 0;
                values[valuesById[1] = "OTHER"] = 1;
                values[valuesById[2] = "POLYMORPHIC"] = 2;
                values[valuesById[4] = "PHONE"] = 4;
                values[valuesById[8] = "TABLET"] = 8;
                values[valuesById[12] = "DESKTOP"] = 12;
                values[valuesById[16] = "TAG"] = 16;
                values[valuesById[18] = "BADGE"] = 18;
                values[valuesById[24] = "SMART_WATCH"] = 24;
                values[valuesById[25] = "FITNESS_DEVICE"] = 25;
                values[valuesById[32] = "SOUND_RECORDER"] = 32;
                values[valuesById[33] = "VIDEO_RECORDER"] = 33;
                values[valuesById[64] = "ROBOTIC"] = 64;
                return values;
            })();
    
            device.Device = (function() {
    
                /**
                 * Properties of a Device.
                 * @memberof anymetrica.device
                 * @interface IDevice
                 * @property {string|null} [id] Device id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] Device metadata
                 * @property {anymetrica.device.DeviceType|null} [device_type] Device device_type
                 * @property {boolean|null} [for_testing] Device for_testing
                 * @property {boolean|null} [is_portable] Device is_portable
                 * @property {boolean|null} [is_wearable] Device is_wearable
                 * @property {Object.<string,string>|null} [config] Device config
                 * @property {Array.<string>|null} [supported_audio_codecs] Device supported_audio_codecs
                 * @property {Array.<string>|null} [supported_video_codecs] Device supported_video_codecs
                 * @property {boolean|null} [support_audio_recording] Device support_audio_recording
                 * @property {boolean|null} [support_video_recording] Device support_video_recording
                 * @property {Array.<string>|null} [mac_addresses] Device mac_addresses
                 * @property {Array.<string>|null} [ipv4_addresses] Device ipv4_addresses
                 * @property {Array.<string>|null} [ipv6_addresses] Device ipv6_addresses
                 * @property {Array.<string>|null} [fqdns] Device fqdns
                 * @property {string|null} [manufacturer] Device manufacturer
                 * @property {string|null} [model] Device model
                 * @property {string|null} [sub_model] Device sub_model
                 * @property {string|null} [revision] Device revision
                 * @property {string|null} [manufacturer_site_uri] Device manufacturer_site_uri
                 * @property {string|null} [amazon_uri] Device amazon_uri
                 * @property {string|null} [aliexpress_uri] Device aliexpress_uri
                 * @property {string|null} [alibaba_uri] Device alibaba_uri
                 * @property {string|null} [ebay_uri] Device ebay_uri
                 * @property {string|null} [yandex_market_uri] Device yandex_market_uri
                 * @property {string|null} [bios_id] Device bios_id
                 * @property {string|null} [motherboard_serial_number] Device motherboard_serial_number
                 * @property {number|null} [audio_channels_count] Device audio_channels_count
                 * @property {number|null} [audio_inputs_count] Device audio_inputs_count
                 * @property {number|null} [video_channels_count] Device video_channels_count
                 * @property {number|null} [video_inputs_count] Device video_inputs_count
                 * @property {string|null} [udid] Device udid
                 * @property {string|null} [idfv] Device idfv
                 * @property {string|null} [imei] Device imei
                 * @property {string|null} [aid] Device aid
                 * @property {string|null} [idfa] Device idfa
                 * @property {string|null} [waid] Device waid
                 * @property {string|null} [aaid] Device aaid
                 */
    
                /**
                 * Constructs a new Device.
                 * @memberof anymetrica.device
                 * @classdesc Represents a Device.
                 * @implements IDevice
                 * @constructor
                 * @param {anymetrica.device.IDevice=} [properties] Properties to set
                 */
                function Device(properties) {
                    this.config = {};
                    this.supported_audio_codecs = [];
                    this.supported_video_codecs = [];
                    this.mac_addresses = [];
                    this.ipv4_addresses = [];
                    this.ipv6_addresses = [];
                    this.fqdns = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Device id.
                 * @member {string} id
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.id = "";
    
                /**
                 * Device metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.metadata = null;
    
                /**
                 * Device device_type.
                 * @member {anymetrica.device.DeviceType} device_type
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.device_type = 0;
    
                /**
                 * Device for_testing.
                 * @member {boolean} for_testing
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.for_testing = false;
    
                /**
                 * Device is_portable.
                 * @member {boolean} is_portable
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.is_portable = false;
    
                /**
                 * Device is_wearable.
                 * @member {boolean} is_wearable
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.is_wearable = false;
    
                /**
                 * Device config.
                 * @member {Object.<string,string>} config
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.config = $util.emptyObject;
    
                /**
                 * Device supported_audio_codecs.
                 * @member {Array.<string>} supported_audio_codecs
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.supported_audio_codecs = $util.emptyArray;
    
                /**
                 * Device supported_video_codecs.
                 * @member {Array.<string>} supported_video_codecs
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.supported_video_codecs = $util.emptyArray;
    
                /**
                 * Device support_audio_recording.
                 * @member {boolean} support_audio_recording
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.support_audio_recording = false;
    
                /**
                 * Device support_video_recording.
                 * @member {boolean} support_video_recording
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.support_video_recording = false;
    
                /**
                 * Device mac_addresses.
                 * @member {Array.<string>} mac_addresses
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.mac_addresses = $util.emptyArray;
    
                /**
                 * Device ipv4_addresses.
                 * @member {Array.<string>} ipv4_addresses
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.ipv4_addresses = $util.emptyArray;
    
                /**
                 * Device ipv6_addresses.
                 * @member {Array.<string>} ipv6_addresses
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.ipv6_addresses = $util.emptyArray;
    
                /**
                 * Device fqdns.
                 * @member {Array.<string>} fqdns
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.fqdns = $util.emptyArray;
    
                /**
                 * Device manufacturer.
                 * @member {string} manufacturer
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.manufacturer = "";
    
                /**
                 * Device model.
                 * @member {string} model
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.model = "";
    
                /**
                 * Device sub_model.
                 * @member {string} sub_model
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.sub_model = "";
    
                /**
                 * Device revision.
                 * @member {string} revision
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.revision = "";
    
                /**
                 * Device manufacturer_site_uri.
                 * @member {string} manufacturer_site_uri
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.manufacturer_site_uri = "";
    
                /**
                 * Device amazon_uri.
                 * @member {string} amazon_uri
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.amazon_uri = "";
    
                /**
                 * Device aliexpress_uri.
                 * @member {string} aliexpress_uri
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.aliexpress_uri = "";
    
                /**
                 * Device alibaba_uri.
                 * @member {string} alibaba_uri
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.alibaba_uri = "";
    
                /**
                 * Device ebay_uri.
                 * @member {string} ebay_uri
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.ebay_uri = "";
    
                /**
                 * Device yandex_market_uri.
                 * @member {string} yandex_market_uri
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.yandex_market_uri = "";
    
                /**
                 * Device bios_id.
                 * @member {string} bios_id
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.bios_id = "";
    
                /**
                 * Device motherboard_serial_number.
                 * @member {string} motherboard_serial_number
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.motherboard_serial_number = "";
    
                /**
                 * Device audio_channels_count.
                 * @member {number} audio_channels_count
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.audio_channels_count = 0;
    
                /**
                 * Device audio_inputs_count.
                 * @member {number} audio_inputs_count
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.audio_inputs_count = 0;
    
                /**
                 * Device video_channels_count.
                 * @member {number} video_channels_count
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.video_channels_count = 0;
    
                /**
                 * Device video_inputs_count.
                 * @member {number} video_inputs_count
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.video_inputs_count = 0;
    
                /**
                 * Device udid.
                 * @member {string} udid
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.udid = "";
    
                /**
                 * Device idfv.
                 * @member {string} idfv
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.idfv = "";
    
                /**
                 * Device imei.
                 * @member {string} imei
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.imei = "";
    
                /**
                 * Device aid.
                 * @member {string} aid
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.aid = "";
    
                /**
                 * Device idfa.
                 * @member {string} idfa
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.idfa = "";
    
                /**
                 * Device waid.
                 * @member {string} waid
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.waid = "";
    
                /**
                 * Device aaid.
                 * @member {string} aaid
                 * @memberof anymetrica.device.Device
                 * @instance
                 */
                Device.prototype.aaid = "";
    
                /**
                 * Creates a new Device instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.device.Device
                 * @static
                 * @param {anymetrica.device.IDevice=} [properties] Properties to set
                 * @returns {anymetrica.device.Device} Device instance
                 */
                Device.create = function create(properties) {
                    return new Device(properties);
                };
    
                /**
                 * Encodes the specified Device message. Does not implicitly {@link anymetrica.device.Device.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.device.Device
                 * @static
                 * @param {anymetrica.device.IDevice} message Device message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Device.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.device_type != null && message.hasOwnProperty("device_type"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.device_type);
                    if (message.for_testing != null && message.hasOwnProperty("for_testing"))
                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.for_testing);
                    if (message.is_portable != null && message.hasOwnProperty("is_portable"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.is_portable);
                    if (message.is_wearable != null && message.hasOwnProperty("is_wearable"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.is_wearable);
                    if (message.config != null && message.hasOwnProperty("config"))
                        for (var keys = Object.keys(message.config), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 24, wireType 2 =*/194).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.config[keys[i]]).ldelim();
                    if (message.supported_audio_codecs != null && message.supported_audio_codecs.length)
                        for (var i = 0; i < message.supported_audio_codecs.length; ++i)
                            writer.uint32(/* id 32, wireType 2 =*/258).string(message.supported_audio_codecs[i]);
                    if (message.supported_video_codecs != null && message.supported_video_codecs.length)
                        for (var i = 0; i < message.supported_video_codecs.length; ++i)
                            writer.uint32(/* id 33, wireType 2 =*/266).string(message.supported_video_codecs[i]);
                    if (message.support_audio_recording != null && message.hasOwnProperty("support_audio_recording"))
                        writer.uint32(/* id 40, wireType 0 =*/320).bool(message.support_audio_recording);
                    if (message.support_video_recording != null && message.hasOwnProperty("support_video_recording"))
                        writer.uint32(/* id 41, wireType 0 =*/328).bool(message.support_video_recording);
                    if (message.mac_addresses != null && message.mac_addresses.length)
                        for (var i = 0; i < message.mac_addresses.length; ++i)
                            writer.uint32(/* id 64, wireType 2 =*/514).string(message.mac_addresses[i]);
                    if (message.ipv4_addresses != null && message.ipv4_addresses.length)
                        for (var i = 0; i < message.ipv4_addresses.length; ++i)
                            writer.uint32(/* id 65, wireType 2 =*/522).string(message.ipv4_addresses[i]);
                    if (message.ipv6_addresses != null && message.ipv6_addresses.length)
                        for (var i = 0; i < message.ipv6_addresses.length; ++i)
                            writer.uint32(/* id 66, wireType 2 =*/530).string(message.ipv6_addresses[i]);
                    if (message.fqdns != null && message.fqdns.length)
                        for (var i = 0; i < message.fqdns.length; ++i)
                            writer.uint32(/* id 67, wireType 2 =*/538).string(message.fqdns[i]);
                    if (message.manufacturer != null && message.hasOwnProperty("manufacturer"))
                        writer.uint32(/* id 128, wireType 2 =*/1026).string(message.manufacturer);
                    if (message.model != null && message.hasOwnProperty("model"))
                        writer.uint32(/* id 129, wireType 2 =*/1034).string(message.model);
                    if (message.sub_model != null && message.hasOwnProperty("sub_model"))
                        writer.uint32(/* id 130, wireType 2 =*/1042).string(message.sub_model);
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        writer.uint32(/* id 131, wireType 2 =*/1050).string(message.revision);
                    if (message.manufacturer_site_uri != null && message.hasOwnProperty("manufacturer_site_uri"))
                        writer.uint32(/* id 140, wireType 2 =*/1122).string(message.manufacturer_site_uri);
                    if (message.amazon_uri != null && message.hasOwnProperty("amazon_uri"))
                        writer.uint32(/* id 141, wireType 2 =*/1130).string(message.amazon_uri);
                    if (message.aliexpress_uri != null && message.hasOwnProperty("aliexpress_uri"))
                        writer.uint32(/* id 142, wireType 2 =*/1138).string(message.aliexpress_uri);
                    if (message.alibaba_uri != null && message.hasOwnProperty("alibaba_uri"))
                        writer.uint32(/* id 143, wireType 2 =*/1146).string(message.alibaba_uri);
                    if (message.ebay_uri != null && message.hasOwnProperty("ebay_uri"))
                        writer.uint32(/* id 144, wireType 2 =*/1154).string(message.ebay_uri);
                    if (message.yandex_market_uri != null && message.hasOwnProperty("yandex_market_uri"))
                        writer.uint32(/* id 145, wireType 2 =*/1162).string(message.yandex_market_uri);
                    if (message.bios_id != null && message.hasOwnProperty("bios_id"))
                        writer.uint32(/* id 160, wireType 2 =*/1282).string(message.bios_id);
                    if (message.motherboard_serial_number != null && message.hasOwnProperty("motherboard_serial_number"))
                        writer.uint32(/* id 161, wireType 2 =*/1290).string(message.motherboard_serial_number);
                    if (message.audio_channels_count != null && message.hasOwnProperty("audio_channels_count"))
                        writer.uint32(/* id 200, wireType 0 =*/1600).uint32(message.audio_channels_count);
                    if (message.audio_inputs_count != null && message.hasOwnProperty("audio_inputs_count"))
                        writer.uint32(/* id 201, wireType 0 =*/1608).uint32(message.audio_inputs_count);
                    if (message.video_channels_count != null && message.hasOwnProperty("video_channels_count"))
                        writer.uint32(/* id 220, wireType 0 =*/1760).uint32(message.video_channels_count);
                    if (message.video_inputs_count != null && message.hasOwnProperty("video_inputs_count"))
                        writer.uint32(/* id 221, wireType 0 =*/1768).uint32(message.video_inputs_count);
                    if (message.udid != null && message.hasOwnProperty("udid"))
                        writer.uint32(/* id 256, wireType 2 =*/2050).string(message.udid);
                    if (message.idfv != null && message.hasOwnProperty("idfv"))
                        writer.uint32(/* id 257, wireType 2 =*/2058).string(message.idfv);
                    if (message.imei != null && message.hasOwnProperty("imei"))
                        writer.uint32(/* id 258, wireType 2 =*/2066).string(message.imei);
                    if (message.aid != null && message.hasOwnProperty("aid"))
                        writer.uint32(/* id 287, wireType 2 =*/2298).string(message.aid);
                    if (message.idfa != null && message.hasOwnProperty("idfa"))
                        writer.uint32(/* id 288, wireType 2 =*/2306).string(message.idfa);
                    if (message.waid != null && message.hasOwnProperty("waid"))
                        writer.uint32(/* id 289, wireType 2 =*/2314).string(message.waid);
                    if (message.aaid != null && message.hasOwnProperty("aaid"))
                        writer.uint32(/* id 290, wireType 2 =*/2322).string(message.aaid);
                    return writer;
                };
    
                /**
                 * Encodes the specified Device message, length delimited. Does not implicitly {@link anymetrica.device.Device.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.device.Device
                 * @static
                 * @param {anymetrica.device.IDevice} message Device message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Device.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Device message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.device.Device
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.device.Device} Device
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Device.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.device.Device(), key;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.device_type = reader.int32();
                            break;
                        case 9:
                            message.for_testing = reader.bool();
                            break;
                        case 16:
                            message.is_portable = reader.bool();
                            break;
                        case 17:
                            message.is_wearable = reader.bool();
                            break;
                        case 24:
                            reader.skip().pos++;
                            if (message.config === $util.emptyObject)
                                message.config = {};
                            key = reader.string();
                            reader.pos++;
                            message.config[key] = reader.string();
                            break;
                        case 32:
                            if (!(message.supported_audio_codecs && message.supported_audio_codecs.length))
                                message.supported_audio_codecs = [];
                            message.supported_audio_codecs.push(reader.string());
                            break;
                        case 33:
                            if (!(message.supported_video_codecs && message.supported_video_codecs.length))
                                message.supported_video_codecs = [];
                            message.supported_video_codecs.push(reader.string());
                            break;
                        case 40:
                            message.support_audio_recording = reader.bool();
                            break;
                        case 41:
                            message.support_video_recording = reader.bool();
                            break;
                        case 64:
                            if (!(message.mac_addresses && message.mac_addresses.length))
                                message.mac_addresses = [];
                            message.mac_addresses.push(reader.string());
                            break;
                        case 65:
                            if (!(message.ipv4_addresses && message.ipv4_addresses.length))
                                message.ipv4_addresses = [];
                            message.ipv4_addresses.push(reader.string());
                            break;
                        case 66:
                            if (!(message.ipv6_addresses && message.ipv6_addresses.length))
                                message.ipv6_addresses = [];
                            message.ipv6_addresses.push(reader.string());
                            break;
                        case 67:
                            if (!(message.fqdns && message.fqdns.length))
                                message.fqdns = [];
                            message.fqdns.push(reader.string());
                            break;
                        case 128:
                            message.manufacturer = reader.string();
                            break;
                        case 129:
                            message.model = reader.string();
                            break;
                        case 130:
                            message.sub_model = reader.string();
                            break;
                        case 131:
                            message.revision = reader.string();
                            break;
                        case 140:
                            message.manufacturer_site_uri = reader.string();
                            break;
                        case 141:
                            message.amazon_uri = reader.string();
                            break;
                        case 142:
                            message.aliexpress_uri = reader.string();
                            break;
                        case 143:
                            message.alibaba_uri = reader.string();
                            break;
                        case 144:
                            message.ebay_uri = reader.string();
                            break;
                        case 145:
                            message.yandex_market_uri = reader.string();
                            break;
                        case 160:
                            message.bios_id = reader.string();
                            break;
                        case 161:
                            message.motherboard_serial_number = reader.string();
                            break;
                        case 200:
                            message.audio_channels_count = reader.uint32();
                            break;
                        case 201:
                            message.audio_inputs_count = reader.uint32();
                            break;
                        case 220:
                            message.video_channels_count = reader.uint32();
                            break;
                        case 221:
                            message.video_inputs_count = reader.uint32();
                            break;
                        case 256:
                            message.udid = reader.string();
                            break;
                        case 257:
                            message.idfv = reader.string();
                            break;
                        case 258:
                            message.imei = reader.string();
                            break;
                        case 287:
                            message.aid = reader.string();
                            break;
                        case 288:
                            message.idfa = reader.string();
                            break;
                        case 289:
                            message.waid = reader.string();
                            break;
                        case 290:
                            message.aaid = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Device message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.device.Device
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.device.Device} Device
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Device.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Device message.
                 * @function verify
                 * @memberof anymetrica.device.Device
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Device.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.device_type != null && message.hasOwnProperty("device_type"))
                        switch (message.device_type) {
                        default:
                            return "device_type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 4:
                        case 8:
                        case 12:
                        case 16:
                        case 18:
                        case 24:
                        case 25:
                        case 32:
                        case 33:
                        case 64:
                            break;
                        }
                    if (message.for_testing != null && message.hasOwnProperty("for_testing"))
                        if (typeof message.for_testing !== "boolean")
                            return "for_testing: boolean expected";
                    if (message.is_portable != null && message.hasOwnProperty("is_portable"))
                        if (typeof message.is_portable !== "boolean")
                            return "is_portable: boolean expected";
                    if (message.is_wearable != null && message.hasOwnProperty("is_wearable"))
                        if (typeof message.is_wearable !== "boolean")
                            return "is_wearable: boolean expected";
                    if (message.config != null && message.hasOwnProperty("config")) {
                        if (!$util.isObject(message.config))
                            return "config: object expected";
                        var key = Object.keys(message.config);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.config[key[i]]))
                                return "config: string{k:string} expected";
                    }
                    if (message.supported_audio_codecs != null && message.hasOwnProperty("supported_audio_codecs")) {
                        if (!Array.isArray(message.supported_audio_codecs))
                            return "supported_audio_codecs: array expected";
                        for (var i = 0; i < message.supported_audio_codecs.length; ++i)
                            if (!$util.isString(message.supported_audio_codecs[i]))
                                return "supported_audio_codecs: string[] expected";
                    }
                    if (message.supported_video_codecs != null && message.hasOwnProperty("supported_video_codecs")) {
                        if (!Array.isArray(message.supported_video_codecs))
                            return "supported_video_codecs: array expected";
                        for (var i = 0; i < message.supported_video_codecs.length; ++i)
                            if (!$util.isString(message.supported_video_codecs[i]))
                                return "supported_video_codecs: string[] expected";
                    }
                    if (message.support_audio_recording != null && message.hasOwnProperty("support_audio_recording"))
                        if (typeof message.support_audio_recording !== "boolean")
                            return "support_audio_recording: boolean expected";
                    if (message.support_video_recording != null && message.hasOwnProperty("support_video_recording"))
                        if (typeof message.support_video_recording !== "boolean")
                            return "support_video_recording: boolean expected";
                    if (message.mac_addresses != null && message.hasOwnProperty("mac_addresses")) {
                        if (!Array.isArray(message.mac_addresses))
                            return "mac_addresses: array expected";
                        for (var i = 0; i < message.mac_addresses.length; ++i)
                            if (!$util.isString(message.mac_addresses[i]))
                                return "mac_addresses: string[] expected";
                    }
                    if (message.ipv4_addresses != null && message.hasOwnProperty("ipv4_addresses")) {
                        if (!Array.isArray(message.ipv4_addresses))
                            return "ipv4_addresses: array expected";
                        for (var i = 0; i < message.ipv4_addresses.length; ++i)
                            if (!$util.isString(message.ipv4_addresses[i]))
                                return "ipv4_addresses: string[] expected";
                    }
                    if (message.ipv6_addresses != null && message.hasOwnProperty("ipv6_addresses")) {
                        if (!Array.isArray(message.ipv6_addresses))
                            return "ipv6_addresses: array expected";
                        for (var i = 0; i < message.ipv6_addresses.length; ++i)
                            if (!$util.isString(message.ipv6_addresses[i]))
                                return "ipv6_addresses: string[] expected";
                    }
                    if (message.fqdns != null && message.hasOwnProperty("fqdns")) {
                        if (!Array.isArray(message.fqdns))
                            return "fqdns: array expected";
                        for (var i = 0; i < message.fqdns.length; ++i)
                            if (!$util.isString(message.fqdns[i]))
                                return "fqdns: string[] expected";
                    }
                    if (message.manufacturer != null && message.hasOwnProperty("manufacturer"))
                        if (!$util.isString(message.manufacturer))
                            return "manufacturer: string expected";
                    if (message.model != null && message.hasOwnProperty("model"))
                        if (!$util.isString(message.model))
                            return "model: string expected";
                    if (message.sub_model != null && message.hasOwnProperty("sub_model"))
                        if (!$util.isString(message.sub_model))
                            return "sub_model: string expected";
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        if (!$util.isString(message.revision))
                            return "revision: string expected";
                    if (message.manufacturer_site_uri != null && message.hasOwnProperty("manufacturer_site_uri"))
                        if (!$util.isString(message.manufacturer_site_uri))
                            return "manufacturer_site_uri: string expected";
                    if (message.amazon_uri != null && message.hasOwnProperty("amazon_uri"))
                        if (!$util.isString(message.amazon_uri))
                            return "amazon_uri: string expected";
                    if (message.aliexpress_uri != null && message.hasOwnProperty("aliexpress_uri"))
                        if (!$util.isString(message.aliexpress_uri))
                            return "aliexpress_uri: string expected";
                    if (message.alibaba_uri != null && message.hasOwnProperty("alibaba_uri"))
                        if (!$util.isString(message.alibaba_uri))
                            return "alibaba_uri: string expected";
                    if (message.ebay_uri != null && message.hasOwnProperty("ebay_uri"))
                        if (!$util.isString(message.ebay_uri))
                            return "ebay_uri: string expected";
                    if (message.yandex_market_uri != null && message.hasOwnProperty("yandex_market_uri"))
                        if (!$util.isString(message.yandex_market_uri))
                            return "yandex_market_uri: string expected";
                    if (message.bios_id != null && message.hasOwnProperty("bios_id"))
                        if (!$util.isString(message.bios_id))
                            return "bios_id: string expected";
                    if (message.motherboard_serial_number != null && message.hasOwnProperty("motherboard_serial_number"))
                        if (!$util.isString(message.motherboard_serial_number))
                            return "motherboard_serial_number: string expected";
                    if (message.audio_channels_count != null && message.hasOwnProperty("audio_channels_count"))
                        if (!$util.isInteger(message.audio_channels_count))
                            return "audio_channels_count: integer expected";
                    if (message.audio_inputs_count != null && message.hasOwnProperty("audio_inputs_count"))
                        if (!$util.isInteger(message.audio_inputs_count))
                            return "audio_inputs_count: integer expected";
                    if (message.video_channels_count != null && message.hasOwnProperty("video_channels_count"))
                        if (!$util.isInteger(message.video_channels_count))
                            return "video_channels_count: integer expected";
                    if (message.video_inputs_count != null && message.hasOwnProperty("video_inputs_count"))
                        if (!$util.isInteger(message.video_inputs_count))
                            return "video_inputs_count: integer expected";
                    if (message.udid != null && message.hasOwnProperty("udid"))
                        if (!$util.isString(message.udid))
                            return "udid: string expected";
                    if (message.idfv != null && message.hasOwnProperty("idfv"))
                        if (!$util.isString(message.idfv))
                            return "idfv: string expected";
                    if (message.imei != null && message.hasOwnProperty("imei"))
                        if (!$util.isString(message.imei))
                            return "imei: string expected";
                    if (message.aid != null && message.hasOwnProperty("aid"))
                        if (!$util.isString(message.aid))
                            return "aid: string expected";
                    if (message.idfa != null && message.hasOwnProperty("idfa"))
                        if (!$util.isString(message.idfa))
                            return "idfa: string expected";
                    if (message.waid != null && message.hasOwnProperty("waid"))
                        if (!$util.isString(message.waid))
                            return "waid: string expected";
                    if (message.aaid != null && message.hasOwnProperty("aaid"))
                        if (!$util.isString(message.aaid))
                            return "aaid: string expected";
                    return null;
                };
    
                /**
                 * Creates a Device message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.device.Device
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.device.Device} Device
                 */
                Device.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.device.Device)
                        return object;
                    var message = new $root.anymetrica.device.Device();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.device.Device.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    switch (object.device_type) {
                    case "UNSPECIFIED":
                    case 0:
                        message.device_type = 0;
                        break;
                    case "OTHER":
                    case 1:
                        message.device_type = 1;
                        break;
                    case "POLYMORPHIC":
                    case 2:
                        message.device_type = 2;
                        break;
                    case "PHONE":
                    case 4:
                        message.device_type = 4;
                        break;
                    case "TABLET":
                    case 8:
                        message.device_type = 8;
                        break;
                    case "DESKTOP":
                    case 12:
                        message.device_type = 12;
                        break;
                    case "TAG":
                    case 16:
                        message.device_type = 16;
                        break;
                    case "BADGE":
                    case 18:
                        message.device_type = 18;
                        break;
                    case "SMART_WATCH":
                    case 24:
                        message.device_type = 24;
                        break;
                    case "FITNESS_DEVICE":
                    case 25:
                        message.device_type = 25;
                        break;
                    case "SOUND_RECORDER":
                    case 32:
                        message.device_type = 32;
                        break;
                    case "VIDEO_RECORDER":
                    case 33:
                        message.device_type = 33;
                        break;
                    case "ROBOTIC":
                    case 64:
                        message.device_type = 64;
                        break;
                    }
                    if (object.for_testing != null)
                        message.for_testing = Boolean(object.for_testing);
                    if (object.is_portable != null)
                        message.is_portable = Boolean(object.is_portable);
                    if (object.is_wearable != null)
                        message.is_wearable = Boolean(object.is_wearable);
                    if (object.config) {
                        if (typeof object.config !== "object")
                            throw TypeError(".anymetrica.device.Device.config: object expected");
                        message.config = {};
                        for (var keys = Object.keys(object.config), i = 0; i < keys.length; ++i)
                            message.config[keys[i]] = String(object.config[keys[i]]);
                    }
                    if (object.supported_audio_codecs) {
                        if (!Array.isArray(object.supported_audio_codecs))
                            throw TypeError(".anymetrica.device.Device.supported_audio_codecs: array expected");
                        message.supported_audio_codecs = [];
                        for (var i = 0; i < object.supported_audio_codecs.length; ++i)
                            message.supported_audio_codecs[i] = String(object.supported_audio_codecs[i]);
                    }
                    if (object.supported_video_codecs) {
                        if (!Array.isArray(object.supported_video_codecs))
                            throw TypeError(".anymetrica.device.Device.supported_video_codecs: array expected");
                        message.supported_video_codecs = [];
                        for (var i = 0; i < object.supported_video_codecs.length; ++i)
                            message.supported_video_codecs[i] = String(object.supported_video_codecs[i]);
                    }
                    if (object.support_audio_recording != null)
                        message.support_audio_recording = Boolean(object.support_audio_recording);
                    if (object.support_video_recording != null)
                        message.support_video_recording = Boolean(object.support_video_recording);
                    if (object.mac_addresses) {
                        if (!Array.isArray(object.mac_addresses))
                            throw TypeError(".anymetrica.device.Device.mac_addresses: array expected");
                        message.mac_addresses = [];
                        for (var i = 0; i < object.mac_addresses.length; ++i)
                            message.mac_addresses[i] = String(object.mac_addresses[i]);
                    }
                    if (object.ipv4_addresses) {
                        if (!Array.isArray(object.ipv4_addresses))
                            throw TypeError(".anymetrica.device.Device.ipv4_addresses: array expected");
                        message.ipv4_addresses = [];
                        for (var i = 0; i < object.ipv4_addresses.length; ++i)
                            message.ipv4_addresses[i] = String(object.ipv4_addresses[i]);
                    }
                    if (object.ipv6_addresses) {
                        if (!Array.isArray(object.ipv6_addresses))
                            throw TypeError(".anymetrica.device.Device.ipv6_addresses: array expected");
                        message.ipv6_addresses = [];
                        for (var i = 0; i < object.ipv6_addresses.length; ++i)
                            message.ipv6_addresses[i] = String(object.ipv6_addresses[i]);
                    }
                    if (object.fqdns) {
                        if (!Array.isArray(object.fqdns))
                            throw TypeError(".anymetrica.device.Device.fqdns: array expected");
                        message.fqdns = [];
                        for (var i = 0; i < object.fqdns.length; ++i)
                            message.fqdns[i] = String(object.fqdns[i]);
                    }
                    if (object.manufacturer != null)
                        message.manufacturer = String(object.manufacturer);
                    if (object.model != null)
                        message.model = String(object.model);
                    if (object.sub_model != null)
                        message.sub_model = String(object.sub_model);
                    if (object.revision != null)
                        message.revision = String(object.revision);
                    if (object.manufacturer_site_uri != null)
                        message.manufacturer_site_uri = String(object.manufacturer_site_uri);
                    if (object.amazon_uri != null)
                        message.amazon_uri = String(object.amazon_uri);
                    if (object.aliexpress_uri != null)
                        message.aliexpress_uri = String(object.aliexpress_uri);
                    if (object.alibaba_uri != null)
                        message.alibaba_uri = String(object.alibaba_uri);
                    if (object.ebay_uri != null)
                        message.ebay_uri = String(object.ebay_uri);
                    if (object.yandex_market_uri != null)
                        message.yandex_market_uri = String(object.yandex_market_uri);
                    if (object.bios_id != null)
                        message.bios_id = String(object.bios_id);
                    if (object.motherboard_serial_number != null)
                        message.motherboard_serial_number = String(object.motherboard_serial_number);
                    if (object.audio_channels_count != null)
                        message.audio_channels_count = object.audio_channels_count >>> 0;
                    if (object.audio_inputs_count != null)
                        message.audio_inputs_count = object.audio_inputs_count >>> 0;
                    if (object.video_channels_count != null)
                        message.video_channels_count = object.video_channels_count >>> 0;
                    if (object.video_inputs_count != null)
                        message.video_inputs_count = object.video_inputs_count >>> 0;
                    if (object.udid != null)
                        message.udid = String(object.udid);
                    if (object.idfv != null)
                        message.idfv = String(object.idfv);
                    if (object.imei != null)
                        message.imei = String(object.imei);
                    if (object.aid != null)
                        message.aid = String(object.aid);
                    if (object.idfa != null)
                        message.idfa = String(object.idfa);
                    if (object.waid != null)
                        message.waid = String(object.waid);
                    if (object.aaid != null)
                        message.aaid = String(object.aaid);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Device message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.device.Device
                 * @static
                 * @param {anymetrica.device.Device} message Device
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Device.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.supported_audio_codecs = [];
                        object.supported_video_codecs = [];
                        object.mac_addresses = [];
                        object.ipv4_addresses = [];
                        object.ipv6_addresses = [];
                        object.fqdns = [];
                    }
                    if (options.objects || options.defaults)
                        object.config = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.device_type = options.enums === String ? "UNSPECIFIED" : 0;
                        object.for_testing = false;
                        object.is_portable = false;
                        object.is_wearable = false;
                        object.support_audio_recording = false;
                        object.support_video_recording = false;
                        object.manufacturer = "";
                        object.model = "";
                        object.sub_model = "";
                        object.revision = "";
                        object.manufacturer_site_uri = "";
                        object.amazon_uri = "";
                        object.aliexpress_uri = "";
                        object.alibaba_uri = "";
                        object.ebay_uri = "";
                        object.yandex_market_uri = "";
                        object.bios_id = "";
                        object.motherboard_serial_number = "";
                        object.audio_channels_count = 0;
                        object.audio_inputs_count = 0;
                        object.video_channels_count = 0;
                        object.video_inputs_count = 0;
                        object.udid = "";
                        object.idfv = "";
                        object.imei = "";
                        object.aid = "";
                        object.idfa = "";
                        object.waid = "";
                        object.aaid = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.device_type != null && message.hasOwnProperty("device_type"))
                        object.device_type = options.enums === String ? $root.anymetrica.device.DeviceType[message.device_type] : message.device_type;
                    if (message.for_testing != null && message.hasOwnProperty("for_testing"))
                        object.for_testing = message.for_testing;
                    if (message.is_portable != null && message.hasOwnProperty("is_portable"))
                        object.is_portable = message.is_portable;
                    if (message.is_wearable != null && message.hasOwnProperty("is_wearable"))
                        object.is_wearable = message.is_wearable;
                    var keys2;
                    if (message.config && (keys2 = Object.keys(message.config)).length) {
                        object.config = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.config[keys2[j]] = message.config[keys2[j]];
                    }
                    if (message.supported_audio_codecs && message.supported_audio_codecs.length) {
                        object.supported_audio_codecs = [];
                        for (var j = 0; j < message.supported_audio_codecs.length; ++j)
                            object.supported_audio_codecs[j] = message.supported_audio_codecs[j];
                    }
                    if (message.supported_video_codecs && message.supported_video_codecs.length) {
                        object.supported_video_codecs = [];
                        for (var j = 0; j < message.supported_video_codecs.length; ++j)
                            object.supported_video_codecs[j] = message.supported_video_codecs[j];
                    }
                    if (message.support_audio_recording != null && message.hasOwnProperty("support_audio_recording"))
                        object.support_audio_recording = message.support_audio_recording;
                    if (message.support_video_recording != null && message.hasOwnProperty("support_video_recording"))
                        object.support_video_recording = message.support_video_recording;
                    if (message.mac_addresses && message.mac_addresses.length) {
                        object.mac_addresses = [];
                        for (var j = 0; j < message.mac_addresses.length; ++j)
                            object.mac_addresses[j] = message.mac_addresses[j];
                    }
                    if (message.ipv4_addresses && message.ipv4_addresses.length) {
                        object.ipv4_addresses = [];
                        for (var j = 0; j < message.ipv4_addresses.length; ++j)
                            object.ipv4_addresses[j] = message.ipv4_addresses[j];
                    }
                    if (message.ipv6_addresses && message.ipv6_addresses.length) {
                        object.ipv6_addresses = [];
                        for (var j = 0; j < message.ipv6_addresses.length; ++j)
                            object.ipv6_addresses[j] = message.ipv6_addresses[j];
                    }
                    if (message.fqdns && message.fqdns.length) {
                        object.fqdns = [];
                        for (var j = 0; j < message.fqdns.length; ++j)
                            object.fqdns[j] = message.fqdns[j];
                    }
                    if (message.manufacturer != null && message.hasOwnProperty("manufacturer"))
                        object.manufacturer = message.manufacturer;
                    if (message.model != null && message.hasOwnProperty("model"))
                        object.model = message.model;
                    if (message.sub_model != null && message.hasOwnProperty("sub_model"))
                        object.sub_model = message.sub_model;
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        object.revision = message.revision;
                    if (message.manufacturer_site_uri != null && message.hasOwnProperty("manufacturer_site_uri"))
                        object.manufacturer_site_uri = message.manufacturer_site_uri;
                    if (message.amazon_uri != null && message.hasOwnProperty("amazon_uri"))
                        object.amazon_uri = message.amazon_uri;
                    if (message.aliexpress_uri != null && message.hasOwnProperty("aliexpress_uri"))
                        object.aliexpress_uri = message.aliexpress_uri;
                    if (message.alibaba_uri != null && message.hasOwnProperty("alibaba_uri"))
                        object.alibaba_uri = message.alibaba_uri;
                    if (message.ebay_uri != null && message.hasOwnProperty("ebay_uri"))
                        object.ebay_uri = message.ebay_uri;
                    if (message.yandex_market_uri != null && message.hasOwnProperty("yandex_market_uri"))
                        object.yandex_market_uri = message.yandex_market_uri;
                    if (message.bios_id != null && message.hasOwnProperty("bios_id"))
                        object.bios_id = message.bios_id;
                    if (message.motherboard_serial_number != null && message.hasOwnProperty("motherboard_serial_number"))
                        object.motherboard_serial_number = message.motherboard_serial_number;
                    if (message.audio_channels_count != null && message.hasOwnProperty("audio_channels_count"))
                        object.audio_channels_count = message.audio_channels_count;
                    if (message.audio_inputs_count != null && message.hasOwnProperty("audio_inputs_count"))
                        object.audio_inputs_count = message.audio_inputs_count;
                    if (message.video_channels_count != null && message.hasOwnProperty("video_channels_count"))
                        object.video_channels_count = message.video_channels_count;
                    if (message.video_inputs_count != null && message.hasOwnProperty("video_inputs_count"))
                        object.video_inputs_count = message.video_inputs_count;
                    if (message.udid != null && message.hasOwnProperty("udid"))
                        object.udid = message.udid;
                    if (message.idfv != null && message.hasOwnProperty("idfv"))
                        object.idfv = message.idfv;
                    if (message.imei != null && message.hasOwnProperty("imei"))
                        object.imei = message.imei;
                    if (message.aid != null && message.hasOwnProperty("aid"))
                        object.aid = message.aid;
                    if (message.idfa != null && message.hasOwnProperty("idfa"))
                        object.idfa = message.idfa;
                    if (message.waid != null && message.hasOwnProperty("waid"))
                        object.waid = message.waid;
                    if (message.aaid != null && message.hasOwnProperty("aaid"))
                        object.aaid = message.aaid;
                    return object;
                };
    
                /**
                 * Converts this Device to JSON.
                 * @function toJSON
                 * @memberof anymetrica.device.Device
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Device.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Device;
            })();
    
            device.Devices = (function() {
    
                /**
                 * Properties of a Devices.
                 * @memberof anymetrica.device
                 * @interface IDevices
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Devices request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Devices response
                 * @property {Array.<anymetrica.device.IDevice>|null} [entities] Devices entities
                 */
    
                /**
                 * Constructs a new Devices.
                 * @memberof anymetrica.device
                 * @classdesc Represents a Devices.
                 * @implements IDevices
                 * @constructor
                 * @param {anymetrica.device.IDevices=} [properties] Properties to set
                 */
                function Devices(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Devices request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.device.Devices
                 * @instance
                 */
                Devices.prototype.request = null;
    
                /**
                 * Devices response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.device.Devices
                 * @instance
                 */
                Devices.prototype.response = null;
    
                /**
                 * Devices entities.
                 * @member {Array.<anymetrica.device.IDevice>} entities
                 * @memberof anymetrica.device.Devices
                 * @instance
                 */
                Devices.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Devices instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.device.Devices
                 * @static
                 * @param {anymetrica.device.IDevices=} [properties] Properties to set
                 * @returns {anymetrica.device.Devices} Devices instance
                 */
                Devices.create = function create(properties) {
                    return new Devices(properties);
                };
    
                /**
                 * Encodes the specified Devices message. Does not implicitly {@link anymetrica.device.Devices.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.device.Devices
                 * @static
                 * @param {anymetrica.device.IDevices} message Devices message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Devices.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.device.Device.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Devices message, length delimited. Does not implicitly {@link anymetrica.device.Devices.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.device.Devices
                 * @static
                 * @param {anymetrica.device.IDevices} message Devices message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Devices.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Devices message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.device.Devices
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.device.Devices} Devices
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Devices.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.device.Devices();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.device.Device.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Devices message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.device.Devices
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.device.Devices} Devices
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Devices.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Devices message.
                 * @function verify
                 * @memberof anymetrica.device.Devices
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Devices.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.device.Device.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Devices message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.device.Devices
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.device.Devices} Devices
                 */
                Devices.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.device.Devices)
                        return object;
                    var message = new $root.anymetrica.device.Devices();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.device.Devices.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.device.Devices.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.device.Devices.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.device.Devices.entities: object expected");
                            message.entities[i] = $root.anymetrica.device.Device.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Devices message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.device.Devices
                 * @static
                 * @param {anymetrica.device.Devices} message Devices
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Devices.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.device.Device.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Devices to JSON.
                 * @function toJSON
                 * @memberof anymetrica.device.Devices
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Devices.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Devices;
            })();
    
            return device;
        })();
    
        anymetrica.file = (function() {
    
            /**
             * Namespace file.
             * @memberof anymetrica
             * @namespace
             */
            var file = {};
    
            /**
             * HashType enum.
             * @name anymetrica.file.HashType
             * @enum {string}
             * @property {number} HASH_TYPE_UNSPECIFIED=0 HASH_TYPE_UNSPECIFIED value
             * @property {number} HASH_TYPE_PLAIN_TEXT=8 HASH_TYPE_PLAIN_TEXT value
             * @property {number} HASH_TYPE_MD5=12 HASH_TYPE_MD5 value
             * @property {number} HASH_TYPE_SHA_0_160=16 HASH_TYPE_SHA_0_160 value
             * @property {number} HASH_TYPE_SHA_1_160=32 HASH_TYPE_SHA_1_160 value
             * @property {number} HASH_TYPE_SHA_2_224=48 HASH_TYPE_SHA_2_224 value
             * @property {number} HASH_TYPE_SHA_2_256=49 HASH_TYPE_SHA_2_256 value
             * @property {number} HASH_TYPE_SHA_2_384=50 HASH_TYPE_SHA_2_384 value
             * @property {number} HASH_TYPE_SHA_2_512=51 HASH_TYPE_SHA_2_512 value
             * @property {number} HASH_TYPE_SHA_2_512_256=52 HASH_TYPE_SHA_2_512_256 value
             * @property {number} HASH_TYPE_SHA_2_512_224=53 HASH_TYPE_SHA_2_512_224 value
             * @property {number} HASH_TYPE_SIP_HASH_32=64 HASH_TYPE_SIP_HASH_32 value
             * @property {number} HASH_TYPE_SIP_HASH_64=65 HASH_TYPE_SIP_HASH_64 value
             * @property {number} HASH_TYPE_CITY_64=80 HASH_TYPE_CITY_64 value
             * @property {number} HASH_TYPE_CITY_128=81 HASH_TYPE_CITY_128 value
             * @property {number} HASH_TYPE_CITY128_CRC=82 HASH_TYPE_CITY128_CRC value
             * @property {number} HASH_TYPE_METRO_32=96 HASH_TYPE_METRO_32 value
             * @property {number} HASH_TYPE_METRO_64=97 HASH_TYPE_METRO_64 value
             * @property {number} HASH_TYPE_METRO_128=98 HASH_TYPE_METRO_128 value
             * @property {number} HASH_TYPE_METRO_128_CRC=99 HASH_TYPE_METRO_128_CRC value
             */
            file.HashType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "HASH_TYPE_UNSPECIFIED"] = 0;
                values[valuesById[8] = "HASH_TYPE_PLAIN_TEXT"] = 8;
                values[valuesById[12] = "HASH_TYPE_MD5"] = 12;
                values[valuesById[16] = "HASH_TYPE_SHA_0_160"] = 16;
                values[valuesById[32] = "HASH_TYPE_SHA_1_160"] = 32;
                values[valuesById[48] = "HASH_TYPE_SHA_2_224"] = 48;
                values[valuesById[49] = "HASH_TYPE_SHA_2_256"] = 49;
                values[valuesById[50] = "HASH_TYPE_SHA_2_384"] = 50;
                values[valuesById[51] = "HASH_TYPE_SHA_2_512"] = 51;
                values[valuesById[52] = "HASH_TYPE_SHA_2_512_256"] = 52;
                values[valuesById[53] = "HASH_TYPE_SHA_2_512_224"] = 53;
                values[valuesById[64] = "HASH_TYPE_SIP_HASH_32"] = 64;
                values[valuesById[65] = "HASH_TYPE_SIP_HASH_64"] = 65;
                values[valuesById[80] = "HASH_TYPE_CITY_64"] = 80;
                values[valuesById[81] = "HASH_TYPE_CITY_128"] = 81;
                values[valuesById[82] = "HASH_TYPE_CITY128_CRC"] = 82;
                values[valuesById[96] = "HASH_TYPE_METRO_32"] = 96;
                values[valuesById[97] = "HASH_TYPE_METRO_64"] = 97;
                values[valuesById[98] = "HASH_TYPE_METRO_128"] = 98;
                values[valuesById[99] = "HASH_TYPE_METRO_128_CRC"] = 99;
                return values;
            })();
    
            file.Hash = (function() {
    
                /**
                 * Properties of a Hash.
                 * @memberof anymetrica.file
                 * @interface IHash
                 * @property {anymetrica.file.HashType|null} [type] Hash type
                 * @property {Uint8Array|null} [value] Hash value
                 */
    
                /**
                 * Constructs a new Hash.
                 * @memberof anymetrica.file
                 * @classdesc Represents a Hash.
                 * @implements IHash
                 * @constructor
                 * @param {anymetrica.file.IHash=} [properties] Properties to set
                 */
                function Hash(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Hash type.
                 * @member {anymetrica.file.HashType} type
                 * @memberof anymetrica.file.Hash
                 * @instance
                 */
                Hash.prototype.type = 0;
    
                /**
                 * Hash value.
                 * @member {Uint8Array} value
                 * @memberof anymetrica.file.Hash
                 * @instance
                 */
                Hash.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Hash instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.file.Hash
                 * @static
                 * @param {anymetrica.file.IHash=} [properties] Properties to set
                 * @returns {anymetrica.file.Hash} Hash instance
                 */
                Hash.create = function create(properties) {
                    return new Hash(properties);
                };
    
                /**
                 * Encodes the specified Hash message. Does not implicitly {@link anymetrica.file.Hash.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.file.Hash
                 * @static
                 * @param {anymetrica.file.IHash} message Hash message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Hash.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.type);
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Hash message, length delimited. Does not implicitly {@link anymetrica.file.Hash.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.file.Hash
                 * @static
                 * @param {anymetrica.file.IHash} message Hash message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Hash.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Hash message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.file.Hash
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.file.Hash} Hash
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Hash.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.file.Hash();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 8:
                            message.type = reader.int32();
                            break;
                        case 16:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Hash message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.file.Hash
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.file.Hash} Hash
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Hash.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Hash message.
                 * @function verify
                 * @memberof anymetrica.file.Hash
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Hash.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 8:
                        case 12:
                        case 16:
                        case 32:
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 64:
                        case 65:
                        case 80:
                        case 81:
                        case 82:
                        case 96:
                        case 97:
                        case 98:
                        case 99:
                            break;
                        }
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a Hash message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.file.Hash
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.file.Hash} Hash
                 */
                Hash.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.file.Hash)
                        return object;
                    var message = new $root.anymetrica.file.Hash();
                    switch (object.type) {
                    case "HASH_TYPE_UNSPECIFIED":
                    case 0:
                        message.type = 0;
                        break;
                    case "HASH_TYPE_PLAIN_TEXT":
                    case 8:
                        message.type = 8;
                        break;
                    case "HASH_TYPE_MD5":
                    case 12:
                        message.type = 12;
                        break;
                    case "HASH_TYPE_SHA_0_160":
                    case 16:
                        message.type = 16;
                        break;
                    case "HASH_TYPE_SHA_1_160":
                    case 32:
                        message.type = 32;
                        break;
                    case "HASH_TYPE_SHA_2_224":
                    case 48:
                        message.type = 48;
                        break;
                    case "HASH_TYPE_SHA_2_256":
                    case 49:
                        message.type = 49;
                        break;
                    case "HASH_TYPE_SHA_2_384":
                    case 50:
                        message.type = 50;
                        break;
                    case "HASH_TYPE_SHA_2_512":
                    case 51:
                        message.type = 51;
                        break;
                    case "HASH_TYPE_SHA_2_512_256":
                    case 52:
                        message.type = 52;
                        break;
                    case "HASH_TYPE_SHA_2_512_224":
                    case 53:
                        message.type = 53;
                        break;
                    case "HASH_TYPE_SIP_HASH_32":
                    case 64:
                        message.type = 64;
                        break;
                    case "HASH_TYPE_SIP_HASH_64":
                    case 65:
                        message.type = 65;
                        break;
                    case "HASH_TYPE_CITY_64":
                    case 80:
                        message.type = 80;
                        break;
                    case "HASH_TYPE_CITY_128":
                    case 81:
                        message.type = 81;
                        break;
                    case "HASH_TYPE_CITY128_CRC":
                    case 82:
                        message.type = 82;
                        break;
                    case "HASH_TYPE_METRO_32":
                    case 96:
                        message.type = 96;
                        break;
                    case "HASH_TYPE_METRO_64":
                    case 97:
                        message.type = 97;
                        break;
                    case "HASH_TYPE_METRO_128":
                    case 98:
                        message.type = 98;
                        break;
                    case "HASH_TYPE_METRO_128_CRC":
                    case 99:
                        message.type = 99;
                        break;
                    }
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Hash message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.file.Hash
                 * @static
                 * @param {anymetrica.file.Hash} message Hash
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Hash.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = options.enums === String ? "HASH_TYPE_UNSPECIFIED" : 0;
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.anymetrica.file.HashType[message.type] : message.type;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Hash to JSON.
                 * @function toJSON
                 * @memberof anymetrica.file.Hash
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Hash.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Hash;
            })();
    
            /**
             * ContentType enum.
             * @name anymetrica.file.ContentType
             * @enum {string}
             * @property {number} CONTENT_TYPE_UNSPECIFIED=0 CONTENT_TYPE_UNSPECIFIED value
             * @property {number} application=100 application value
             * @property {number} audio=200 audio value
             * @property {number} example=300 example value
             * @property {number} font=400 font value
             * @property {number} image=500 image value
             * @property {number} message=600 message value
             * @property {number} model=700 model value
             * @property {number} multipart=800 multipart value
             * @property {number} text=900 text value
             * @property {number} video=1000 video value
             */
            file.ContentType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CONTENT_TYPE_UNSPECIFIED"] = 0;
                values[valuesById[100] = "application"] = 100;
                values[valuesById[200] = "audio"] = 200;
                values[valuesById[300] = "example"] = 300;
                values[valuesById[400] = "font"] = 400;
                values[valuesById[500] = "image"] = 500;
                values[valuesById[600] = "message"] = 600;
                values[valuesById[700] = "model"] = 700;
                values[valuesById[800] = "multipart"] = 800;
                values[valuesById[900] = "text"] = 900;
                values[valuesById[1000] = "video"] = 1000;
                return values;
            })();
    
            file.File = (function() {
    
                /**
                 * Properties of a File.
                 * @memberof anymetrica.file
                 * @interface IFile
                 * @property {string|null} [id] File id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] File metadata
                 * @property {Uint8Array|null} [content] File content
                 * @property {number|Long|null} [size_bytes] File size_bytes
                 * @property {Array.<anymetrica.file.IHash>|null} [hashes] File hashes
                 * @property {string|null} [name] File name
                 * @property {anymetrica.file.ContentType|null} [content_type] File content_type
                 * @property {string|null} [media_type] File media_type
                 * @property {google.protobuf.ITimestamp|null} [media_start_ts] File media_start_ts
                 * @property {google.protobuf.ITimestamp|null} [media_end_ts] File media_end_ts
                 * @property {number|null} [media_width_px] File media_width_px
                 * @property {number|null} [media_height_px] File media_height_px
                 * @property {boolean|null} [is_archive] File is_archive
                 */
    
                /**
                 * Constructs a new File.
                 * @memberof anymetrica.file
                 * @classdesc Represents a File.
                 * @implements IFile
                 * @constructor
                 * @param {anymetrica.file.IFile=} [properties] Properties to set
                 */
                function File(properties) {
                    this.hashes = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * File id.
                 * @member {string} id
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.id = "";
    
                /**
                 * File metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.metadata = null;
    
                /**
                 * File content.
                 * @member {Uint8Array} content
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.content = $util.newBuffer([]);
    
                /**
                 * File size_bytes.
                 * @member {number|Long} size_bytes
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.size_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * File hashes.
                 * @member {Array.<anymetrica.file.IHash>} hashes
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.hashes = $util.emptyArray;
    
                /**
                 * File name.
                 * @member {string} name
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.name = "";
    
                /**
                 * File content_type.
                 * @member {anymetrica.file.ContentType} content_type
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.content_type = 0;
    
                /**
                 * File media_type.
                 * @member {string} media_type
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.media_type = "";
    
                /**
                 * File media_start_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} media_start_ts
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.media_start_ts = null;
    
                /**
                 * File media_end_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} media_end_ts
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.media_end_ts = null;
    
                /**
                 * File media_width_px.
                 * @member {number} media_width_px
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.media_width_px = 0;
    
                /**
                 * File media_height_px.
                 * @member {number} media_height_px
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.media_height_px = 0;
    
                /**
                 * File is_archive.
                 * @member {boolean} is_archive
                 * @memberof anymetrica.file.File
                 * @instance
                 */
                File.prototype.is_archive = false;
    
                /**
                 * Creates a new File instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.file.File
                 * @static
                 * @param {anymetrica.file.IFile=} [properties] Properties to set
                 * @returns {anymetrica.file.File} File instance
                 */
                File.create = function create(properties) {
                    return new File(properties);
                };
    
                /**
                 * Encodes the specified File message. Does not implicitly {@link anymetrica.file.File.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.file.File
                 * @static
                 * @param {anymetrica.file.IFile} message File message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                File.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.content != null && message.hasOwnProperty("content"))
                        writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.content);
                    if (message.size_bytes != null && message.hasOwnProperty("size_bytes"))
                        writer.uint32(/* id 16, wireType 0 =*/128).int64(message.size_bytes);
                    if (message.hashes != null && message.hashes.length)
                        for (var i = 0; i < message.hashes.length; ++i)
                            $root.anymetrica.file.Hash.encode(message.hashes[i], writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 64, wireType 2 =*/514).string(message.name);
                    if (message.content_type != null && message.hasOwnProperty("content_type"))
                        writer.uint32(/* id 68, wireType 0 =*/544).int32(message.content_type);
                    if (message.media_type != null && message.hasOwnProperty("media_type"))
                        writer.uint32(/* id 70, wireType 2 =*/562).string(message.media_type);
                    if (message.media_start_ts != null && message.hasOwnProperty("media_start_ts"))
                        $root.google.protobuf.Timestamp.encode(message.media_start_ts, writer.uint32(/* id 84, wireType 2 =*/674).fork()).ldelim();
                    if (message.media_end_ts != null && message.hasOwnProperty("media_end_ts"))
                        $root.google.protobuf.Timestamp.encode(message.media_end_ts, writer.uint32(/* id 86, wireType 2 =*/690).fork()).ldelim();
                    if (message.media_width_px != null && message.hasOwnProperty("media_width_px"))
                        writer.uint32(/* id 128, wireType 0 =*/1024).int32(message.media_width_px);
                    if (message.media_height_px != null && message.hasOwnProperty("media_height_px"))
                        writer.uint32(/* id 132, wireType 0 =*/1056).int32(message.media_height_px);
                    if (message.is_archive != null && message.hasOwnProperty("is_archive"))
                        writer.uint32(/* id 168, wireType 0 =*/1344).bool(message.is_archive);
                    return writer;
                };
    
                /**
                 * Encodes the specified File message, length delimited. Does not implicitly {@link anymetrica.file.File.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.file.File
                 * @static
                 * @param {anymetrica.file.IFile} message File message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                File.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a File message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.file.File
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.file.File} File
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                File.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.file.File();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.content = reader.bytes();
                            break;
                        case 16:
                            message.size_bytes = reader.int64();
                            break;
                        case 32:
                            if (!(message.hashes && message.hashes.length))
                                message.hashes = [];
                            message.hashes.push($root.anymetrica.file.Hash.decode(reader, reader.uint32()));
                            break;
                        case 64:
                            message.name = reader.string();
                            break;
                        case 68:
                            message.content_type = reader.int32();
                            break;
                        case 70:
                            message.media_type = reader.string();
                            break;
                        case 84:
                            message.media_start_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 86:
                            message.media_end_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 128:
                            message.media_width_px = reader.int32();
                            break;
                        case 132:
                            message.media_height_px = reader.int32();
                            break;
                        case 168:
                            message.is_archive = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a File message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.file.File
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.file.File} File
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                File.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a File message.
                 * @function verify
                 * @memberof anymetrica.file.File
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                File.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.content != null && message.hasOwnProperty("content"))
                        if (!(message.content && typeof message.content.length === "number" || $util.isString(message.content)))
                            return "content: buffer expected";
                    if (message.size_bytes != null && message.hasOwnProperty("size_bytes"))
                        if (!$util.isInteger(message.size_bytes) && !(message.size_bytes && $util.isInteger(message.size_bytes.low) && $util.isInteger(message.size_bytes.high)))
                            return "size_bytes: integer|Long expected";
                    if (message.hashes != null && message.hasOwnProperty("hashes")) {
                        if (!Array.isArray(message.hashes))
                            return "hashes: array expected";
                        for (var i = 0; i < message.hashes.length; ++i) {
                            var error = $root.anymetrica.file.Hash.verify(message.hashes[i]);
                            if (error)
                                return "hashes." + error;
                        }
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.content_type != null && message.hasOwnProperty("content_type"))
                        switch (message.content_type) {
                        default:
                            return "content_type: enum value expected";
                        case 0:
                        case 100:
                        case 200:
                        case 300:
                        case 400:
                        case 500:
                        case 600:
                        case 700:
                        case 800:
                        case 900:
                        case 1000:
                            break;
                        }
                    if (message.media_type != null && message.hasOwnProperty("media_type"))
                        if (!$util.isString(message.media_type))
                            return "media_type: string expected";
                    if (message.media_start_ts != null && message.hasOwnProperty("media_start_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.media_start_ts);
                        if (error)
                            return "media_start_ts." + error;
                    }
                    if (message.media_end_ts != null && message.hasOwnProperty("media_end_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.media_end_ts);
                        if (error)
                            return "media_end_ts." + error;
                    }
                    if (message.media_width_px != null && message.hasOwnProperty("media_width_px"))
                        if (!$util.isInteger(message.media_width_px))
                            return "media_width_px: integer expected";
                    if (message.media_height_px != null && message.hasOwnProperty("media_height_px"))
                        if (!$util.isInteger(message.media_height_px))
                            return "media_height_px: integer expected";
                    if (message.is_archive != null && message.hasOwnProperty("is_archive"))
                        if (typeof message.is_archive !== "boolean")
                            return "is_archive: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a File message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.file.File
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.file.File} File
                 */
                File.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.file.File)
                        return object;
                    var message = new $root.anymetrica.file.File();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.file.File.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.content != null)
                        if (typeof object.content === "string")
                            $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);
                        else if (object.content.length)
                            message.content = object.content;
                    if (object.size_bytes != null)
                        if ($util.Long)
                            (message.size_bytes = $util.Long.fromValue(object.size_bytes)).unsigned = false;
                        else if (typeof object.size_bytes === "string")
                            message.size_bytes = parseInt(object.size_bytes, 10);
                        else if (typeof object.size_bytes === "number")
                            message.size_bytes = object.size_bytes;
                        else if (typeof object.size_bytes === "object")
                            message.size_bytes = new $util.LongBits(object.size_bytes.low >>> 0, object.size_bytes.high >>> 0).toNumber();
                    if (object.hashes) {
                        if (!Array.isArray(object.hashes))
                            throw TypeError(".anymetrica.file.File.hashes: array expected");
                        message.hashes = [];
                        for (var i = 0; i < object.hashes.length; ++i) {
                            if (typeof object.hashes[i] !== "object")
                                throw TypeError(".anymetrica.file.File.hashes: object expected");
                            message.hashes[i] = $root.anymetrica.file.Hash.fromObject(object.hashes[i]);
                        }
                    }
                    if (object.name != null)
                        message.name = String(object.name);
                    switch (object.content_type) {
                    case "CONTENT_TYPE_UNSPECIFIED":
                    case 0:
                        message.content_type = 0;
                        break;
                    case "application":
                    case 100:
                        message.content_type = 100;
                        break;
                    case "audio":
                    case 200:
                        message.content_type = 200;
                        break;
                    case "example":
                    case 300:
                        message.content_type = 300;
                        break;
                    case "font":
                    case 400:
                        message.content_type = 400;
                        break;
                    case "image":
                    case 500:
                        message.content_type = 500;
                        break;
                    case "message":
                    case 600:
                        message.content_type = 600;
                        break;
                    case "model":
                    case 700:
                        message.content_type = 700;
                        break;
                    case "multipart":
                    case 800:
                        message.content_type = 800;
                        break;
                    case "text":
                    case 900:
                        message.content_type = 900;
                        break;
                    case "video":
                    case 1000:
                        message.content_type = 1000;
                        break;
                    }
                    if (object.media_type != null)
                        message.media_type = String(object.media_type);
                    if (object.media_start_ts != null) {
                        if (typeof object.media_start_ts !== "object")
                            throw TypeError(".anymetrica.file.File.media_start_ts: object expected");
                        message.media_start_ts = $root.google.protobuf.Timestamp.fromObject(object.media_start_ts);
                    }
                    if (object.media_end_ts != null) {
                        if (typeof object.media_end_ts !== "object")
                            throw TypeError(".anymetrica.file.File.media_end_ts: object expected");
                        message.media_end_ts = $root.google.protobuf.Timestamp.fromObject(object.media_end_ts);
                    }
                    if (object.media_width_px != null)
                        message.media_width_px = object.media_width_px | 0;
                    if (object.media_height_px != null)
                        message.media_height_px = object.media_height_px | 0;
                    if (object.is_archive != null)
                        message.is_archive = Boolean(object.is_archive);
                    return message;
                };
    
                /**
                 * Creates a plain object from a File message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.file.File
                 * @static
                 * @param {anymetrica.file.File} message File
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                File.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.hashes = [];
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        if (options.bytes === String)
                            object.content = "";
                        else {
                            object.content = [];
                            if (options.bytes !== Array)
                                object.content = $util.newBuffer(object.content);
                        }
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.size_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.size_bytes = options.longs === String ? "0" : 0;
                        object.name = "";
                        object.content_type = options.enums === String ? "CONTENT_TYPE_UNSPECIFIED" : 0;
                        object.media_type = "";
                        object.media_start_ts = null;
                        object.media_end_ts = null;
                        object.media_width_px = 0;
                        object.media_height_px = 0;
                        object.is_archive = false;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.content != null && message.hasOwnProperty("content"))
                        object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;
                    if (message.size_bytes != null && message.hasOwnProperty("size_bytes"))
                        if (typeof message.size_bytes === "number")
                            object.size_bytes = options.longs === String ? String(message.size_bytes) : message.size_bytes;
                        else
                            object.size_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.size_bytes) : options.longs === Number ? new $util.LongBits(message.size_bytes.low >>> 0, message.size_bytes.high >>> 0).toNumber() : message.size_bytes;
                    if (message.hashes && message.hashes.length) {
                        object.hashes = [];
                        for (var j = 0; j < message.hashes.length; ++j)
                            object.hashes[j] = $root.anymetrica.file.Hash.toObject(message.hashes[j], options);
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.content_type != null && message.hasOwnProperty("content_type"))
                        object.content_type = options.enums === String ? $root.anymetrica.file.ContentType[message.content_type] : message.content_type;
                    if (message.media_type != null && message.hasOwnProperty("media_type"))
                        object.media_type = message.media_type;
                    if (message.media_start_ts != null && message.hasOwnProperty("media_start_ts"))
                        object.media_start_ts = $root.google.protobuf.Timestamp.toObject(message.media_start_ts, options);
                    if (message.media_end_ts != null && message.hasOwnProperty("media_end_ts"))
                        object.media_end_ts = $root.google.protobuf.Timestamp.toObject(message.media_end_ts, options);
                    if (message.media_width_px != null && message.hasOwnProperty("media_width_px"))
                        object.media_width_px = message.media_width_px;
                    if (message.media_height_px != null && message.hasOwnProperty("media_height_px"))
                        object.media_height_px = message.media_height_px;
                    if (message.is_archive != null && message.hasOwnProperty("is_archive"))
                        object.is_archive = message.is_archive;
                    return object;
                };
    
                /**
                 * Converts this File to JSON.
                 * @function toJSON
                 * @memberof anymetrica.file.File
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                File.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return File;
            })();
    
            file.Files = (function() {
    
                /**
                 * Properties of a Files.
                 * @memberof anymetrica.file
                 * @interface IFiles
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Files request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Files response
                 * @property {Array.<anymetrica.file.IFile>|null} [entities] Files entities
                 */
    
                /**
                 * Constructs a new Files.
                 * @memberof anymetrica.file
                 * @classdesc Represents a Files.
                 * @implements IFiles
                 * @constructor
                 * @param {anymetrica.file.IFiles=} [properties] Properties to set
                 */
                function Files(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Files request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.file.Files
                 * @instance
                 */
                Files.prototype.request = null;
    
                /**
                 * Files response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.file.Files
                 * @instance
                 */
                Files.prototype.response = null;
    
                /**
                 * Files entities.
                 * @member {Array.<anymetrica.file.IFile>} entities
                 * @memberof anymetrica.file.Files
                 * @instance
                 */
                Files.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Files instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.file.Files
                 * @static
                 * @param {anymetrica.file.IFiles=} [properties] Properties to set
                 * @returns {anymetrica.file.Files} Files instance
                 */
                Files.create = function create(properties) {
                    return new Files(properties);
                };
    
                /**
                 * Encodes the specified Files message. Does not implicitly {@link anymetrica.file.Files.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.file.Files
                 * @static
                 * @param {anymetrica.file.IFiles} message Files message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Files.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.file.File.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Files message, length delimited. Does not implicitly {@link anymetrica.file.Files.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.file.Files
                 * @static
                 * @param {anymetrica.file.IFiles} message Files message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Files.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Files message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.file.Files
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.file.Files} Files
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Files.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.file.Files();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.file.File.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Files message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.file.Files
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.file.Files} Files
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Files.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Files message.
                 * @function verify
                 * @memberof anymetrica.file.Files
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Files.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.file.File.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Files message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.file.Files
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.file.Files} Files
                 */
                Files.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.file.Files)
                        return object;
                    var message = new $root.anymetrica.file.Files();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.file.Files.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.file.Files.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.file.Files.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.file.Files.entities: object expected");
                            message.entities[i] = $root.anymetrica.file.File.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Files message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.file.Files
                 * @static
                 * @param {anymetrica.file.Files} message Files
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Files.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.file.File.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Files to JSON.
                 * @function toJSON
                 * @memberof anymetrica.file.Files
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Files.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Files;
            })();
    
            return file;
        })();
    
        anymetrica.vad = (function() {
    
            /**
             * Namespace vad.
             * @memberof anymetrica
             * @namespace
             */
            var vad = {};
    
            vad.RecognitionConfig = (function() {
    
                /**
                 * Properties of a RecognitionConfig.
                 * @memberof anymetrica.vad
                 * @interface IRecognitionConfig
                 * @property {anymetrica.vad.RecognitionConfig.AudioEncoding|null} [encoding] RecognitionConfig encoding
                 * @property {number|null} [sample_rate_hertz] RecognitionConfig sample_rate_hertz
                 * @property {string|null} [language_code] RecognitionConfig language_code
                 * @property {number|null} [max_alternatives] RecognitionConfig max_alternatives
                 * @property {boolean|null} [profanity_filter] RecognitionConfig profanity_filter
                 * @property {Array.<anymetrica.vad.ISpeechContext>|null} [speech_contexts] RecognitionConfig speech_contexts
                 * @property {boolean|null} [enable_word_time_offsets] RecognitionConfig enable_word_time_offsets
                 */
    
                /**
                 * Constructs a new RecognitionConfig.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a RecognitionConfig.
                 * @implements IRecognitionConfig
                 * @constructor
                 * @param {anymetrica.vad.IRecognitionConfig=} [properties] Properties to set
                 */
                function RecognitionConfig(properties) {
                    this.speech_contexts = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RecognitionConfig encoding.
                 * @member {anymetrica.vad.RecognitionConfig.AudioEncoding} encoding
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @instance
                 */
                RecognitionConfig.prototype.encoding = 0;
    
                /**
                 * RecognitionConfig sample_rate_hertz.
                 * @member {number} sample_rate_hertz
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @instance
                 */
                RecognitionConfig.prototype.sample_rate_hertz = 0;
    
                /**
                 * RecognitionConfig language_code.
                 * @member {string} language_code
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @instance
                 */
                RecognitionConfig.prototype.language_code = "";
    
                /**
                 * RecognitionConfig max_alternatives.
                 * @member {number} max_alternatives
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @instance
                 */
                RecognitionConfig.prototype.max_alternatives = 0;
    
                /**
                 * RecognitionConfig profanity_filter.
                 * @member {boolean} profanity_filter
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @instance
                 */
                RecognitionConfig.prototype.profanity_filter = false;
    
                /**
                 * RecognitionConfig speech_contexts.
                 * @member {Array.<anymetrica.vad.ISpeechContext>} speech_contexts
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @instance
                 */
                RecognitionConfig.prototype.speech_contexts = $util.emptyArray;
    
                /**
                 * RecognitionConfig enable_word_time_offsets.
                 * @member {boolean} enable_word_time_offsets
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @instance
                 */
                RecognitionConfig.prototype.enable_word_time_offsets = false;
    
                /**
                 * Creates a new RecognitionConfig instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @static
                 * @param {anymetrica.vad.IRecognitionConfig=} [properties] Properties to set
                 * @returns {anymetrica.vad.RecognitionConfig} RecognitionConfig instance
                 */
                RecognitionConfig.create = function create(properties) {
                    return new RecognitionConfig(properties);
                };
    
                /**
                 * Encodes the specified RecognitionConfig message. Does not implicitly {@link anymetrica.vad.RecognitionConfig.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @static
                 * @param {anymetrica.vad.IRecognitionConfig} message RecognitionConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognitionConfig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.encoding != null && message.hasOwnProperty("encoding"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.encoding);
                    if (message.sample_rate_hertz != null && message.hasOwnProperty("sample_rate_hertz"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sample_rate_hertz);
                    if (message.language_code != null && message.hasOwnProperty("language_code"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.language_code);
                    if (message.max_alternatives != null && message.hasOwnProperty("max_alternatives"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.max_alternatives);
                    if (message.profanity_filter != null && message.hasOwnProperty("profanity_filter"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.profanity_filter);
                    if (message.speech_contexts != null && message.speech_contexts.length)
                        for (var i = 0; i < message.speech_contexts.length; ++i)
                            $root.anymetrica.vad.SpeechContext.encode(message.speech_contexts[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.enable_word_time_offsets != null && message.hasOwnProperty("enable_word_time_offsets"))
                        writer.uint32(/* id 8, wireType 0 =*/64).bool(message.enable_word_time_offsets);
                    return writer;
                };
    
                /**
                 * Encodes the specified RecognitionConfig message, length delimited. Does not implicitly {@link anymetrica.vad.RecognitionConfig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @static
                 * @param {anymetrica.vad.IRecognitionConfig} message RecognitionConfig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognitionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RecognitionConfig message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.RecognitionConfig} RecognitionConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognitionConfig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.RecognitionConfig();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.encoding = reader.int32();
                            break;
                        case 2:
                            message.sample_rate_hertz = reader.int32();
                            break;
                        case 3:
                            message.language_code = reader.string();
                            break;
                        case 4:
                            message.max_alternatives = reader.int32();
                            break;
                        case 5:
                            message.profanity_filter = reader.bool();
                            break;
                        case 6:
                            if (!(message.speech_contexts && message.speech_contexts.length))
                                message.speech_contexts = [];
                            message.speech_contexts.push($root.anymetrica.vad.SpeechContext.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.enable_word_time_offsets = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RecognitionConfig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.RecognitionConfig} RecognitionConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognitionConfig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RecognitionConfig message.
                 * @function verify
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RecognitionConfig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.encoding != null && message.hasOwnProperty("encoding"))
                        switch (message.encoding) {
                        default:
                            return "encoding: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            break;
                        }
                    if (message.sample_rate_hertz != null && message.hasOwnProperty("sample_rate_hertz"))
                        if (!$util.isInteger(message.sample_rate_hertz))
                            return "sample_rate_hertz: integer expected";
                    if (message.language_code != null && message.hasOwnProperty("language_code"))
                        if (!$util.isString(message.language_code))
                            return "language_code: string expected";
                    if (message.max_alternatives != null && message.hasOwnProperty("max_alternatives"))
                        if (!$util.isInteger(message.max_alternatives))
                            return "max_alternatives: integer expected";
                    if (message.profanity_filter != null && message.hasOwnProperty("profanity_filter"))
                        if (typeof message.profanity_filter !== "boolean")
                            return "profanity_filter: boolean expected";
                    if (message.speech_contexts != null && message.hasOwnProperty("speech_contexts")) {
                        if (!Array.isArray(message.speech_contexts))
                            return "speech_contexts: array expected";
                        for (var i = 0; i < message.speech_contexts.length; ++i) {
                            var error = $root.anymetrica.vad.SpeechContext.verify(message.speech_contexts[i]);
                            if (error)
                                return "speech_contexts." + error;
                        }
                    }
                    if (message.enable_word_time_offsets != null && message.hasOwnProperty("enable_word_time_offsets"))
                        if (typeof message.enable_word_time_offsets !== "boolean")
                            return "enable_word_time_offsets: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a RecognitionConfig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.RecognitionConfig} RecognitionConfig
                 */
                RecognitionConfig.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.RecognitionConfig)
                        return object;
                    var message = new $root.anymetrica.vad.RecognitionConfig();
                    switch (object.encoding) {
                    case "ENCODING_UNSPECIFIED":
                    case 0:
                        message.encoding = 0;
                        break;
                    case "LINEAR16":
                    case 1:
                        message.encoding = 1;
                        break;
                    case "FLAC":
                    case 2:
                        message.encoding = 2;
                        break;
                    case "MULAW":
                    case 3:
                        message.encoding = 3;
                        break;
                    case "AMR":
                    case 4:
                        message.encoding = 4;
                        break;
                    case "AMR_WB":
                    case 5:
                        message.encoding = 5;
                        break;
                    case "OGG_OPUS":
                    case 6:
                        message.encoding = 6;
                        break;
                    case "SPEEX_WITH_HEADER_BYTE":
                    case 7:
                        message.encoding = 7;
                        break;
                    }
                    if (object.sample_rate_hertz != null)
                        message.sample_rate_hertz = object.sample_rate_hertz | 0;
                    if (object.language_code != null)
                        message.language_code = String(object.language_code);
                    if (object.max_alternatives != null)
                        message.max_alternatives = object.max_alternatives | 0;
                    if (object.profanity_filter != null)
                        message.profanity_filter = Boolean(object.profanity_filter);
                    if (object.speech_contexts) {
                        if (!Array.isArray(object.speech_contexts))
                            throw TypeError(".anymetrica.vad.RecognitionConfig.speech_contexts: array expected");
                        message.speech_contexts = [];
                        for (var i = 0; i < object.speech_contexts.length; ++i) {
                            if (typeof object.speech_contexts[i] !== "object")
                                throw TypeError(".anymetrica.vad.RecognitionConfig.speech_contexts: object expected");
                            message.speech_contexts[i] = $root.anymetrica.vad.SpeechContext.fromObject(object.speech_contexts[i]);
                        }
                    }
                    if (object.enable_word_time_offsets != null)
                        message.enable_word_time_offsets = Boolean(object.enable_word_time_offsets);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RecognitionConfig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @static
                 * @param {anymetrica.vad.RecognitionConfig} message RecognitionConfig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RecognitionConfig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.speech_contexts = [];
                    if (options.defaults) {
                        object.encoding = options.enums === String ? "ENCODING_UNSPECIFIED" : 0;
                        object.sample_rate_hertz = 0;
                        object.language_code = "";
                        object.max_alternatives = 0;
                        object.profanity_filter = false;
                        object.enable_word_time_offsets = false;
                    }
                    if (message.encoding != null && message.hasOwnProperty("encoding"))
                        object.encoding = options.enums === String ? $root.anymetrica.vad.RecognitionConfig.AudioEncoding[message.encoding] : message.encoding;
                    if (message.sample_rate_hertz != null && message.hasOwnProperty("sample_rate_hertz"))
                        object.sample_rate_hertz = message.sample_rate_hertz;
                    if (message.language_code != null && message.hasOwnProperty("language_code"))
                        object.language_code = message.language_code;
                    if (message.max_alternatives != null && message.hasOwnProperty("max_alternatives"))
                        object.max_alternatives = message.max_alternatives;
                    if (message.profanity_filter != null && message.hasOwnProperty("profanity_filter"))
                        object.profanity_filter = message.profanity_filter;
                    if (message.speech_contexts && message.speech_contexts.length) {
                        object.speech_contexts = [];
                        for (var j = 0; j < message.speech_contexts.length; ++j)
                            object.speech_contexts[j] = $root.anymetrica.vad.SpeechContext.toObject(message.speech_contexts[j], options);
                    }
                    if (message.enable_word_time_offsets != null && message.hasOwnProperty("enable_word_time_offsets"))
                        object.enable_word_time_offsets = message.enable_word_time_offsets;
                    return object;
                };
    
                /**
                 * Converts this RecognitionConfig to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.RecognitionConfig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RecognitionConfig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * AudioEncoding enum.
                 * @name anymetrica.vad.RecognitionConfig.AudioEncoding
                 * @enum {string}
                 * @property {number} ENCODING_UNSPECIFIED=0 ENCODING_UNSPECIFIED value
                 * @property {number} LINEAR16=1 LINEAR16 value
                 * @property {number} FLAC=2 FLAC value
                 * @property {number} MULAW=3 MULAW value
                 * @property {number} AMR=4 AMR value
                 * @property {number} AMR_WB=5 AMR_WB value
                 * @property {number} OGG_OPUS=6 OGG_OPUS value
                 * @property {number} SPEEX_WITH_HEADER_BYTE=7 SPEEX_WITH_HEADER_BYTE value
                 */
                RecognitionConfig.AudioEncoding = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ENCODING_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "LINEAR16"] = 1;
                    values[valuesById[2] = "FLAC"] = 2;
                    values[valuesById[3] = "MULAW"] = 3;
                    values[valuesById[4] = "AMR"] = 4;
                    values[valuesById[5] = "AMR_WB"] = 5;
                    values[valuesById[6] = "OGG_OPUS"] = 6;
                    values[valuesById[7] = "SPEEX_WITH_HEADER_BYTE"] = 7;
                    return values;
                })();
    
                return RecognitionConfig;
            })();
    
            vad.SpeechContext = (function() {
    
                /**
                 * Properties of a SpeechContext.
                 * @memberof anymetrica.vad
                 * @interface ISpeechContext
                 * @property {Array.<string>|null} [phrases] SpeechContext phrases
                 */
    
                /**
                 * Constructs a new SpeechContext.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a SpeechContext.
                 * @implements ISpeechContext
                 * @constructor
                 * @param {anymetrica.vad.ISpeechContext=} [properties] Properties to set
                 */
                function SpeechContext(properties) {
                    this.phrases = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SpeechContext phrases.
                 * @member {Array.<string>} phrases
                 * @memberof anymetrica.vad.SpeechContext
                 * @instance
                 */
                SpeechContext.prototype.phrases = $util.emptyArray;
    
                /**
                 * Creates a new SpeechContext instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.SpeechContext
                 * @static
                 * @param {anymetrica.vad.ISpeechContext=} [properties] Properties to set
                 * @returns {anymetrica.vad.SpeechContext} SpeechContext instance
                 */
                SpeechContext.create = function create(properties) {
                    return new SpeechContext(properties);
                };
    
                /**
                 * Encodes the specified SpeechContext message. Does not implicitly {@link anymetrica.vad.SpeechContext.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.SpeechContext
                 * @static
                 * @param {anymetrica.vad.ISpeechContext} message SpeechContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SpeechContext.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.phrases != null && message.phrases.length)
                        for (var i = 0; i < message.phrases.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.phrases[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified SpeechContext message, length delimited. Does not implicitly {@link anymetrica.vad.SpeechContext.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.SpeechContext
                 * @static
                 * @param {anymetrica.vad.ISpeechContext} message SpeechContext message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SpeechContext.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SpeechContext message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.SpeechContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.SpeechContext} SpeechContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SpeechContext.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.SpeechContext();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.phrases && message.phrases.length))
                                message.phrases = [];
                            message.phrases.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SpeechContext message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.SpeechContext
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.SpeechContext} SpeechContext
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SpeechContext.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SpeechContext message.
                 * @function verify
                 * @memberof anymetrica.vad.SpeechContext
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SpeechContext.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.phrases != null && message.hasOwnProperty("phrases")) {
                        if (!Array.isArray(message.phrases))
                            return "phrases: array expected";
                        for (var i = 0; i < message.phrases.length; ++i)
                            if (!$util.isString(message.phrases[i]))
                                return "phrases: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a SpeechContext message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.SpeechContext
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.SpeechContext} SpeechContext
                 */
                SpeechContext.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.SpeechContext)
                        return object;
                    var message = new $root.anymetrica.vad.SpeechContext();
                    if (object.phrases) {
                        if (!Array.isArray(object.phrases))
                            throw TypeError(".anymetrica.vad.SpeechContext.phrases: array expected");
                        message.phrases = [];
                        for (var i = 0; i < object.phrases.length; ++i)
                            message.phrases[i] = String(object.phrases[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SpeechContext message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.SpeechContext
                 * @static
                 * @param {anymetrica.vad.SpeechContext} message SpeechContext
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SpeechContext.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.phrases = [];
                    if (message.phrases && message.phrases.length) {
                        object.phrases = [];
                        for (var j = 0; j < message.phrases.length; ++j)
                            object.phrases[j] = message.phrases[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this SpeechContext to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.SpeechContext
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SpeechContext.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SpeechContext;
            })();
    
            vad.RecognitionAudio = (function() {
    
                /**
                 * Properties of a RecognitionAudio.
                 * @memberof anymetrica.vad
                 * @interface IRecognitionAudio
                 * @property {Uint8Array|null} [content] RecognitionAudio content
                 * @property {string|null} [uri] RecognitionAudio uri
                 */
    
                /**
                 * Constructs a new RecognitionAudio.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a RecognitionAudio.
                 * @implements IRecognitionAudio
                 * @constructor
                 * @param {anymetrica.vad.IRecognitionAudio=} [properties] Properties to set
                 */
                function RecognitionAudio(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RecognitionAudio content.
                 * @member {Uint8Array} content
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @instance
                 */
                RecognitionAudio.prototype.content = $util.newBuffer([]);
    
                /**
                 * RecognitionAudio uri.
                 * @member {string} uri
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @instance
                 */
                RecognitionAudio.prototype.uri = "";
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * RecognitionAudio audio_source.
                 * @member {"content"|"uri"|undefined} audio_source
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @instance
                 */
                Object.defineProperty(RecognitionAudio.prototype, "audio_source", {
                    get: $util.oneOfGetter($oneOfFields = ["content", "uri"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new RecognitionAudio instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @static
                 * @param {anymetrica.vad.IRecognitionAudio=} [properties] Properties to set
                 * @returns {anymetrica.vad.RecognitionAudio} RecognitionAudio instance
                 */
                RecognitionAudio.create = function create(properties) {
                    return new RecognitionAudio(properties);
                };
    
                /**
                 * Encodes the specified RecognitionAudio message. Does not implicitly {@link anymetrica.vad.RecognitionAudio.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @static
                 * @param {anymetrica.vad.IRecognitionAudio} message RecognitionAudio message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognitionAudio.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.content != null && message.hasOwnProperty("content"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.content);
                    if (message.uri != null && message.hasOwnProperty("uri"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.uri);
                    return writer;
                };
    
                /**
                 * Encodes the specified RecognitionAudio message, length delimited. Does not implicitly {@link anymetrica.vad.RecognitionAudio.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @static
                 * @param {anymetrica.vad.IRecognitionAudio} message RecognitionAudio message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognitionAudio.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RecognitionAudio message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.RecognitionAudio} RecognitionAudio
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognitionAudio.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.RecognitionAudio();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.content = reader.bytes();
                            break;
                        case 2:
                            message.uri = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RecognitionAudio message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.RecognitionAudio} RecognitionAudio
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognitionAudio.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RecognitionAudio message.
                 * @function verify
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RecognitionAudio.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.content != null && message.hasOwnProperty("content")) {
                        properties.audio_source = 1;
                        if (!(message.content && typeof message.content.length === "number" || $util.isString(message.content)))
                            return "content: buffer expected";
                    }
                    if (message.uri != null && message.hasOwnProperty("uri")) {
                        if (properties.audio_source === 1)
                            return "audio_source: multiple values";
                        properties.audio_source = 1;
                        if (!$util.isString(message.uri))
                            return "uri: string expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a RecognitionAudio message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.RecognitionAudio} RecognitionAudio
                 */
                RecognitionAudio.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.RecognitionAudio)
                        return object;
                    var message = new $root.anymetrica.vad.RecognitionAudio();
                    if (object.content != null)
                        if (typeof object.content === "string")
                            $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);
                        else if (object.content.length)
                            message.content = object.content;
                    if (object.uri != null)
                        message.uri = String(object.uri);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RecognitionAudio message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @static
                 * @param {anymetrica.vad.RecognitionAudio} message RecognitionAudio
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RecognitionAudio.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.content != null && message.hasOwnProperty("content")) {
                        object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;
                        if (options.oneofs)
                            object.audio_source = "content";
                    }
                    if (message.uri != null && message.hasOwnProperty("uri")) {
                        object.uri = message.uri;
                        if (options.oneofs)
                            object.audio_source = "uri";
                    }
                    return object;
                };
    
                /**
                 * Converts this RecognitionAudio to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.RecognitionAudio
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RecognitionAudio.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RecognitionAudio;
            })();
    
            vad.RecognizeResponse = (function() {
    
                /**
                 * Properties of a RecognizeResponse.
                 * @memberof anymetrica.vad
                 * @interface IRecognizeResponse
                 * @property {Array.<anymetrica.vad.ISpeechRecognitionResult>|null} [results] RecognizeResponse results
                 */
    
                /**
                 * Constructs a new RecognizeResponse.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a RecognizeResponse.
                 * @implements IRecognizeResponse
                 * @constructor
                 * @param {anymetrica.vad.IRecognizeResponse=} [properties] Properties to set
                 */
                function RecognizeResponse(properties) {
                    this.results = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RecognizeResponse results.
                 * @member {Array.<anymetrica.vad.ISpeechRecognitionResult>} results
                 * @memberof anymetrica.vad.RecognizeResponse
                 * @instance
                 */
                RecognizeResponse.prototype.results = $util.emptyArray;
    
                /**
                 * Creates a new RecognizeResponse instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.RecognizeResponse
                 * @static
                 * @param {anymetrica.vad.IRecognizeResponse=} [properties] Properties to set
                 * @returns {anymetrica.vad.RecognizeResponse} RecognizeResponse instance
                 */
                RecognizeResponse.create = function create(properties) {
                    return new RecognizeResponse(properties);
                };
    
                /**
                 * Encodes the specified RecognizeResponse message. Does not implicitly {@link anymetrica.vad.RecognizeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.RecognizeResponse
                 * @static
                 * @param {anymetrica.vad.IRecognizeResponse} message RecognizeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognizeResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.results != null && message.results.length)
                        for (var i = 0; i < message.results.length; ++i)
                            $root.anymetrica.vad.SpeechRecognitionResult.encode(message.results[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RecognizeResponse message, length delimited. Does not implicitly {@link anymetrica.vad.RecognizeResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.RecognizeResponse
                 * @static
                 * @param {anymetrica.vad.IRecognizeResponse} message RecognizeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RecognizeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.RecognizeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.RecognizeResponse} RecognizeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognizeResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.RecognizeResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.results && message.results.length))
                                message.results = [];
                            message.results.push($root.anymetrica.vad.SpeechRecognitionResult.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RecognizeResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.RecognizeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.RecognizeResponse} RecognizeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognizeResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RecognizeResponse message.
                 * @function verify
                 * @memberof anymetrica.vad.RecognizeResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RecognizeResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.results != null && message.hasOwnProperty("results")) {
                        if (!Array.isArray(message.results))
                            return "results: array expected";
                        for (var i = 0; i < message.results.length; ++i) {
                            var error = $root.anymetrica.vad.SpeechRecognitionResult.verify(message.results[i]);
                            if (error)
                                return "results." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a RecognizeResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.RecognizeResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.RecognizeResponse} RecognizeResponse
                 */
                RecognizeResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.RecognizeResponse)
                        return object;
                    var message = new $root.anymetrica.vad.RecognizeResponse();
                    if (object.results) {
                        if (!Array.isArray(object.results))
                            throw TypeError(".anymetrica.vad.RecognizeResponse.results: array expected");
                        message.results = [];
                        for (var i = 0; i < object.results.length; ++i) {
                            if (typeof object.results[i] !== "object")
                                throw TypeError(".anymetrica.vad.RecognizeResponse.results: object expected");
                            message.results[i] = $root.anymetrica.vad.SpeechRecognitionResult.fromObject(object.results[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RecognizeResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.RecognizeResponse
                 * @static
                 * @param {anymetrica.vad.RecognizeResponse} message RecognizeResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RecognizeResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.results = [];
                    if (message.results && message.results.length) {
                        object.results = [];
                        for (var j = 0; j < message.results.length; ++j)
                            object.results[j] = $root.anymetrica.vad.SpeechRecognitionResult.toObject(message.results[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this RecognizeResponse to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.RecognizeResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RecognizeResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RecognizeResponse;
            })();
    
            vad.LongRunningRecognizeResponse = (function() {
    
                /**
                 * Properties of a LongRunningRecognizeResponse.
                 * @memberof anymetrica.vad
                 * @interface ILongRunningRecognizeResponse
                 * @property {Array.<anymetrica.vad.ISpeechRecognitionResult>|null} [results] LongRunningRecognizeResponse results
                 */
    
                /**
                 * Constructs a new LongRunningRecognizeResponse.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a LongRunningRecognizeResponse.
                 * @implements ILongRunningRecognizeResponse
                 * @constructor
                 * @param {anymetrica.vad.ILongRunningRecognizeResponse=} [properties] Properties to set
                 */
                function LongRunningRecognizeResponse(properties) {
                    this.results = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * LongRunningRecognizeResponse results.
                 * @member {Array.<anymetrica.vad.ISpeechRecognitionResult>} results
                 * @memberof anymetrica.vad.LongRunningRecognizeResponse
                 * @instance
                 */
                LongRunningRecognizeResponse.prototype.results = $util.emptyArray;
    
                /**
                 * Creates a new LongRunningRecognizeResponse instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.LongRunningRecognizeResponse
                 * @static
                 * @param {anymetrica.vad.ILongRunningRecognizeResponse=} [properties] Properties to set
                 * @returns {anymetrica.vad.LongRunningRecognizeResponse} LongRunningRecognizeResponse instance
                 */
                LongRunningRecognizeResponse.create = function create(properties) {
                    return new LongRunningRecognizeResponse(properties);
                };
    
                /**
                 * Encodes the specified LongRunningRecognizeResponse message. Does not implicitly {@link anymetrica.vad.LongRunningRecognizeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.LongRunningRecognizeResponse
                 * @static
                 * @param {anymetrica.vad.ILongRunningRecognizeResponse} message LongRunningRecognizeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LongRunningRecognizeResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.results != null && message.results.length)
                        for (var i = 0; i < message.results.length; ++i)
                            $root.anymetrica.vad.SpeechRecognitionResult.encode(message.results[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified LongRunningRecognizeResponse message, length delimited. Does not implicitly {@link anymetrica.vad.LongRunningRecognizeResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.LongRunningRecognizeResponse
                 * @static
                 * @param {anymetrica.vad.ILongRunningRecognizeResponse} message LongRunningRecognizeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LongRunningRecognizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a LongRunningRecognizeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.LongRunningRecognizeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.LongRunningRecognizeResponse} LongRunningRecognizeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LongRunningRecognizeResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.LongRunningRecognizeResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.results && message.results.length))
                                message.results = [];
                            message.results.push($root.anymetrica.vad.SpeechRecognitionResult.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a LongRunningRecognizeResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.LongRunningRecognizeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.LongRunningRecognizeResponse} LongRunningRecognizeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LongRunningRecognizeResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a LongRunningRecognizeResponse message.
                 * @function verify
                 * @memberof anymetrica.vad.LongRunningRecognizeResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LongRunningRecognizeResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.results != null && message.hasOwnProperty("results")) {
                        if (!Array.isArray(message.results))
                            return "results: array expected";
                        for (var i = 0; i < message.results.length; ++i) {
                            var error = $root.anymetrica.vad.SpeechRecognitionResult.verify(message.results[i]);
                            if (error)
                                return "results." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a LongRunningRecognizeResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.LongRunningRecognizeResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.LongRunningRecognizeResponse} LongRunningRecognizeResponse
                 */
                LongRunningRecognizeResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.LongRunningRecognizeResponse)
                        return object;
                    var message = new $root.anymetrica.vad.LongRunningRecognizeResponse();
                    if (object.results) {
                        if (!Array.isArray(object.results))
                            throw TypeError(".anymetrica.vad.LongRunningRecognizeResponse.results: array expected");
                        message.results = [];
                        for (var i = 0; i < object.results.length; ++i) {
                            if (typeof object.results[i] !== "object")
                                throw TypeError(".anymetrica.vad.LongRunningRecognizeResponse.results: object expected");
                            message.results[i] = $root.anymetrica.vad.SpeechRecognitionResult.fromObject(object.results[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a LongRunningRecognizeResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.LongRunningRecognizeResponse
                 * @static
                 * @param {anymetrica.vad.LongRunningRecognizeResponse} message LongRunningRecognizeResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LongRunningRecognizeResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.results = [];
                    if (message.results && message.results.length) {
                        object.results = [];
                        for (var j = 0; j < message.results.length; ++j)
                            object.results[j] = $root.anymetrica.vad.SpeechRecognitionResult.toObject(message.results[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this LongRunningRecognizeResponse to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.LongRunningRecognizeResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LongRunningRecognizeResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return LongRunningRecognizeResponse;
            })();
    
            vad.LongRunningRecognizeMetadata = (function() {
    
                /**
                 * Properties of a LongRunningRecognizeMetadata.
                 * @memberof anymetrica.vad
                 * @interface ILongRunningRecognizeMetadata
                 * @property {number|null} [progress_percent] LongRunningRecognizeMetadata progress_percent
                 * @property {google.protobuf.ITimestamp|null} [start_time] LongRunningRecognizeMetadata start_time
                 * @property {google.protobuf.ITimestamp|null} [last_update_time] LongRunningRecognizeMetadata last_update_time
                 */
    
                /**
                 * Constructs a new LongRunningRecognizeMetadata.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a LongRunningRecognizeMetadata.
                 * @implements ILongRunningRecognizeMetadata
                 * @constructor
                 * @param {anymetrica.vad.ILongRunningRecognizeMetadata=} [properties] Properties to set
                 */
                function LongRunningRecognizeMetadata(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * LongRunningRecognizeMetadata progress_percent.
                 * @member {number} progress_percent
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @instance
                 */
                LongRunningRecognizeMetadata.prototype.progress_percent = 0;
    
                /**
                 * LongRunningRecognizeMetadata start_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} start_time
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @instance
                 */
                LongRunningRecognizeMetadata.prototype.start_time = null;
    
                /**
                 * LongRunningRecognizeMetadata last_update_time.
                 * @member {google.protobuf.ITimestamp|null|undefined} last_update_time
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @instance
                 */
                LongRunningRecognizeMetadata.prototype.last_update_time = null;
    
                /**
                 * Creates a new LongRunningRecognizeMetadata instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @static
                 * @param {anymetrica.vad.ILongRunningRecognizeMetadata=} [properties] Properties to set
                 * @returns {anymetrica.vad.LongRunningRecognizeMetadata} LongRunningRecognizeMetadata instance
                 */
                LongRunningRecognizeMetadata.create = function create(properties) {
                    return new LongRunningRecognizeMetadata(properties);
                };
    
                /**
                 * Encodes the specified LongRunningRecognizeMetadata message. Does not implicitly {@link anymetrica.vad.LongRunningRecognizeMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @static
                 * @param {anymetrica.vad.ILongRunningRecognizeMetadata} message LongRunningRecognizeMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LongRunningRecognizeMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.progress_percent != null && message.hasOwnProperty("progress_percent"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.progress_percent);
                    if (message.start_time != null && message.hasOwnProperty("start_time"))
                        $root.google.protobuf.Timestamp.encode(message.start_time, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.last_update_time != null && message.hasOwnProperty("last_update_time"))
                        $root.google.protobuf.Timestamp.encode(message.last_update_time, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified LongRunningRecognizeMetadata message, length delimited. Does not implicitly {@link anymetrica.vad.LongRunningRecognizeMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @static
                 * @param {anymetrica.vad.ILongRunningRecognizeMetadata} message LongRunningRecognizeMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LongRunningRecognizeMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a LongRunningRecognizeMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.LongRunningRecognizeMetadata} LongRunningRecognizeMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LongRunningRecognizeMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.LongRunningRecognizeMetadata();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.progress_percent = reader.int32();
                            break;
                        case 2:
                            message.start_time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.last_update_time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a LongRunningRecognizeMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.LongRunningRecognizeMetadata} LongRunningRecognizeMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LongRunningRecognizeMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a LongRunningRecognizeMetadata message.
                 * @function verify
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LongRunningRecognizeMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.progress_percent != null && message.hasOwnProperty("progress_percent"))
                        if (!$util.isInteger(message.progress_percent))
                            return "progress_percent: integer expected";
                    if (message.start_time != null && message.hasOwnProperty("start_time")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.start_time);
                        if (error)
                            return "start_time." + error;
                    }
                    if (message.last_update_time != null && message.hasOwnProperty("last_update_time")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.last_update_time);
                        if (error)
                            return "last_update_time." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a LongRunningRecognizeMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.LongRunningRecognizeMetadata} LongRunningRecognizeMetadata
                 */
                LongRunningRecognizeMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.LongRunningRecognizeMetadata)
                        return object;
                    var message = new $root.anymetrica.vad.LongRunningRecognizeMetadata();
                    if (object.progress_percent != null)
                        message.progress_percent = object.progress_percent | 0;
                    if (object.start_time != null) {
                        if (typeof object.start_time !== "object")
                            throw TypeError(".anymetrica.vad.LongRunningRecognizeMetadata.start_time: object expected");
                        message.start_time = $root.google.protobuf.Timestamp.fromObject(object.start_time);
                    }
                    if (object.last_update_time != null) {
                        if (typeof object.last_update_time !== "object")
                            throw TypeError(".anymetrica.vad.LongRunningRecognizeMetadata.last_update_time: object expected");
                        message.last_update_time = $root.google.protobuf.Timestamp.fromObject(object.last_update_time);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a LongRunningRecognizeMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @static
                 * @param {anymetrica.vad.LongRunningRecognizeMetadata} message LongRunningRecognizeMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LongRunningRecognizeMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.progress_percent = 0;
                        object.start_time = null;
                        object.last_update_time = null;
                    }
                    if (message.progress_percent != null && message.hasOwnProperty("progress_percent"))
                        object.progress_percent = message.progress_percent;
                    if (message.start_time != null && message.hasOwnProperty("start_time"))
                        object.start_time = $root.google.protobuf.Timestamp.toObject(message.start_time, options);
                    if (message.last_update_time != null && message.hasOwnProperty("last_update_time"))
                        object.last_update_time = $root.google.protobuf.Timestamp.toObject(message.last_update_time, options);
                    return object;
                };
    
                /**
                 * Converts this LongRunningRecognizeMetadata to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.LongRunningRecognizeMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LongRunningRecognizeMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return LongRunningRecognizeMetadata;
            })();
    
            vad.SpeechRecognitionResult = (function() {
    
                /**
                 * Properties of a SpeechRecognitionResult.
                 * @memberof anymetrica.vad
                 * @interface ISpeechRecognitionResult
                 * @property {Array.<anymetrica.vad.ISpeechRecognitionAlternative>|null} [alternatives] SpeechRecognitionResult alternatives
                 */
    
                /**
                 * Constructs a new SpeechRecognitionResult.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a SpeechRecognitionResult.
                 * @implements ISpeechRecognitionResult
                 * @constructor
                 * @param {anymetrica.vad.ISpeechRecognitionResult=} [properties] Properties to set
                 */
                function SpeechRecognitionResult(properties) {
                    this.alternatives = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SpeechRecognitionResult alternatives.
                 * @member {Array.<anymetrica.vad.ISpeechRecognitionAlternative>} alternatives
                 * @memberof anymetrica.vad.SpeechRecognitionResult
                 * @instance
                 */
                SpeechRecognitionResult.prototype.alternatives = $util.emptyArray;
    
                /**
                 * Creates a new SpeechRecognitionResult instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.SpeechRecognitionResult
                 * @static
                 * @param {anymetrica.vad.ISpeechRecognitionResult=} [properties] Properties to set
                 * @returns {anymetrica.vad.SpeechRecognitionResult} SpeechRecognitionResult instance
                 */
                SpeechRecognitionResult.create = function create(properties) {
                    return new SpeechRecognitionResult(properties);
                };
    
                /**
                 * Encodes the specified SpeechRecognitionResult message. Does not implicitly {@link anymetrica.vad.SpeechRecognitionResult.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.SpeechRecognitionResult
                 * @static
                 * @param {anymetrica.vad.ISpeechRecognitionResult} message SpeechRecognitionResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SpeechRecognitionResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.alternatives != null && message.alternatives.length)
                        for (var i = 0; i < message.alternatives.length; ++i)
                            $root.anymetrica.vad.SpeechRecognitionAlternative.encode(message.alternatives[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SpeechRecognitionResult message, length delimited. Does not implicitly {@link anymetrica.vad.SpeechRecognitionResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.SpeechRecognitionResult
                 * @static
                 * @param {anymetrica.vad.ISpeechRecognitionResult} message SpeechRecognitionResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SpeechRecognitionResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SpeechRecognitionResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.SpeechRecognitionResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.SpeechRecognitionResult} SpeechRecognitionResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SpeechRecognitionResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.SpeechRecognitionResult();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.alternatives && message.alternatives.length))
                                message.alternatives = [];
                            message.alternatives.push($root.anymetrica.vad.SpeechRecognitionAlternative.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SpeechRecognitionResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.SpeechRecognitionResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.SpeechRecognitionResult} SpeechRecognitionResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SpeechRecognitionResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SpeechRecognitionResult message.
                 * @function verify
                 * @memberof anymetrica.vad.SpeechRecognitionResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SpeechRecognitionResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.alternatives != null && message.hasOwnProperty("alternatives")) {
                        if (!Array.isArray(message.alternatives))
                            return "alternatives: array expected";
                        for (var i = 0; i < message.alternatives.length; ++i) {
                            var error = $root.anymetrica.vad.SpeechRecognitionAlternative.verify(message.alternatives[i]);
                            if (error)
                                return "alternatives." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SpeechRecognitionResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.SpeechRecognitionResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.SpeechRecognitionResult} SpeechRecognitionResult
                 */
                SpeechRecognitionResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.SpeechRecognitionResult)
                        return object;
                    var message = new $root.anymetrica.vad.SpeechRecognitionResult();
                    if (object.alternatives) {
                        if (!Array.isArray(object.alternatives))
                            throw TypeError(".anymetrica.vad.SpeechRecognitionResult.alternatives: array expected");
                        message.alternatives = [];
                        for (var i = 0; i < object.alternatives.length; ++i) {
                            if (typeof object.alternatives[i] !== "object")
                                throw TypeError(".anymetrica.vad.SpeechRecognitionResult.alternatives: object expected");
                            message.alternatives[i] = $root.anymetrica.vad.SpeechRecognitionAlternative.fromObject(object.alternatives[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SpeechRecognitionResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.SpeechRecognitionResult
                 * @static
                 * @param {anymetrica.vad.SpeechRecognitionResult} message SpeechRecognitionResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SpeechRecognitionResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.alternatives = [];
                    if (message.alternatives && message.alternatives.length) {
                        object.alternatives = [];
                        for (var j = 0; j < message.alternatives.length; ++j)
                            object.alternatives[j] = $root.anymetrica.vad.SpeechRecognitionAlternative.toObject(message.alternatives[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SpeechRecognitionResult to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.SpeechRecognitionResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SpeechRecognitionResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SpeechRecognitionResult;
            })();
    
            vad.SpeechRecognitionAlternative = (function() {
    
                /**
                 * Properties of a SpeechRecognitionAlternative.
                 * @memberof anymetrica.vad
                 * @interface ISpeechRecognitionAlternative
                 * @property {string|null} [transcript] SpeechRecognitionAlternative transcript
                 * @property {number|null} [confidence] SpeechRecognitionAlternative confidence
                 * @property {Array.<anymetrica.vad.IWordInfo>|null} [words] SpeechRecognitionAlternative words
                 */
    
                /**
                 * Constructs a new SpeechRecognitionAlternative.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a SpeechRecognitionAlternative.
                 * @implements ISpeechRecognitionAlternative
                 * @constructor
                 * @param {anymetrica.vad.ISpeechRecognitionAlternative=} [properties] Properties to set
                 */
                function SpeechRecognitionAlternative(properties) {
                    this.words = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SpeechRecognitionAlternative transcript.
                 * @member {string} transcript
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @instance
                 */
                SpeechRecognitionAlternative.prototype.transcript = "";
    
                /**
                 * SpeechRecognitionAlternative confidence.
                 * @member {number} confidence
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @instance
                 */
                SpeechRecognitionAlternative.prototype.confidence = 0;
    
                /**
                 * SpeechRecognitionAlternative words.
                 * @member {Array.<anymetrica.vad.IWordInfo>} words
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @instance
                 */
                SpeechRecognitionAlternative.prototype.words = $util.emptyArray;
    
                /**
                 * Creates a new SpeechRecognitionAlternative instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @static
                 * @param {anymetrica.vad.ISpeechRecognitionAlternative=} [properties] Properties to set
                 * @returns {anymetrica.vad.SpeechRecognitionAlternative} SpeechRecognitionAlternative instance
                 */
                SpeechRecognitionAlternative.create = function create(properties) {
                    return new SpeechRecognitionAlternative(properties);
                };
    
                /**
                 * Encodes the specified SpeechRecognitionAlternative message. Does not implicitly {@link anymetrica.vad.SpeechRecognitionAlternative.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @static
                 * @param {anymetrica.vad.ISpeechRecognitionAlternative} message SpeechRecognitionAlternative message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SpeechRecognitionAlternative.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.transcript != null && message.hasOwnProperty("transcript"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.transcript);
                    if (message.confidence != null && message.hasOwnProperty("confidence"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                    if (message.words != null && message.words.length)
                        for (var i = 0; i < message.words.length; ++i)
                            $root.anymetrica.vad.WordInfo.encode(message.words[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SpeechRecognitionAlternative message, length delimited. Does not implicitly {@link anymetrica.vad.SpeechRecognitionAlternative.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @static
                 * @param {anymetrica.vad.ISpeechRecognitionAlternative} message SpeechRecognitionAlternative message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SpeechRecognitionAlternative.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SpeechRecognitionAlternative message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SpeechRecognitionAlternative.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.SpeechRecognitionAlternative();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.transcript = reader.string();
                            break;
                        case 2:
                            message.confidence = reader.float();
                            break;
                        case 3:
                            if (!(message.words && message.words.length))
                                message.words = [];
                            message.words.push($root.anymetrica.vad.WordInfo.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SpeechRecognitionAlternative message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SpeechRecognitionAlternative.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SpeechRecognitionAlternative message.
                 * @function verify
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SpeechRecognitionAlternative.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.transcript != null && message.hasOwnProperty("transcript"))
                        if (!$util.isString(message.transcript))
                            return "transcript: string expected";
                    if (message.confidence != null && message.hasOwnProperty("confidence"))
                        if (typeof message.confidence !== "number")
                            return "confidence: number expected";
                    if (message.words != null && message.hasOwnProperty("words")) {
                        if (!Array.isArray(message.words))
                            return "words: array expected";
                        for (var i = 0; i < message.words.length; ++i) {
                            var error = $root.anymetrica.vad.WordInfo.verify(message.words[i]);
                            if (error)
                                return "words." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SpeechRecognitionAlternative message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                 */
                SpeechRecognitionAlternative.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.SpeechRecognitionAlternative)
                        return object;
                    var message = new $root.anymetrica.vad.SpeechRecognitionAlternative();
                    if (object.transcript != null)
                        message.transcript = String(object.transcript);
                    if (object.confidence != null)
                        message.confidence = Number(object.confidence);
                    if (object.words) {
                        if (!Array.isArray(object.words))
                            throw TypeError(".anymetrica.vad.SpeechRecognitionAlternative.words: array expected");
                        message.words = [];
                        for (var i = 0; i < object.words.length; ++i) {
                            if (typeof object.words[i] !== "object")
                                throw TypeError(".anymetrica.vad.SpeechRecognitionAlternative.words: object expected");
                            message.words[i] = $root.anymetrica.vad.WordInfo.fromObject(object.words[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SpeechRecognitionAlternative message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @static
                 * @param {anymetrica.vad.SpeechRecognitionAlternative} message SpeechRecognitionAlternative
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SpeechRecognitionAlternative.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.words = [];
                    if (options.defaults) {
                        object.transcript = "";
                        object.confidence = 0;
                    }
                    if (message.transcript != null && message.hasOwnProperty("transcript"))
                        object.transcript = message.transcript;
                    if (message.confidence != null && message.hasOwnProperty("confidence"))
                        object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                    if (message.words && message.words.length) {
                        object.words = [];
                        for (var j = 0; j < message.words.length; ++j)
                            object.words[j] = $root.anymetrica.vad.WordInfo.toObject(message.words[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SpeechRecognitionAlternative to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.SpeechRecognitionAlternative
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SpeechRecognitionAlternative.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SpeechRecognitionAlternative;
            })();
    
            vad.WordInfo = (function() {
    
                /**
                 * Properties of a WordInfo.
                 * @memberof anymetrica.vad
                 * @interface IWordInfo
                 * @property {google.protobuf.IDuration|null} [start_time] WordInfo start_time
                 * @property {google.protobuf.IDuration|null} [end_time] WordInfo end_time
                 * @property {string|null} [word] WordInfo word
                 */
    
                /**
                 * Constructs a new WordInfo.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a WordInfo.
                 * @implements IWordInfo
                 * @constructor
                 * @param {anymetrica.vad.IWordInfo=} [properties] Properties to set
                 */
                function WordInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * WordInfo start_time.
                 * @member {google.protobuf.IDuration|null|undefined} start_time
                 * @memberof anymetrica.vad.WordInfo
                 * @instance
                 */
                WordInfo.prototype.start_time = null;
    
                /**
                 * WordInfo end_time.
                 * @member {google.protobuf.IDuration|null|undefined} end_time
                 * @memberof anymetrica.vad.WordInfo
                 * @instance
                 */
                WordInfo.prototype.end_time = null;
    
                /**
                 * WordInfo word.
                 * @member {string} word
                 * @memberof anymetrica.vad.WordInfo
                 * @instance
                 */
                WordInfo.prototype.word = "";
    
                /**
                 * Creates a new WordInfo instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.WordInfo
                 * @static
                 * @param {anymetrica.vad.IWordInfo=} [properties] Properties to set
                 * @returns {anymetrica.vad.WordInfo} WordInfo instance
                 */
                WordInfo.create = function create(properties) {
                    return new WordInfo(properties);
                };
    
                /**
                 * Encodes the specified WordInfo message. Does not implicitly {@link anymetrica.vad.WordInfo.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.WordInfo
                 * @static
                 * @param {anymetrica.vad.IWordInfo} message WordInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WordInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start_time != null && message.hasOwnProperty("start_time"))
                        $root.google.protobuf.Duration.encode(message.start_time, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.end_time != null && message.hasOwnProperty("end_time"))
                        $root.google.protobuf.Duration.encode(message.end_time, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.word != null && message.hasOwnProperty("word"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.word);
                    return writer;
                };
    
                /**
                 * Encodes the specified WordInfo message, length delimited. Does not implicitly {@link anymetrica.vad.WordInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.WordInfo
                 * @static
                 * @param {anymetrica.vad.IWordInfo} message WordInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WordInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a WordInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.WordInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.WordInfo} WordInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WordInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.WordInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start_time = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.end_time = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.word = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a WordInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.WordInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.WordInfo} WordInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WordInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a WordInfo message.
                 * @function verify
                 * @memberof anymetrica.vad.WordInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                WordInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start_time != null && message.hasOwnProperty("start_time")) {
                        var error = $root.google.protobuf.Duration.verify(message.start_time);
                        if (error)
                            return "start_time." + error;
                    }
                    if (message.end_time != null && message.hasOwnProperty("end_time")) {
                        var error = $root.google.protobuf.Duration.verify(message.end_time);
                        if (error)
                            return "end_time." + error;
                    }
                    if (message.word != null && message.hasOwnProperty("word"))
                        if (!$util.isString(message.word))
                            return "word: string expected";
                    return null;
                };
    
                /**
                 * Creates a WordInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.WordInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.WordInfo} WordInfo
                 */
                WordInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.WordInfo)
                        return object;
                    var message = new $root.anymetrica.vad.WordInfo();
                    if (object.start_time != null) {
                        if (typeof object.start_time !== "object")
                            throw TypeError(".anymetrica.vad.WordInfo.start_time: object expected");
                        message.start_time = $root.google.protobuf.Duration.fromObject(object.start_time);
                    }
                    if (object.end_time != null) {
                        if (typeof object.end_time !== "object")
                            throw TypeError(".anymetrica.vad.WordInfo.end_time: object expected");
                        message.end_time = $root.google.protobuf.Duration.fromObject(object.end_time);
                    }
                    if (object.word != null)
                        message.word = String(object.word);
                    return message;
                };
    
                /**
                 * Creates a plain object from a WordInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.WordInfo
                 * @static
                 * @param {anymetrica.vad.WordInfo} message WordInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                WordInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start_time = null;
                        object.end_time = null;
                        object.word = "";
                    }
                    if (message.start_time != null && message.hasOwnProperty("start_time"))
                        object.start_time = $root.google.protobuf.Duration.toObject(message.start_time, options);
                    if (message.end_time != null && message.hasOwnProperty("end_time"))
                        object.end_time = $root.google.protobuf.Duration.toObject(message.end_time, options);
                    if (message.word != null && message.hasOwnProperty("word"))
                        object.word = message.word;
                    return object;
                };
    
                /**
                 * Converts this WordInfo to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.WordInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                WordInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return WordInfo;
            })();
    
            vad.RecognizeRequest = (function() {
    
                /**
                 * Properties of a RecognizeRequest.
                 * @memberof anymetrica.vad
                 * @interface IRecognizeRequest
                 * @property {anymetrica.vad.IRecognitionConfig|null} [config] RecognizeRequest config
                 * @property {anymetrica.vad.IRecognitionAudio|null} [audio] RecognizeRequest audio
                 * @property {anymetrica.vad.IRecognitionAudio|null} [file] RecognizeRequest file
                 */
    
                /**
                 * Constructs a new RecognizeRequest.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a RecognizeRequest.
                 * @implements IRecognizeRequest
                 * @constructor
                 * @param {anymetrica.vad.IRecognizeRequest=} [properties] Properties to set
                 */
                function RecognizeRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RecognizeRequest config.
                 * @member {anymetrica.vad.IRecognitionConfig|null|undefined} config
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @instance
                 */
                RecognizeRequest.prototype.config = null;
    
                /**
                 * RecognizeRequest audio.
                 * @member {anymetrica.vad.IRecognitionAudio|null|undefined} audio
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @instance
                 */
                RecognizeRequest.prototype.audio = null;
    
                /**
                 * RecognizeRequest file.
                 * @member {anymetrica.vad.IRecognitionAudio|null|undefined} file
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @instance
                 */
                RecognizeRequest.prototype.file = null;
    
                /**
                 * Creates a new RecognizeRequest instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @static
                 * @param {anymetrica.vad.IRecognizeRequest=} [properties] Properties to set
                 * @returns {anymetrica.vad.RecognizeRequest} RecognizeRequest instance
                 */
                RecognizeRequest.create = function create(properties) {
                    return new RecognizeRequest(properties);
                };
    
                /**
                 * Encodes the specified RecognizeRequest message. Does not implicitly {@link anymetrica.vad.RecognizeRequest.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @static
                 * @param {anymetrica.vad.IRecognizeRequest} message RecognizeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognizeRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.config != null && message.hasOwnProperty("config"))
                        $root.anymetrica.vad.RecognitionConfig.encode(message.config, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.audio != null && message.hasOwnProperty("audio"))
                        $root.anymetrica.vad.RecognitionAudio.encode(message.audio, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.file != null && message.hasOwnProperty("file"))
                        $root.anymetrica.vad.RecognitionAudio.encode(message.file, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RecognizeRequest message, length delimited. Does not implicitly {@link anymetrica.vad.RecognizeRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @static
                 * @param {anymetrica.vad.IRecognizeRequest} message RecognizeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecognizeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RecognizeRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.RecognizeRequest} RecognizeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognizeRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.RecognizeRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.config = $root.anymetrica.vad.RecognitionConfig.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.audio = $root.anymetrica.vad.RecognitionAudio.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.file = $root.anymetrica.vad.RecognitionAudio.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RecognizeRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.RecognizeRequest} RecognizeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecognizeRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RecognizeRequest message.
                 * @function verify
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RecognizeRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.config != null && message.hasOwnProperty("config")) {
                        var error = $root.anymetrica.vad.RecognitionConfig.verify(message.config);
                        if (error)
                            return "config." + error;
                    }
                    if (message.audio != null && message.hasOwnProperty("audio")) {
                        var error = $root.anymetrica.vad.RecognitionAudio.verify(message.audio);
                        if (error)
                            return "audio." + error;
                    }
                    if (message.file != null && message.hasOwnProperty("file")) {
                        var error = $root.anymetrica.vad.RecognitionAudio.verify(message.file);
                        if (error)
                            return "file." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a RecognizeRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.RecognizeRequest} RecognizeRequest
                 */
                RecognizeRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.RecognizeRequest)
                        return object;
                    var message = new $root.anymetrica.vad.RecognizeRequest();
                    if (object.config != null) {
                        if (typeof object.config !== "object")
                            throw TypeError(".anymetrica.vad.RecognizeRequest.config: object expected");
                        message.config = $root.anymetrica.vad.RecognitionConfig.fromObject(object.config);
                    }
                    if (object.audio != null) {
                        if (typeof object.audio !== "object")
                            throw TypeError(".anymetrica.vad.RecognizeRequest.audio: object expected");
                        message.audio = $root.anymetrica.vad.RecognitionAudio.fromObject(object.audio);
                    }
                    if (object.file != null) {
                        if (typeof object.file !== "object")
                            throw TypeError(".anymetrica.vad.RecognizeRequest.file: object expected");
                        message.file = $root.anymetrica.vad.RecognitionAudio.fromObject(object.file);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RecognizeRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @static
                 * @param {anymetrica.vad.RecognizeRequest} message RecognizeRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RecognizeRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.config = null;
                        object.audio = null;
                        object.file = null;
                    }
                    if (message.config != null && message.hasOwnProperty("config"))
                        object.config = $root.anymetrica.vad.RecognitionConfig.toObject(message.config, options);
                    if (message.audio != null && message.hasOwnProperty("audio"))
                        object.audio = $root.anymetrica.vad.RecognitionAudio.toObject(message.audio, options);
                    if (message.file != null && message.hasOwnProperty("file"))
                        object.file = $root.anymetrica.vad.RecognitionAudio.toObject(message.file, options);
                    return object;
                };
    
                /**
                 * Converts this RecognizeRequest to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.RecognizeRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RecognizeRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RecognizeRequest;
            })();
    
            /**
             * VadEventType enum.
             * @name anymetrica.vad.VadEventType
             * @enum {string}
             * @property {number} VAD_EVENT_UNSPECIFIED=0 VAD_EVENT_UNSPECIFIED value
             * @property {number} VAD_EVENT_SILENCE=2 VAD_EVENT_SILENCE value
             * @property {number} VAD_EVENT_NOISE=4 VAD_EVENT_NOISE value
             * @property {number} VAD_EVENT_VOICE=8 VAD_EVENT_VOICE value
             * @property {number} VAD_EVENT_VOICE_MULTI=16 VAD_EVENT_VOICE_MULTI value
             */
            vad.VadEventType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "VAD_EVENT_UNSPECIFIED"] = 0;
                values[valuesById[2] = "VAD_EVENT_SILENCE"] = 2;
                values[valuesById[4] = "VAD_EVENT_NOISE"] = 4;
                values[valuesById[8] = "VAD_EVENT_VOICE"] = 8;
                values[valuesById[16] = "VAD_EVENT_VOICE_MULTI"] = 16;
                return values;
            })();
    
            vad.VadRequest = (function() {
    
                /**
                 * Properties of a VadRequest.
                 * @memberof anymetrica.vad
                 * @interface IVadRequest
                 * @property {anymetrica.vad.IRecognitionConfig|null} [config] VadRequest config
                 * @property {anymetrica.vad.IRecognitionAudio|null} [audio] VadRequest audio
                 * @property {anymetrica.file.IFile|null} [file] VadRequest file
                 * @property {google.protobuf.IDuration|null} [frame_duration] VadRequest frame_duration
                 * @property {google.protobuf.IDuration|null} [padding_duration] VadRequest padding_duration
                 */
    
                /**
                 * Constructs a new VadRequest.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a VadRequest.
                 * @implements IVadRequest
                 * @constructor
                 * @param {anymetrica.vad.IVadRequest=} [properties] Properties to set
                 */
                function VadRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * VadRequest config.
                 * @member {anymetrica.vad.IRecognitionConfig|null|undefined} config
                 * @memberof anymetrica.vad.VadRequest
                 * @instance
                 */
                VadRequest.prototype.config = null;
    
                /**
                 * VadRequest audio.
                 * @member {anymetrica.vad.IRecognitionAudio|null|undefined} audio
                 * @memberof anymetrica.vad.VadRequest
                 * @instance
                 */
                VadRequest.prototype.audio = null;
    
                /**
                 * VadRequest file.
                 * @member {anymetrica.file.IFile|null|undefined} file
                 * @memberof anymetrica.vad.VadRequest
                 * @instance
                 */
                VadRequest.prototype.file = null;
    
                /**
                 * VadRequest frame_duration.
                 * @member {google.protobuf.IDuration|null|undefined} frame_duration
                 * @memberof anymetrica.vad.VadRequest
                 * @instance
                 */
                VadRequest.prototype.frame_duration = null;
    
                /**
                 * VadRequest padding_duration.
                 * @member {google.protobuf.IDuration|null|undefined} padding_duration
                 * @memberof anymetrica.vad.VadRequest
                 * @instance
                 */
                VadRequest.prototype.padding_duration = null;
    
                /**
                 * Creates a new VadRequest instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.VadRequest
                 * @static
                 * @param {anymetrica.vad.IVadRequest=} [properties] Properties to set
                 * @returns {anymetrica.vad.VadRequest} VadRequest instance
                 */
                VadRequest.create = function create(properties) {
                    return new VadRequest(properties);
                };
    
                /**
                 * Encodes the specified VadRequest message. Does not implicitly {@link anymetrica.vad.VadRequest.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.VadRequest
                 * @static
                 * @param {anymetrica.vad.IVadRequest} message VadRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VadRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.config != null && message.hasOwnProperty("config"))
                        $root.anymetrica.vad.RecognitionConfig.encode(message.config, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.audio != null && message.hasOwnProperty("audio"))
                        $root.anymetrica.vad.RecognitionAudio.encode(message.audio, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.file != null && message.hasOwnProperty("file"))
                        $root.anymetrica.file.File.encode(message.file, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.frame_duration != null && message.hasOwnProperty("frame_duration"))
                        $root.google.protobuf.Duration.encode(message.frame_duration, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                    if (message.padding_duration != null && message.hasOwnProperty("padding_duration"))
                        $root.google.protobuf.Duration.encode(message.padding_duration, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified VadRequest message, length delimited. Does not implicitly {@link anymetrica.vad.VadRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.VadRequest
                 * @static
                 * @param {anymetrica.vad.IVadRequest} message VadRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VadRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a VadRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.VadRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.VadRequest} VadRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VadRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.VadRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.config = $root.anymetrica.vad.RecognitionConfig.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.audio = $root.anymetrica.vad.RecognitionAudio.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.file = $root.anymetrica.file.File.decode(reader, reader.uint32());
                            break;
                        case 16:
                            message.frame_duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        case 18:
                            message.padding_duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a VadRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.VadRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.VadRequest} VadRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VadRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a VadRequest message.
                 * @function verify
                 * @memberof anymetrica.vad.VadRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VadRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.config != null && message.hasOwnProperty("config")) {
                        var error = $root.anymetrica.vad.RecognitionConfig.verify(message.config);
                        if (error)
                            return "config." + error;
                    }
                    if (message.audio != null && message.hasOwnProperty("audio")) {
                        var error = $root.anymetrica.vad.RecognitionAudio.verify(message.audio);
                        if (error)
                            return "audio." + error;
                    }
                    if (message.file != null && message.hasOwnProperty("file")) {
                        var error = $root.anymetrica.file.File.verify(message.file);
                        if (error)
                            return "file." + error;
                    }
                    if (message.frame_duration != null && message.hasOwnProperty("frame_duration")) {
                        var error = $root.google.protobuf.Duration.verify(message.frame_duration);
                        if (error)
                            return "frame_duration." + error;
                    }
                    if (message.padding_duration != null && message.hasOwnProperty("padding_duration")) {
                        var error = $root.google.protobuf.Duration.verify(message.padding_duration);
                        if (error)
                            return "padding_duration." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a VadRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.VadRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.VadRequest} VadRequest
                 */
                VadRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.VadRequest)
                        return object;
                    var message = new $root.anymetrica.vad.VadRequest();
                    if (object.config != null) {
                        if (typeof object.config !== "object")
                            throw TypeError(".anymetrica.vad.VadRequest.config: object expected");
                        message.config = $root.anymetrica.vad.RecognitionConfig.fromObject(object.config);
                    }
                    if (object.audio != null) {
                        if (typeof object.audio !== "object")
                            throw TypeError(".anymetrica.vad.VadRequest.audio: object expected");
                        message.audio = $root.anymetrica.vad.RecognitionAudio.fromObject(object.audio);
                    }
                    if (object.file != null) {
                        if (typeof object.file !== "object")
                            throw TypeError(".anymetrica.vad.VadRequest.file: object expected");
                        message.file = $root.anymetrica.file.File.fromObject(object.file);
                    }
                    if (object.frame_duration != null) {
                        if (typeof object.frame_duration !== "object")
                            throw TypeError(".anymetrica.vad.VadRequest.frame_duration: object expected");
                        message.frame_duration = $root.google.protobuf.Duration.fromObject(object.frame_duration);
                    }
                    if (object.padding_duration != null) {
                        if (typeof object.padding_duration !== "object")
                            throw TypeError(".anymetrica.vad.VadRequest.padding_duration: object expected");
                        message.padding_duration = $root.google.protobuf.Duration.fromObject(object.padding_duration);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a VadRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.VadRequest
                 * @static
                 * @param {anymetrica.vad.VadRequest} message VadRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VadRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.config = null;
                        object.audio = null;
                        object.file = null;
                        object.frame_duration = null;
                        object.padding_duration = null;
                    }
                    if (message.config != null && message.hasOwnProperty("config"))
                        object.config = $root.anymetrica.vad.RecognitionConfig.toObject(message.config, options);
                    if (message.audio != null && message.hasOwnProperty("audio"))
                        object.audio = $root.anymetrica.vad.RecognitionAudio.toObject(message.audio, options);
                    if (message.file != null && message.hasOwnProperty("file"))
                        object.file = $root.anymetrica.file.File.toObject(message.file, options);
                    if (message.frame_duration != null && message.hasOwnProperty("frame_duration"))
                        object.frame_duration = $root.google.protobuf.Duration.toObject(message.frame_duration, options);
                    if (message.padding_duration != null && message.hasOwnProperty("padding_duration"))
                        object.padding_duration = $root.google.protobuf.Duration.toObject(message.padding_duration, options);
                    return object;
                };
    
                /**
                 * Converts this VadRequest to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.VadRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VadRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return VadRequest;
            })();
    
            vad.VadEvent = (function() {
    
                /**
                 * Properties of a VadEvent.
                 * @memberof anymetrica.vad
                 * @interface IVadEvent
                 * @property {anymetrica.vad.VadEventType|null} [event_type] VadEvent event_type
                 * @property {number|null} [detection_confidence] VadEvent detection_confidence
                 * @property {google.protobuf.ITimestamp|null} [start_ts] VadEvent start_ts
                 * @property {google.protobuf.ITimestamp|null} [end_ts] VadEvent end_ts
                 */
    
                /**
                 * Constructs a new VadEvent.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a VadEvent.
                 * @implements IVadEvent
                 * @constructor
                 * @param {anymetrica.vad.IVadEvent=} [properties] Properties to set
                 */
                function VadEvent(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * VadEvent event_type.
                 * @member {anymetrica.vad.VadEventType} event_type
                 * @memberof anymetrica.vad.VadEvent
                 * @instance
                 */
                VadEvent.prototype.event_type = 0;
    
                /**
                 * VadEvent detection_confidence.
                 * @member {number} detection_confidence
                 * @memberof anymetrica.vad.VadEvent
                 * @instance
                 */
                VadEvent.prototype.detection_confidence = 0;
    
                /**
                 * VadEvent start_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} start_ts
                 * @memberof anymetrica.vad.VadEvent
                 * @instance
                 */
                VadEvent.prototype.start_ts = null;
    
                /**
                 * VadEvent end_ts.
                 * @member {google.protobuf.ITimestamp|null|undefined} end_ts
                 * @memberof anymetrica.vad.VadEvent
                 * @instance
                 */
                VadEvent.prototype.end_ts = null;
    
                /**
                 * Creates a new VadEvent instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.VadEvent
                 * @static
                 * @param {anymetrica.vad.IVadEvent=} [properties] Properties to set
                 * @returns {anymetrica.vad.VadEvent} VadEvent instance
                 */
                VadEvent.create = function create(properties) {
                    return new VadEvent(properties);
                };
    
                /**
                 * Encodes the specified VadEvent message. Does not implicitly {@link anymetrica.vad.VadEvent.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.VadEvent
                 * @static
                 * @param {anymetrica.vad.IVadEvent} message VadEvent message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VadEvent.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.event_type != null && message.hasOwnProperty("event_type"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.event_type);
                    if (message.detection_confidence != null && message.hasOwnProperty("detection_confidence"))
                        writer.uint32(/* id 16, wireType 5 =*/133).float(message.detection_confidence);
                    if (message.start_ts != null && message.hasOwnProperty("start_ts"))
                        $root.google.protobuf.Timestamp.encode(message.start_ts, writer.uint32(/* id 84, wireType 2 =*/674).fork()).ldelim();
                    if (message.end_ts != null && message.hasOwnProperty("end_ts"))
                        $root.google.protobuf.Timestamp.encode(message.end_ts, writer.uint32(/* id 86, wireType 2 =*/690).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified VadEvent message, length delimited. Does not implicitly {@link anymetrica.vad.VadEvent.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.VadEvent
                 * @static
                 * @param {anymetrica.vad.IVadEvent} message VadEvent message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VadEvent.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a VadEvent message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.VadEvent
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.VadEvent} VadEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VadEvent.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.VadEvent();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 4:
                            message.event_type = reader.int32();
                            break;
                        case 16:
                            message.detection_confidence = reader.float();
                            break;
                        case 84:
                            message.start_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 86:
                            message.end_ts = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a VadEvent message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.VadEvent
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.VadEvent} VadEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VadEvent.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a VadEvent message.
                 * @function verify
                 * @memberof anymetrica.vad.VadEvent
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VadEvent.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.event_type != null && message.hasOwnProperty("event_type"))
                        switch (message.event_type) {
                        default:
                            return "event_type: enum value expected";
                        case 0:
                        case 2:
                        case 4:
                        case 8:
                        case 16:
                            break;
                        }
                    if (message.detection_confidence != null && message.hasOwnProperty("detection_confidence"))
                        if (typeof message.detection_confidence !== "number")
                            return "detection_confidence: number expected";
                    if (message.start_ts != null && message.hasOwnProperty("start_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.start_ts);
                        if (error)
                            return "start_ts." + error;
                    }
                    if (message.end_ts != null && message.hasOwnProperty("end_ts")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.end_ts);
                        if (error)
                            return "end_ts." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a VadEvent message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.VadEvent
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.VadEvent} VadEvent
                 */
                VadEvent.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.VadEvent)
                        return object;
                    var message = new $root.anymetrica.vad.VadEvent();
                    switch (object.event_type) {
                    case "VAD_EVENT_UNSPECIFIED":
                    case 0:
                        message.event_type = 0;
                        break;
                    case "VAD_EVENT_SILENCE":
                    case 2:
                        message.event_type = 2;
                        break;
                    case "VAD_EVENT_NOISE":
                    case 4:
                        message.event_type = 4;
                        break;
                    case "VAD_EVENT_VOICE":
                    case 8:
                        message.event_type = 8;
                        break;
                    case "VAD_EVENT_VOICE_MULTI":
                    case 16:
                        message.event_type = 16;
                        break;
                    }
                    if (object.detection_confidence != null)
                        message.detection_confidence = Number(object.detection_confidence);
                    if (object.start_ts != null) {
                        if (typeof object.start_ts !== "object")
                            throw TypeError(".anymetrica.vad.VadEvent.start_ts: object expected");
                        message.start_ts = $root.google.protobuf.Timestamp.fromObject(object.start_ts);
                    }
                    if (object.end_ts != null) {
                        if (typeof object.end_ts !== "object")
                            throw TypeError(".anymetrica.vad.VadEvent.end_ts: object expected");
                        message.end_ts = $root.google.protobuf.Timestamp.fromObject(object.end_ts);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a VadEvent message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.VadEvent
                 * @static
                 * @param {anymetrica.vad.VadEvent} message VadEvent
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VadEvent.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.event_type = options.enums === String ? "VAD_EVENT_UNSPECIFIED" : 0;
                        object.detection_confidence = 0;
                        object.start_ts = null;
                        object.end_ts = null;
                    }
                    if (message.event_type != null && message.hasOwnProperty("event_type"))
                        object.event_type = options.enums === String ? $root.anymetrica.vad.VadEventType[message.event_type] : message.event_type;
                    if (message.detection_confidence != null && message.hasOwnProperty("detection_confidence"))
                        object.detection_confidence = options.json && !isFinite(message.detection_confidence) ? String(message.detection_confidence) : message.detection_confidence;
                    if (message.start_ts != null && message.hasOwnProperty("start_ts"))
                        object.start_ts = $root.google.protobuf.Timestamp.toObject(message.start_ts, options);
                    if (message.end_ts != null && message.hasOwnProperty("end_ts"))
                        object.end_ts = $root.google.protobuf.Timestamp.toObject(message.end_ts, options);
                    return object;
                };
    
                /**
                 * Converts this VadEvent to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.VadEvent
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VadEvent.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return VadEvent;
            })();
    
            vad.VadResult = (function() {
    
                /**
                 * Properties of a VadResult.
                 * @memberof anymetrica.vad
                 * @interface IVadResult
                 * @property {string|null} [id] VadResult id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] VadResult metadata
                 * @property {Array.<anymetrica.vad.IVadEvent>|null} [events] VadResult events
                 * @property {google.protobuf.IDuration|null} [frame_duration] VadResult frame_duration
                 * @property {google.protobuf.IDuration|null} [padding_duration] VadResult padding_duration
                 */
    
                /**
                 * Constructs a new VadResult.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a VadResult.
                 * @implements IVadResult
                 * @constructor
                 * @param {anymetrica.vad.IVadResult=} [properties] Properties to set
                 */
                function VadResult(properties) {
                    this.events = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * VadResult id.
                 * @member {string} id
                 * @memberof anymetrica.vad.VadResult
                 * @instance
                 */
                VadResult.prototype.id = "";
    
                /**
                 * VadResult metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.vad.VadResult
                 * @instance
                 */
                VadResult.prototype.metadata = null;
    
                /**
                 * VadResult events.
                 * @member {Array.<anymetrica.vad.IVadEvent>} events
                 * @memberof anymetrica.vad.VadResult
                 * @instance
                 */
                VadResult.prototype.events = $util.emptyArray;
    
                /**
                 * VadResult frame_duration.
                 * @member {google.protobuf.IDuration|null|undefined} frame_duration
                 * @memberof anymetrica.vad.VadResult
                 * @instance
                 */
                VadResult.prototype.frame_duration = null;
    
                /**
                 * VadResult padding_duration.
                 * @member {google.protobuf.IDuration|null|undefined} padding_duration
                 * @memberof anymetrica.vad.VadResult
                 * @instance
                 */
                VadResult.prototype.padding_duration = null;
    
                /**
                 * Creates a new VadResult instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.VadResult
                 * @static
                 * @param {anymetrica.vad.IVadResult=} [properties] Properties to set
                 * @returns {anymetrica.vad.VadResult} VadResult instance
                 */
                VadResult.create = function create(properties) {
                    return new VadResult(properties);
                };
    
                /**
                 * Encodes the specified VadResult message. Does not implicitly {@link anymetrica.vad.VadResult.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.VadResult
                 * @static
                 * @param {anymetrica.vad.IVadResult} message VadResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VadResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.events != null && message.events.length)
                        for (var i = 0; i < message.events.length; ++i)
                            $root.anymetrica.vad.VadEvent.encode(message.events[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.frame_duration != null && message.hasOwnProperty("frame_duration"))
                        $root.google.protobuf.Duration.encode(message.frame_duration, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                    if (message.padding_duration != null && message.hasOwnProperty("padding_duration"))
                        $root.google.protobuf.Duration.encode(message.padding_duration, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified VadResult message, length delimited. Does not implicitly {@link anymetrica.vad.VadResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.VadResult
                 * @static
                 * @param {anymetrica.vad.IVadResult} message VadResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VadResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a VadResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.VadResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.VadResult} VadResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VadResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.VadResult();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.events && message.events.length))
                                message.events = [];
                            message.events.push($root.anymetrica.vad.VadEvent.decode(reader, reader.uint32()));
                            break;
                        case 16:
                            message.frame_duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        case 18:
                            message.padding_duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a VadResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.VadResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.VadResult} VadResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VadResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a VadResult message.
                 * @function verify
                 * @memberof anymetrica.vad.VadResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VadResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.events != null && message.hasOwnProperty("events")) {
                        if (!Array.isArray(message.events))
                            return "events: array expected";
                        for (var i = 0; i < message.events.length; ++i) {
                            var error = $root.anymetrica.vad.VadEvent.verify(message.events[i]);
                            if (error)
                                return "events." + error;
                        }
                    }
                    if (message.frame_duration != null && message.hasOwnProperty("frame_duration")) {
                        var error = $root.google.protobuf.Duration.verify(message.frame_duration);
                        if (error)
                            return "frame_duration." + error;
                    }
                    if (message.padding_duration != null && message.hasOwnProperty("padding_duration")) {
                        var error = $root.google.protobuf.Duration.verify(message.padding_duration);
                        if (error)
                            return "padding_duration." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a VadResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.VadResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.VadResult} VadResult
                 */
                VadResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.VadResult)
                        return object;
                    var message = new $root.anymetrica.vad.VadResult();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.vad.VadResult.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.events) {
                        if (!Array.isArray(object.events))
                            throw TypeError(".anymetrica.vad.VadResult.events: array expected");
                        message.events = [];
                        for (var i = 0; i < object.events.length; ++i) {
                            if (typeof object.events[i] !== "object")
                                throw TypeError(".anymetrica.vad.VadResult.events: object expected");
                            message.events[i] = $root.anymetrica.vad.VadEvent.fromObject(object.events[i]);
                        }
                    }
                    if (object.frame_duration != null) {
                        if (typeof object.frame_duration !== "object")
                            throw TypeError(".anymetrica.vad.VadResult.frame_duration: object expected");
                        message.frame_duration = $root.google.protobuf.Duration.fromObject(object.frame_duration);
                    }
                    if (object.padding_duration != null) {
                        if (typeof object.padding_duration !== "object")
                            throw TypeError(".anymetrica.vad.VadResult.padding_duration: object expected");
                        message.padding_duration = $root.google.protobuf.Duration.fromObject(object.padding_duration);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a VadResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.VadResult
                 * @static
                 * @param {anymetrica.vad.VadResult} message VadResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VadResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.events = [];
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.frame_duration = null;
                        object.padding_duration = null;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.events && message.events.length) {
                        object.events = [];
                        for (var j = 0; j < message.events.length; ++j)
                            object.events[j] = $root.anymetrica.vad.VadEvent.toObject(message.events[j], options);
                    }
                    if (message.frame_duration != null && message.hasOwnProperty("frame_duration"))
                        object.frame_duration = $root.google.protobuf.Duration.toObject(message.frame_duration, options);
                    if (message.padding_duration != null && message.hasOwnProperty("padding_duration"))
                        object.padding_duration = $root.google.protobuf.Duration.toObject(message.padding_duration, options);
                    return object;
                };
    
                /**
                 * Converts this VadResult to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.VadResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VadResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return VadResult;
            })();
    
            vad.VadResults = (function() {
    
                /**
                 * Properties of a VadResults.
                 * @memberof anymetrica.vad
                 * @interface IVadResults
                 * @property {anymetrica.request.IRequestMetadata|null} [request] VadResults request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] VadResults response
                 * @property {Array.<anymetrica.vad.IVadResult>|null} [entities] VadResults entities
                 * @property {Array.<anymetrica.vad.ISpeechRecognitionResult>|null} [speech_recognition_result] VadResults speech_recognition_result
                 */
    
                /**
                 * Constructs a new VadResults.
                 * @memberof anymetrica.vad
                 * @classdesc Represents a VadResults.
                 * @implements IVadResults
                 * @constructor
                 * @param {anymetrica.vad.IVadResults=} [properties] Properties to set
                 */
                function VadResults(properties) {
                    this.entities = [];
                    this.speech_recognition_result = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * VadResults request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.vad.VadResults
                 * @instance
                 */
                VadResults.prototype.request = null;
    
                /**
                 * VadResults response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.vad.VadResults
                 * @instance
                 */
                VadResults.prototype.response = null;
    
                /**
                 * VadResults entities.
                 * @member {Array.<anymetrica.vad.IVadResult>} entities
                 * @memberof anymetrica.vad.VadResults
                 * @instance
                 */
                VadResults.prototype.entities = $util.emptyArray;
    
                /**
                 * VadResults speech_recognition_result.
                 * @member {Array.<anymetrica.vad.ISpeechRecognitionResult>} speech_recognition_result
                 * @memberof anymetrica.vad.VadResults
                 * @instance
                 */
                VadResults.prototype.speech_recognition_result = $util.emptyArray;
    
                /**
                 * Creates a new VadResults instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vad.VadResults
                 * @static
                 * @param {anymetrica.vad.IVadResults=} [properties] Properties to set
                 * @returns {anymetrica.vad.VadResults} VadResults instance
                 */
                VadResults.create = function create(properties) {
                    return new VadResults(properties);
                };
    
                /**
                 * Encodes the specified VadResults message. Does not implicitly {@link anymetrica.vad.VadResults.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vad.VadResults
                 * @static
                 * @param {anymetrica.vad.IVadResults} message VadResults message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VadResults.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.vad.VadResult.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.speech_recognition_result != null && message.speech_recognition_result.length)
                        for (var i = 0; i < message.speech_recognition_result.length; ++i)
                            $root.anymetrica.vad.SpeechRecognitionResult.encode(message.speech_recognition_result[i], writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified VadResults message, length delimited. Does not implicitly {@link anymetrica.vad.VadResults.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vad.VadResults
                 * @static
                 * @param {anymetrica.vad.IVadResults} message VadResults message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VadResults.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a VadResults message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vad.VadResults
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vad.VadResults} VadResults
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VadResults.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vad.VadResults();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.vad.VadResult.decode(reader, reader.uint32()));
                            break;
                        case 16:
                            if (!(message.speech_recognition_result && message.speech_recognition_result.length))
                                message.speech_recognition_result = [];
                            message.speech_recognition_result.push($root.anymetrica.vad.SpeechRecognitionResult.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a VadResults message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vad.VadResults
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vad.VadResults} VadResults
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VadResults.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a VadResults message.
                 * @function verify
                 * @memberof anymetrica.vad.VadResults
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VadResults.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.vad.VadResult.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    if (message.speech_recognition_result != null && message.hasOwnProperty("speech_recognition_result")) {
                        if (!Array.isArray(message.speech_recognition_result))
                            return "speech_recognition_result: array expected";
                        for (var i = 0; i < message.speech_recognition_result.length; ++i) {
                            var error = $root.anymetrica.vad.SpeechRecognitionResult.verify(message.speech_recognition_result[i]);
                            if (error)
                                return "speech_recognition_result." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a VadResults message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vad.VadResults
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vad.VadResults} VadResults
                 */
                VadResults.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vad.VadResults)
                        return object;
                    var message = new $root.anymetrica.vad.VadResults();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.vad.VadResults.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.vad.VadResults.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.vad.VadResults.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.vad.VadResults.entities: object expected");
                            message.entities[i] = $root.anymetrica.vad.VadResult.fromObject(object.entities[i]);
                        }
                    }
                    if (object.speech_recognition_result) {
                        if (!Array.isArray(object.speech_recognition_result))
                            throw TypeError(".anymetrica.vad.VadResults.speech_recognition_result: array expected");
                        message.speech_recognition_result = [];
                        for (var i = 0; i < object.speech_recognition_result.length; ++i) {
                            if (typeof object.speech_recognition_result[i] !== "object")
                                throw TypeError(".anymetrica.vad.VadResults.speech_recognition_result: object expected");
                            message.speech_recognition_result[i] = $root.anymetrica.vad.SpeechRecognitionResult.fromObject(object.speech_recognition_result[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a VadResults message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vad.VadResults
                 * @static
                 * @param {anymetrica.vad.VadResults} message VadResults
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VadResults.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.entities = [];
                        object.speech_recognition_result = [];
                    }
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.vad.VadResult.toObject(message.entities[j], options);
                    }
                    if (message.speech_recognition_result && message.speech_recognition_result.length) {
                        object.speech_recognition_result = [];
                        for (var j = 0; j < message.speech_recognition_result.length; ++j)
                            object.speech_recognition_result[j] = $root.anymetrica.vad.SpeechRecognitionResult.toObject(message.speech_recognition_result[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this VadResults to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vad.VadResults
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VadResults.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return VadResults;
            })();
    
            return vad;
        })();
    
        anymetrica.group = (function() {
    
            /**
             * Namespace group.
             * @memberof anymetrica
             * @namespace
             */
            var group = {};
    
            group.Group = (function() {
    
                /**
                 * Properties of a Group.
                 * @memberof anymetrica.group
                 * @interface IGroup
                 * @property {string|null} [id] Group id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] Group metadata
                 * @property {string|null} [name] Group name
                 */
    
                /**
                 * Constructs a new Group.
                 * @memberof anymetrica.group
                 * @classdesc Represents a Group.
                 * @implements IGroup
                 * @constructor
                 * @param {anymetrica.group.IGroup=} [properties] Properties to set
                 */
                function Group(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Group id.
                 * @member {string} id
                 * @memberof anymetrica.group.Group
                 * @instance
                 */
                Group.prototype.id = "";
    
                /**
                 * Group metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.group.Group
                 * @instance
                 */
                Group.prototype.metadata = null;
    
                /**
                 * Group name.
                 * @member {string} name
                 * @memberof anymetrica.group.Group
                 * @instance
                 */
                Group.prototype.name = "";
    
                /**
                 * Creates a new Group instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.group.Group
                 * @static
                 * @param {anymetrica.group.IGroup=} [properties] Properties to set
                 * @returns {anymetrica.group.Group} Group instance
                 */
                Group.create = function create(properties) {
                    return new Group(properties);
                };
    
                /**
                 * Encodes the specified Group message. Does not implicitly {@link anymetrica.group.Group.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.group.Group
                 * @static
                 * @param {anymetrica.group.IGroup} message Group message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Group.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified Group message, length delimited. Does not implicitly {@link anymetrica.group.Group.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.group.Group
                 * @static
                 * @param {anymetrica.group.IGroup} message Group message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Group.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Group message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.group.Group
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.group.Group} Group
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Group.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.group.Group();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Group message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.group.Group
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.group.Group} Group
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Group.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Group message.
                 * @function verify
                 * @memberof anymetrica.group.Group
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Group.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a Group message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.group.Group
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.group.Group} Group
                 */
                Group.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.group.Group)
                        return object;
                    var message = new $root.anymetrica.group.Group();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.group.Group.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Group message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.group.Group
                 * @static
                 * @param {anymetrica.group.Group} message Group
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Group.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.name = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this Group to JSON.
                 * @function toJSON
                 * @memberof anymetrica.group.Group
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Group.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Group;
            })();
    
            group.Groups = (function() {
    
                /**
                 * Properties of a Groups.
                 * @memberof anymetrica.group
                 * @interface IGroups
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Groups request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Groups response
                 * @property {Array.<anymetrica.group.IGroup>|null} [entities] Groups entities
                 */
    
                /**
                 * Constructs a new Groups.
                 * @memberof anymetrica.group
                 * @classdesc Represents a Groups.
                 * @implements IGroups
                 * @constructor
                 * @param {anymetrica.group.IGroups=} [properties] Properties to set
                 */
                function Groups(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Groups request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.group.Groups
                 * @instance
                 */
                Groups.prototype.request = null;
    
                /**
                 * Groups response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.group.Groups
                 * @instance
                 */
                Groups.prototype.response = null;
    
                /**
                 * Groups entities.
                 * @member {Array.<anymetrica.group.IGroup>} entities
                 * @memberof anymetrica.group.Groups
                 * @instance
                 */
                Groups.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Groups instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.group.Groups
                 * @static
                 * @param {anymetrica.group.IGroups=} [properties] Properties to set
                 * @returns {anymetrica.group.Groups} Groups instance
                 */
                Groups.create = function create(properties) {
                    return new Groups(properties);
                };
    
                /**
                 * Encodes the specified Groups message. Does not implicitly {@link anymetrica.group.Groups.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.group.Groups
                 * @static
                 * @param {anymetrica.group.IGroups} message Groups message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Groups.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.group.Group.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Groups message, length delimited. Does not implicitly {@link anymetrica.group.Groups.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.group.Groups
                 * @static
                 * @param {anymetrica.group.IGroups} message Groups message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Groups.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Groups message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.group.Groups
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.group.Groups} Groups
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Groups.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.group.Groups();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.group.Group.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Groups message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.group.Groups
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.group.Groups} Groups
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Groups.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Groups message.
                 * @function verify
                 * @memberof anymetrica.group.Groups
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Groups.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.group.Group.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Groups message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.group.Groups
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.group.Groups} Groups
                 */
                Groups.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.group.Groups)
                        return object;
                    var message = new $root.anymetrica.group.Groups();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.group.Groups.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.group.Groups.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.group.Groups.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.group.Groups.entities: object expected");
                            message.entities[i] = $root.anymetrica.group.Group.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Groups message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.group.Groups
                 * @static
                 * @param {anymetrica.group.Groups} message Groups
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Groups.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.group.Group.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Groups to JSON.
                 * @function toJSON
                 * @memberof anymetrica.group.Groups
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Groups.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Groups;
            })();
    
            return group;
        })();
    
        anymetrica.human = (function() {
    
            /**
             * Namespace human.
             * @memberof anymetrica
             * @namespace
             */
            var human = {};
    
            human.Human = (function() {
    
                /**
                 * Properties of a Human.
                 * @memberof anymetrica.human
                 * @interface IHuman
                 * @property {string|null} [id] Human id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] Human metadata
                 * @property {boolean|null} [for_testing] Human for_testing
                 * @property {string|null} [full_name] Human full_name
                 * @property {string|null} [title] Human title
                 * @property {string|null} [first_name] Human first_name
                 * @property {string|null} [middle_name] Human middle_name
                 * @property {string|null} [last_name] Human last_name
                 * @property {string|null} [suffix] Human suffix
                 * @property {google.type.IDate|null} [date_of_birth] Human date_of_birth
                 */
    
                /**
                 * Constructs a new Human.
                 * @memberof anymetrica.human
                 * @classdesc Represents a Human.
                 * @implements IHuman
                 * @constructor
                 * @param {anymetrica.human.IHuman=} [properties] Properties to set
                 */
                function Human(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Human id.
                 * @member {string} id
                 * @memberof anymetrica.human.Human
                 * @instance
                 */
                Human.prototype.id = "";
    
                /**
                 * Human metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.human.Human
                 * @instance
                 */
                Human.prototype.metadata = null;
    
                /**
                 * Human for_testing.
                 * @member {boolean} for_testing
                 * @memberof anymetrica.human.Human
                 * @instance
                 */
                Human.prototype.for_testing = false;
    
                /**
                 * Human full_name.
                 * @member {string} full_name
                 * @memberof anymetrica.human.Human
                 * @instance
                 */
                Human.prototype.full_name = "";
    
                /**
                 * Human title.
                 * @member {string} title
                 * @memberof anymetrica.human.Human
                 * @instance
                 */
                Human.prototype.title = "";
    
                /**
                 * Human first_name.
                 * @member {string} first_name
                 * @memberof anymetrica.human.Human
                 * @instance
                 */
                Human.prototype.first_name = "";
    
                /**
                 * Human middle_name.
                 * @member {string} middle_name
                 * @memberof anymetrica.human.Human
                 * @instance
                 */
                Human.prototype.middle_name = "";
    
                /**
                 * Human last_name.
                 * @member {string} last_name
                 * @memberof anymetrica.human.Human
                 * @instance
                 */
                Human.prototype.last_name = "";
    
                /**
                 * Human suffix.
                 * @member {string} suffix
                 * @memberof anymetrica.human.Human
                 * @instance
                 */
                Human.prototype.suffix = "";
    
                /**
                 * Human date_of_birth.
                 * @member {google.type.IDate|null|undefined} date_of_birth
                 * @memberof anymetrica.human.Human
                 * @instance
                 */
                Human.prototype.date_of_birth = null;
    
                /**
                 * Creates a new Human instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.human.Human
                 * @static
                 * @param {anymetrica.human.IHuman=} [properties] Properties to set
                 * @returns {anymetrica.human.Human} Human instance
                 */
                Human.create = function create(properties) {
                    return new Human(properties);
                };
    
                /**
                 * Encodes the specified Human message. Does not implicitly {@link anymetrica.human.Human.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.human.Human
                 * @static
                 * @param {anymetrica.human.IHuman} message Human message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Human.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.for_testing != null && message.hasOwnProperty("for_testing"))
                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.for_testing);
                    if (message.full_name != null && message.hasOwnProperty("full_name"))
                        writer.uint32(/* id 16, wireType 2 =*/130).string(message.full_name);
                    if (message.title != null && message.hasOwnProperty("title"))
                        writer.uint32(/* id 31, wireType 2 =*/250).string(message.title);
                    if (message.first_name != null && message.hasOwnProperty("first_name"))
                        writer.uint32(/* id 32, wireType 2 =*/258).string(message.first_name);
                    if (message.middle_name != null && message.hasOwnProperty("middle_name"))
                        writer.uint32(/* id 33, wireType 2 =*/266).string(message.middle_name);
                    if (message.last_name != null && message.hasOwnProperty("last_name"))
                        writer.uint32(/* id 34, wireType 2 =*/274).string(message.last_name);
                    if (message.suffix != null && message.hasOwnProperty("suffix"))
                        writer.uint32(/* id 35, wireType 2 =*/282).string(message.suffix);
                    if (message.date_of_birth != null && message.hasOwnProperty("date_of_birth"))
                        $root.google.type.Date.encode(message.date_of_birth, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Human message, length delimited. Does not implicitly {@link anymetrica.human.Human.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.human.Human
                 * @static
                 * @param {anymetrica.human.IHuman} message Human message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Human.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Human message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.human.Human
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.human.Human} Human
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Human.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.human.Human();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.for_testing = reader.bool();
                            break;
                        case 16:
                            message.full_name = reader.string();
                            break;
                        case 31:
                            message.title = reader.string();
                            break;
                        case 32:
                            message.first_name = reader.string();
                            break;
                        case 33:
                            message.middle_name = reader.string();
                            break;
                        case 34:
                            message.last_name = reader.string();
                            break;
                        case 35:
                            message.suffix = reader.string();
                            break;
                        case 64:
                            message.date_of_birth = $root.google.type.Date.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Human message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.human.Human
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.human.Human} Human
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Human.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Human message.
                 * @function verify
                 * @memberof anymetrica.human.Human
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Human.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.for_testing != null && message.hasOwnProperty("for_testing"))
                        if (typeof message.for_testing !== "boolean")
                            return "for_testing: boolean expected";
                    if (message.full_name != null && message.hasOwnProperty("full_name"))
                        if (!$util.isString(message.full_name))
                            return "full_name: string expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.first_name != null && message.hasOwnProperty("first_name"))
                        if (!$util.isString(message.first_name))
                            return "first_name: string expected";
                    if (message.middle_name != null && message.hasOwnProperty("middle_name"))
                        if (!$util.isString(message.middle_name))
                            return "middle_name: string expected";
                    if (message.last_name != null && message.hasOwnProperty("last_name"))
                        if (!$util.isString(message.last_name))
                            return "last_name: string expected";
                    if (message.suffix != null && message.hasOwnProperty("suffix"))
                        if (!$util.isString(message.suffix))
                            return "suffix: string expected";
                    if (message.date_of_birth != null && message.hasOwnProperty("date_of_birth")) {
                        var error = $root.google.type.Date.verify(message.date_of_birth);
                        if (error)
                            return "date_of_birth." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a Human message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.human.Human
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.human.Human} Human
                 */
                Human.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.human.Human)
                        return object;
                    var message = new $root.anymetrica.human.Human();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.human.Human.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.for_testing != null)
                        message.for_testing = Boolean(object.for_testing);
                    if (object.full_name != null)
                        message.full_name = String(object.full_name);
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.first_name != null)
                        message.first_name = String(object.first_name);
                    if (object.middle_name != null)
                        message.middle_name = String(object.middle_name);
                    if (object.last_name != null)
                        message.last_name = String(object.last_name);
                    if (object.suffix != null)
                        message.suffix = String(object.suffix);
                    if (object.date_of_birth != null) {
                        if (typeof object.date_of_birth !== "object")
                            throw TypeError(".anymetrica.human.Human.date_of_birth: object expected");
                        message.date_of_birth = $root.google.type.Date.fromObject(object.date_of_birth);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Human message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.human.Human
                 * @static
                 * @param {anymetrica.human.Human} message Human
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Human.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.for_testing = false;
                        object.full_name = "";
                        object.title = "";
                        object.first_name = "";
                        object.middle_name = "";
                        object.last_name = "";
                        object.suffix = "";
                        object.date_of_birth = null;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.for_testing != null && message.hasOwnProperty("for_testing"))
                        object.for_testing = message.for_testing;
                    if (message.full_name != null && message.hasOwnProperty("full_name"))
                        object.full_name = message.full_name;
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.first_name != null && message.hasOwnProperty("first_name"))
                        object.first_name = message.first_name;
                    if (message.middle_name != null && message.hasOwnProperty("middle_name"))
                        object.middle_name = message.middle_name;
                    if (message.last_name != null && message.hasOwnProperty("last_name"))
                        object.last_name = message.last_name;
                    if (message.suffix != null && message.hasOwnProperty("suffix"))
                        object.suffix = message.suffix;
                    if (message.date_of_birth != null && message.hasOwnProperty("date_of_birth"))
                        object.date_of_birth = $root.google.type.Date.toObject(message.date_of_birth, options);
                    return object;
                };
    
                /**
                 * Converts this Human to JSON.
                 * @function toJSON
                 * @memberof anymetrica.human.Human
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Human.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Human;
            })();
    
            human.Humans = (function() {
    
                /**
                 * Properties of a Humans.
                 * @memberof anymetrica.human
                 * @interface IHumans
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Humans request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Humans response
                 * @property {Array.<anymetrica.human.IHuman>|null} [entities] Humans entities
                 */
    
                /**
                 * Constructs a new Humans.
                 * @memberof anymetrica.human
                 * @classdesc Represents a Humans.
                 * @implements IHumans
                 * @constructor
                 * @param {anymetrica.human.IHumans=} [properties] Properties to set
                 */
                function Humans(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Humans request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.human.Humans
                 * @instance
                 */
                Humans.prototype.request = null;
    
                /**
                 * Humans response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.human.Humans
                 * @instance
                 */
                Humans.prototype.response = null;
    
                /**
                 * Humans entities.
                 * @member {Array.<anymetrica.human.IHuman>} entities
                 * @memberof anymetrica.human.Humans
                 * @instance
                 */
                Humans.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Humans instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.human.Humans
                 * @static
                 * @param {anymetrica.human.IHumans=} [properties] Properties to set
                 * @returns {anymetrica.human.Humans} Humans instance
                 */
                Humans.create = function create(properties) {
                    return new Humans(properties);
                };
    
                /**
                 * Encodes the specified Humans message. Does not implicitly {@link anymetrica.human.Humans.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.human.Humans
                 * @static
                 * @param {anymetrica.human.IHumans} message Humans message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Humans.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.human.Human.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Humans message, length delimited. Does not implicitly {@link anymetrica.human.Humans.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.human.Humans
                 * @static
                 * @param {anymetrica.human.IHumans} message Humans message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Humans.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Humans message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.human.Humans
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.human.Humans} Humans
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Humans.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.human.Humans();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.human.Human.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Humans message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.human.Humans
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.human.Humans} Humans
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Humans.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Humans message.
                 * @function verify
                 * @memberof anymetrica.human.Humans
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Humans.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.human.Human.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Humans message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.human.Humans
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.human.Humans} Humans
                 */
                Humans.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.human.Humans)
                        return object;
                    var message = new $root.anymetrica.human.Humans();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.human.Humans.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.human.Humans.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.human.Humans.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.human.Humans.entities: object expected");
                            message.entities[i] = $root.anymetrica.human.Human.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Humans message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.human.Humans
                 * @static
                 * @param {anymetrica.human.Humans} message Humans
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Humans.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.human.Human.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Humans to JSON.
                 * @function toJSON
                 * @memberof anymetrica.human.Humans
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Humans.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Humans;
            })();
    
            return human;
        })();
    
        anymetrica.vehicle = (function() {
    
            /**
             * Namespace vehicle.
             * @memberof anymetrica
             * @namespace
             */
            var vehicle = {};
    
            /**
             * VehicleType enum.
             * @name anymetrica.vehicle.VehicleType
             * @enum {string}
             * @property {number} VEHICLE_UNSPECIFIED=0 VEHICLE_UNSPECIFIED value
             * @property {number} VEHICLE_OTHER=1 VEHICLE_OTHER value
             * @property {number} VEHICLE_CAR=8 VEHICLE_CAR value
             * @property {number} VEHICLE_TRUCK=9 VEHICLE_TRUCK value
             * @property {number} VEHICLE_TRAILER=10 VEHICLE_TRAILER value
             * @property {number} VEHICLE_MOTORCYCLE=32 VEHICLE_MOTORCYCLE value
             * @property {number} VEHICLE_TRACTOR=64 VEHICLE_TRACTOR value
             * @property {number} VEHICLE_WATERCRAFT_UNSPECIFIED=128 VEHICLE_WATERCRAFT_UNSPECIFIED value
             * @property {number} VEHICLE_WATERCRAFT_OTHER=129 VEHICLE_WATERCRAFT_OTHER value
             * @property {number} VEHICLE_WATERCRAFT_SHIP=140 VEHICLE_WATERCRAFT_SHIP value
             * @property {number} VEHICLE_WATERCRAFT_BOAT=141 VEHICLE_WATERCRAFT_BOAT value
             * @property {number} VEHICLE_AIRCRAFT_UNSPECIFIED=192 VEHICLE_AIRCRAFT_UNSPECIFIED value
             * @property {number} VEHICLE_AIRCRAFT_OTHER=193 VEHICLE_AIRCRAFT_OTHER value
             * @property {number} VEHICLE_AIRCRAFT_PLANE=224 VEHICLE_AIRCRAFT_PLANE value
             */
            vehicle.VehicleType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "VEHICLE_UNSPECIFIED"] = 0;
                values[valuesById[1] = "VEHICLE_OTHER"] = 1;
                values[valuesById[8] = "VEHICLE_CAR"] = 8;
                values[valuesById[9] = "VEHICLE_TRUCK"] = 9;
                values[valuesById[10] = "VEHICLE_TRAILER"] = 10;
                values[valuesById[32] = "VEHICLE_MOTORCYCLE"] = 32;
                values[valuesById[64] = "VEHICLE_TRACTOR"] = 64;
                values[valuesById[128] = "VEHICLE_WATERCRAFT_UNSPECIFIED"] = 128;
                values[valuesById[129] = "VEHICLE_WATERCRAFT_OTHER"] = 129;
                values[valuesById[140] = "VEHICLE_WATERCRAFT_SHIP"] = 140;
                values[valuesById[141] = "VEHICLE_WATERCRAFT_BOAT"] = 141;
                values[valuesById[192] = "VEHICLE_AIRCRAFT_UNSPECIFIED"] = 192;
                values[valuesById[193] = "VEHICLE_AIRCRAFT_OTHER"] = 193;
                values[valuesById[224] = "VEHICLE_AIRCRAFT_PLANE"] = 224;
                return values;
            })();
    
            vehicle.Vehicle = (function() {
    
                /**
                 * Properties of a Vehicle.
                 * @memberof anymetrica.vehicle
                 * @interface IVehicle
                 * @property {string|null} [id] Vehicle id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] Vehicle metadata
                 * @property {anymetrica.vehicle.VehicleType|null} [vehicle_type] Vehicle vehicle_type
                 * @property {boolean|null} [for_testing] Vehicle for_testing
                 */
    
                /**
                 * Constructs a new Vehicle.
                 * @memberof anymetrica.vehicle
                 * @classdesc Represents a Vehicle.
                 * @implements IVehicle
                 * @constructor
                 * @param {anymetrica.vehicle.IVehicle=} [properties] Properties to set
                 */
                function Vehicle(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Vehicle id.
                 * @member {string} id
                 * @memberof anymetrica.vehicle.Vehicle
                 * @instance
                 */
                Vehicle.prototype.id = "";
    
                /**
                 * Vehicle metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.vehicle.Vehicle
                 * @instance
                 */
                Vehicle.prototype.metadata = null;
    
                /**
                 * Vehicle vehicle_type.
                 * @member {anymetrica.vehicle.VehicleType} vehicle_type
                 * @memberof anymetrica.vehicle.Vehicle
                 * @instance
                 */
                Vehicle.prototype.vehicle_type = 0;
    
                /**
                 * Vehicle for_testing.
                 * @member {boolean} for_testing
                 * @memberof anymetrica.vehicle.Vehicle
                 * @instance
                 */
                Vehicle.prototype.for_testing = false;
    
                /**
                 * Creates a new Vehicle instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vehicle.Vehicle
                 * @static
                 * @param {anymetrica.vehicle.IVehicle=} [properties] Properties to set
                 * @returns {anymetrica.vehicle.Vehicle} Vehicle instance
                 */
                Vehicle.create = function create(properties) {
                    return new Vehicle(properties);
                };
    
                /**
                 * Encodes the specified Vehicle message. Does not implicitly {@link anymetrica.vehicle.Vehicle.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vehicle.Vehicle
                 * @static
                 * @param {anymetrica.vehicle.IVehicle} message Vehicle message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Vehicle.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.vehicle_type != null && message.hasOwnProperty("vehicle_type"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.vehicle_type);
                    if (message.for_testing != null && message.hasOwnProperty("for_testing"))
                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.for_testing);
                    return writer;
                };
    
                /**
                 * Encodes the specified Vehicle message, length delimited. Does not implicitly {@link anymetrica.vehicle.Vehicle.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vehicle.Vehicle
                 * @static
                 * @param {anymetrica.vehicle.IVehicle} message Vehicle message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Vehicle.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Vehicle message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vehicle.Vehicle
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vehicle.Vehicle} Vehicle
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Vehicle.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vehicle.Vehicle();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.vehicle_type = reader.int32();
                            break;
                        case 9:
                            message.for_testing = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Vehicle message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vehicle.Vehicle
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vehicle.Vehicle} Vehicle
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Vehicle.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Vehicle message.
                 * @function verify
                 * @memberof anymetrica.vehicle.Vehicle
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Vehicle.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.vehicle_type != null && message.hasOwnProperty("vehicle_type"))
                        switch (message.vehicle_type) {
                        default:
                            return "vehicle_type: enum value expected";
                        case 0:
                        case 1:
                        case 8:
                        case 9:
                        case 10:
                        case 32:
                        case 64:
                        case 128:
                        case 129:
                        case 140:
                        case 141:
                        case 192:
                        case 193:
                        case 224:
                            break;
                        }
                    if (message.for_testing != null && message.hasOwnProperty("for_testing"))
                        if (typeof message.for_testing !== "boolean")
                            return "for_testing: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Vehicle message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vehicle.Vehicle
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vehicle.Vehicle} Vehicle
                 */
                Vehicle.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vehicle.Vehicle)
                        return object;
                    var message = new $root.anymetrica.vehicle.Vehicle();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.vehicle.Vehicle.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    switch (object.vehicle_type) {
                    case "VEHICLE_UNSPECIFIED":
                    case 0:
                        message.vehicle_type = 0;
                        break;
                    case "VEHICLE_OTHER":
                    case 1:
                        message.vehicle_type = 1;
                        break;
                    case "VEHICLE_CAR":
                    case 8:
                        message.vehicle_type = 8;
                        break;
                    case "VEHICLE_TRUCK":
                    case 9:
                        message.vehicle_type = 9;
                        break;
                    case "VEHICLE_TRAILER":
                    case 10:
                        message.vehicle_type = 10;
                        break;
                    case "VEHICLE_MOTORCYCLE":
                    case 32:
                        message.vehicle_type = 32;
                        break;
                    case "VEHICLE_TRACTOR":
                    case 64:
                        message.vehicle_type = 64;
                        break;
                    case "VEHICLE_WATERCRAFT_UNSPECIFIED":
                    case 128:
                        message.vehicle_type = 128;
                        break;
                    case "VEHICLE_WATERCRAFT_OTHER":
                    case 129:
                        message.vehicle_type = 129;
                        break;
                    case "VEHICLE_WATERCRAFT_SHIP":
                    case 140:
                        message.vehicle_type = 140;
                        break;
                    case "VEHICLE_WATERCRAFT_BOAT":
                    case 141:
                        message.vehicle_type = 141;
                        break;
                    case "VEHICLE_AIRCRAFT_UNSPECIFIED":
                    case 192:
                        message.vehicle_type = 192;
                        break;
                    case "VEHICLE_AIRCRAFT_OTHER":
                    case 193:
                        message.vehicle_type = 193;
                        break;
                    case "VEHICLE_AIRCRAFT_PLANE":
                    case 224:
                        message.vehicle_type = 224;
                        break;
                    }
                    if (object.for_testing != null)
                        message.for_testing = Boolean(object.for_testing);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Vehicle message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vehicle.Vehicle
                 * @static
                 * @param {anymetrica.vehicle.Vehicle} message Vehicle
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Vehicle.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.vehicle_type = options.enums === String ? "VEHICLE_UNSPECIFIED" : 0;
                        object.for_testing = false;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.vehicle_type != null && message.hasOwnProperty("vehicle_type"))
                        object.vehicle_type = options.enums === String ? $root.anymetrica.vehicle.VehicleType[message.vehicle_type] : message.vehicle_type;
                    if (message.for_testing != null && message.hasOwnProperty("for_testing"))
                        object.for_testing = message.for_testing;
                    return object;
                };
    
                /**
                 * Converts this Vehicle to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vehicle.Vehicle
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Vehicle.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Vehicle;
            })();
    
            vehicle.Vehicles = (function() {
    
                /**
                 * Properties of a Vehicles.
                 * @memberof anymetrica.vehicle
                 * @interface IVehicles
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Vehicles request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Vehicles response
                 * @property {Array.<anymetrica.vehicle.IVehicle>|null} [entities] Vehicles entities
                 */
    
                /**
                 * Constructs a new Vehicles.
                 * @memberof anymetrica.vehicle
                 * @classdesc Represents a Vehicles.
                 * @implements IVehicles
                 * @constructor
                 * @param {anymetrica.vehicle.IVehicles=} [properties] Properties to set
                 */
                function Vehicles(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Vehicles request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.vehicle.Vehicles
                 * @instance
                 */
                Vehicles.prototype.request = null;
    
                /**
                 * Vehicles response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.vehicle.Vehicles
                 * @instance
                 */
                Vehicles.prototype.response = null;
    
                /**
                 * Vehicles entities.
                 * @member {Array.<anymetrica.vehicle.IVehicle>} entities
                 * @memberof anymetrica.vehicle.Vehicles
                 * @instance
                 */
                Vehicles.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Vehicles instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.vehicle.Vehicles
                 * @static
                 * @param {anymetrica.vehicle.IVehicles=} [properties] Properties to set
                 * @returns {anymetrica.vehicle.Vehicles} Vehicles instance
                 */
                Vehicles.create = function create(properties) {
                    return new Vehicles(properties);
                };
    
                /**
                 * Encodes the specified Vehicles message. Does not implicitly {@link anymetrica.vehicle.Vehicles.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.vehicle.Vehicles
                 * @static
                 * @param {anymetrica.vehicle.IVehicles} message Vehicles message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Vehicles.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.vehicle.Vehicle.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Vehicles message, length delimited. Does not implicitly {@link anymetrica.vehicle.Vehicles.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.vehicle.Vehicles
                 * @static
                 * @param {anymetrica.vehicle.IVehicles} message Vehicles message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Vehicles.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Vehicles message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.vehicle.Vehicles
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.vehicle.Vehicles} Vehicles
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Vehicles.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.vehicle.Vehicles();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.vehicle.Vehicle.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Vehicles message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.vehicle.Vehicles
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.vehicle.Vehicles} Vehicles
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Vehicles.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Vehicles message.
                 * @function verify
                 * @memberof anymetrica.vehicle.Vehicles
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Vehicles.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.vehicle.Vehicle.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Vehicles message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.vehicle.Vehicles
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.vehicle.Vehicles} Vehicles
                 */
                Vehicles.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.vehicle.Vehicles)
                        return object;
                    var message = new $root.anymetrica.vehicle.Vehicles();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.vehicle.Vehicles.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.vehicle.Vehicles.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.vehicle.Vehicles.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.vehicle.Vehicles.entities: object expected");
                            message.entities[i] = $root.anymetrica.vehicle.Vehicle.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Vehicles message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.vehicle.Vehicles
                 * @static
                 * @param {anymetrica.vehicle.Vehicles} message Vehicles
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Vehicles.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.vehicle.Vehicle.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Vehicles to JSON.
                 * @function toJSON
                 * @memberof anymetrica.vehicle.Vehicles
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Vehicles.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Vehicles;
            })();
    
            return vehicle;
        })();
    
        anymetrica.location = (function() {
    
            /**
             * Namespace location.
             * @memberof anymetrica
             * @namespace
             */
            var location = {};
    
            location.Location = (function() {
    
                /**
                 * Properties of a Location.
                 * @memberof anymetrica.location
                 * @interface ILocation
                 * @property {string|null} [id] Location id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] Location metadata
                 * @property {google.type.ILatLng|null} [geo_point_coordinates] Location geo_point_coordinates
                 * @property {number|null} [geo_rect_width_meters] Location geo_rect_width_meters
                 * @property {number|null} [geo_rect_height_meters] Location geo_rect_height_meters
                 * @property {number|null} [geo_circle_radius_meters] Location geo_circle_radius_meters
                 * @property {Array.<google.type.ILatLng>|null} [geo_poly_coordinates] Location geo_poly_coordinates
                 */
    
                /**
                 * Constructs a new Location.
                 * @memberof anymetrica.location
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {anymetrica.location.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.geo_poly_coordinates = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Location id.
                 * @member {string} id
                 * @memberof anymetrica.location.Location
                 * @instance
                 */
                Location.prototype.id = "";
    
                /**
                 * Location metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.location.Location
                 * @instance
                 */
                Location.prototype.metadata = null;
    
                /**
                 * Location geo_point_coordinates.
                 * @member {google.type.ILatLng|null|undefined} geo_point_coordinates
                 * @memberof anymetrica.location.Location
                 * @instance
                 */
                Location.prototype.geo_point_coordinates = null;
    
                /**
                 * Location geo_rect_width_meters.
                 * @member {number} geo_rect_width_meters
                 * @memberof anymetrica.location.Location
                 * @instance
                 */
                Location.prototype.geo_rect_width_meters = 0;
    
                /**
                 * Location geo_rect_height_meters.
                 * @member {number} geo_rect_height_meters
                 * @memberof anymetrica.location.Location
                 * @instance
                 */
                Location.prototype.geo_rect_height_meters = 0;
    
                /**
                 * Location geo_circle_radius_meters.
                 * @member {number} geo_circle_radius_meters
                 * @memberof anymetrica.location.Location
                 * @instance
                 */
                Location.prototype.geo_circle_radius_meters = 0;
    
                /**
                 * Location geo_poly_coordinates.
                 * @member {Array.<google.type.ILatLng>} geo_poly_coordinates
                 * @memberof anymetrica.location.Location
                 * @instance
                 */
                Location.prototype.geo_poly_coordinates = $util.emptyArray;
    
                /**
                 * Creates a new Location instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.location.Location
                 * @static
                 * @param {anymetrica.location.ILocation=} [properties] Properties to set
                 * @returns {anymetrica.location.Location} Location instance
                 */
                Location.create = function create(properties) {
                    return new Location(properties);
                };
    
                /**
                 * Encodes the specified Location message. Does not implicitly {@link anymetrica.location.Location.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.location.Location
                 * @static
                 * @param {anymetrica.location.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.geo_point_coordinates != null && message.hasOwnProperty("geo_point_coordinates"))
                        $root.google.type.LatLng.encode(message.geo_point_coordinates, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.geo_rect_width_meters != null && message.hasOwnProperty("geo_rect_width_meters"))
                        writer.uint32(/* id 16, wireType 1 =*/129).double(message.geo_rect_width_meters);
                    if (message.geo_rect_height_meters != null && message.hasOwnProperty("geo_rect_height_meters"))
                        writer.uint32(/* id 17, wireType 1 =*/137).double(message.geo_rect_height_meters);
                    if (message.geo_circle_radius_meters != null && message.hasOwnProperty("geo_circle_radius_meters"))
                        writer.uint32(/* id 18, wireType 1 =*/145).double(message.geo_circle_radius_meters);
                    if (message.geo_poly_coordinates != null && message.geo_poly_coordinates.length)
                        for (var i = 0; i < message.geo_poly_coordinates.length; ++i)
                            $root.google.type.LatLng.encode(message.geo_poly_coordinates[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link anymetrica.location.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.location.Location
                 * @static
                 * @param {anymetrica.location.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.location.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.location.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.location.Location();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.geo_point_coordinates = $root.google.type.LatLng.decode(reader, reader.uint32());
                            break;
                        case 16:
                            message.geo_rect_width_meters = reader.double();
                            break;
                        case 17:
                            message.geo_rect_height_meters = reader.double();
                            break;
                        case 18:
                            message.geo_circle_radius_meters = reader.double();
                            break;
                        case 20:
                            if (!(message.geo_poly_coordinates && message.geo_poly_coordinates.length))
                                message.geo_poly_coordinates = [];
                            message.geo_poly_coordinates.push($root.google.type.LatLng.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.location.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.location.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof anymetrica.location.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.geo_point_coordinates != null && message.hasOwnProperty("geo_point_coordinates")) {
                        var error = $root.google.type.LatLng.verify(message.geo_point_coordinates);
                        if (error)
                            return "geo_point_coordinates." + error;
                    }
                    if (message.geo_rect_width_meters != null && message.hasOwnProperty("geo_rect_width_meters"))
                        if (typeof message.geo_rect_width_meters !== "number")
                            return "geo_rect_width_meters: number expected";
                    if (message.geo_rect_height_meters != null && message.hasOwnProperty("geo_rect_height_meters"))
                        if (typeof message.geo_rect_height_meters !== "number")
                            return "geo_rect_height_meters: number expected";
                    if (message.geo_circle_radius_meters != null && message.hasOwnProperty("geo_circle_radius_meters"))
                        if (typeof message.geo_circle_radius_meters !== "number")
                            return "geo_circle_radius_meters: number expected";
                    if (message.geo_poly_coordinates != null && message.hasOwnProperty("geo_poly_coordinates")) {
                        if (!Array.isArray(message.geo_poly_coordinates))
                            return "geo_poly_coordinates: array expected";
                        for (var i = 0; i < message.geo_poly_coordinates.length; ++i) {
                            var error = $root.google.type.LatLng.verify(message.geo_poly_coordinates[i]);
                            if (error)
                                return "geo_poly_coordinates." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.location.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.location.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.location.Location)
                        return object;
                    var message = new $root.anymetrica.location.Location();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.location.Location.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.geo_point_coordinates != null) {
                        if (typeof object.geo_point_coordinates !== "object")
                            throw TypeError(".anymetrica.location.Location.geo_point_coordinates: object expected");
                        message.geo_point_coordinates = $root.google.type.LatLng.fromObject(object.geo_point_coordinates);
                    }
                    if (object.geo_rect_width_meters != null)
                        message.geo_rect_width_meters = Number(object.geo_rect_width_meters);
                    if (object.geo_rect_height_meters != null)
                        message.geo_rect_height_meters = Number(object.geo_rect_height_meters);
                    if (object.geo_circle_radius_meters != null)
                        message.geo_circle_radius_meters = Number(object.geo_circle_radius_meters);
                    if (object.geo_poly_coordinates) {
                        if (!Array.isArray(object.geo_poly_coordinates))
                            throw TypeError(".anymetrica.location.Location.geo_poly_coordinates: array expected");
                        message.geo_poly_coordinates = [];
                        for (var i = 0; i < object.geo_poly_coordinates.length; ++i) {
                            if (typeof object.geo_poly_coordinates[i] !== "object")
                                throw TypeError(".anymetrica.location.Location.geo_poly_coordinates: object expected");
                            message.geo_poly_coordinates[i] = $root.google.type.LatLng.fromObject(object.geo_poly_coordinates[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.location.Location
                 * @static
                 * @param {anymetrica.location.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.geo_poly_coordinates = [];
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.geo_point_coordinates = null;
                        object.geo_rect_width_meters = 0;
                        object.geo_rect_height_meters = 0;
                        object.geo_circle_radius_meters = 0;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.geo_point_coordinates != null && message.hasOwnProperty("geo_point_coordinates"))
                        object.geo_point_coordinates = $root.google.type.LatLng.toObject(message.geo_point_coordinates, options);
                    if (message.geo_rect_width_meters != null && message.hasOwnProperty("geo_rect_width_meters"))
                        object.geo_rect_width_meters = options.json && !isFinite(message.geo_rect_width_meters) ? String(message.geo_rect_width_meters) : message.geo_rect_width_meters;
                    if (message.geo_rect_height_meters != null && message.hasOwnProperty("geo_rect_height_meters"))
                        object.geo_rect_height_meters = options.json && !isFinite(message.geo_rect_height_meters) ? String(message.geo_rect_height_meters) : message.geo_rect_height_meters;
                    if (message.geo_circle_radius_meters != null && message.hasOwnProperty("geo_circle_radius_meters"))
                        object.geo_circle_radius_meters = options.json && !isFinite(message.geo_circle_radius_meters) ? String(message.geo_circle_radius_meters) : message.geo_circle_radius_meters;
                    if (message.geo_poly_coordinates && message.geo_poly_coordinates.length) {
                        object.geo_poly_coordinates = [];
                        for (var j = 0; j < message.geo_poly_coordinates.length; ++j)
                            object.geo_poly_coordinates[j] = $root.google.type.LatLng.toObject(message.geo_poly_coordinates[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof anymetrica.location.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Location;
            })();
    
            location.Locations = (function() {
    
                /**
                 * Properties of a Locations.
                 * @memberof anymetrica.location
                 * @interface ILocations
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Locations request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Locations response
                 * @property {Array.<anymetrica.location.ILocation>|null} [entities] Locations entities
                 */
    
                /**
                 * Constructs a new Locations.
                 * @memberof anymetrica.location
                 * @classdesc Represents a Locations.
                 * @implements ILocations
                 * @constructor
                 * @param {anymetrica.location.ILocations=} [properties] Properties to set
                 */
                function Locations(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Locations request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.location.Locations
                 * @instance
                 */
                Locations.prototype.request = null;
    
                /**
                 * Locations response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.location.Locations
                 * @instance
                 */
                Locations.prototype.response = null;
    
                /**
                 * Locations entities.
                 * @member {Array.<anymetrica.location.ILocation>} entities
                 * @memberof anymetrica.location.Locations
                 * @instance
                 */
                Locations.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Locations instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.location.Locations
                 * @static
                 * @param {anymetrica.location.ILocations=} [properties] Properties to set
                 * @returns {anymetrica.location.Locations} Locations instance
                 */
                Locations.create = function create(properties) {
                    return new Locations(properties);
                };
    
                /**
                 * Encodes the specified Locations message. Does not implicitly {@link anymetrica.location.Locations.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.location.Locations
                 * @static
                 * @param {anymetrica.location.ILocations} message Locations message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Locations.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.location.Location.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Locations message, length delimited. Does not implicitly {@link anymetrica.location.Locations.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.location.Locations
                 * @static
                 * @param {anymetrica.location.ILocations} message Locations message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Locations.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Locations message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.location.Locations
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.location.Locations} Locations
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Locations.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.location.Locations();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.location.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Locations message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.location.Locations
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.location.Locations} Locations
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Locations.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Locations message.
                 * @function verify
                 * @memberof anymetrica.location.Locations
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Locations.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.location.Location.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Locations message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.location.Locations
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.location.Locations} Locations
                 */
                Locations.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.location.Locations)
                        return object;
                    var message = new $root.anymetrica.location.Locations();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.location.Locations.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.location.Locations.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.location.Locations.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.location.Locations.entities: object expected");
                            message.entities[i] = $root.anymetrica.location.Location.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Locations message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.location.Locations
                 * @static
                 * @param {anymetrica.location.Locations} message Locations
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Locations.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.location.Location.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Locations to JSON.
                 * @function toJSON
                 * @memberof anymetrica.location.Locations
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Locations.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Locations;
            })();
    
            return location;
        })();
    
        anymetrica.postal_address = (function() {
    
            /**
             * Namespace postal_address.
             * @memberof anymetrica
             * @namespace
             */
            var postal_address = {};
    
            postal_address.PostalAddress = (function() {
    
                /**
                 * Properties of a PostalAddress.
                 * @memberof anymetrica.postal_address
                 * @interface IPostalAddress
                 * @property {string|null} [id] PostalAddress id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] PostalAddress metadata
                 * @property {number|null} [revision] PostalAddress revision
                 * @property {string|null} [region_code] PostalAddress region_code
                 * @property {string|null} [language_code] PostalAddress language_code
                 * @property {string|null} [postal_code] PostalAddress postal_code
                 * @property {string|null} [minor_postal_code] PostalAddress minor_postal_code
                 * @property {string|null} [sorting_code] PostalAddress sorting_code
                 * @property {string|null} [administrative_area] PostalAddress administrative_area
                 * @property {string|null} [locality] PostalAddress locality
                 * @property {string|null} [sublocality] PostalAddress sublocality
                 * @property {Array.<string>|null} [address_lines] PostalAddress address_lines
                 */
    
                /**
                 * Constructs a new PostalAddress.
                 * @memberof anymetrica.postal_address
                 * @classdesc Represents a PostalAddress.
                 * @implements IPostalAddress
                 * @constructor
                 * @param {anymetrica.postal_address.IPostalAddress=} [properties] Properties to set
                 */
                function PostalAddress(properties) {
                    this.address_lines = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PostalAddress id.
                 * @member {string} id
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.id = "";
    
                /**
                 * PostalAddress metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.metadata = null;
    
                /**
                 * PostalAddress revision.
                 * @member {number} revision
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.revision = 0;
    
                /**
                 * PostalAddress region_code.
                 * @member {string} region_code
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.region_code = "";
    
                /**
                 * PostalAddress language_code.
                 * @member {string} language_code
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.language_code = "";
    
                /**
                 * PostalAddress postal_code.
                 * @member {string} postal_code
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.postal_code = "";
    
                /**
                 * PostalAddress minor_postal_code.
                 * @member {string} minor_postal_code
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.minor_postal_code = "";
    
                /**
                 * PostalAddress sorting_code.
                 * @member {string} sorting_code
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.sorting_code = "";
    
                /**
                 * PostalAddress administrative_area.
                 * @member {string} administrative_area
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.administrative_area = "";
    
                /**
                 * PostalAddress locality.
                 * @member {string} locality
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.locality = "";
    
                /**
                 * PostalAddress sublocality.
                 * @member {string} sublocality
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.sublocality = "";
    
                /**
                 * PostalAddress address_lines.
                 * @member {Array.<string>} address_lines
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.address_lines = $util.emptyArray;
    
                /**
                 * Creates a new PostalAddress instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @static
                 * @param {anymetrica.postal_address.IPostalAddress=} [properties] Properties to set
                 * @returns {anymetrica.postal_address.PostalAddress} PostalAddress instance
                 */
                PostalAddress.create = function create(properties) {
                    return new PostalAddress(properties);
                };
    
                /**
                 * Encodes the specified PostalAddress message. Does not implicitly {@link anymetrica.postal_address.PostalAddress.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @static
                 * @param {anymetrica.postal_address.IPostalAddress} message PostalAddress message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PostalAddress.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.region_code != null && message.hasOwnProperty("region_code"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.region_code);
                    if (message.language_code != null && message.hasOwnProperty("language_code"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.language_code);
                    if (message.postal_code != null && message.hasOwnProperty("postal_code"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.postal_code);
                    if (message.sorting_code != null && message.hasOwnProperty("sorting_code"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.sorting_code);
                    if (message.administrative_area != null && message.hasOwnProperty("administrative_area"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.administrative_area);
                    if (message.locality != null && message.hasOwnProperty("locality"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.locality);
                    if (message.sublocality != null && message.hasOwnProperty("sublocality"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.sublocality);
                    if (message.address_lines != null && message.address_lines.length)
                        for (var i = 0; i < message.address_lines.length; ++i)
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.address_lines[i]);
                    if (message.minor_postal_code != null && message.hasOwnProperty("minor_postal_code"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.minor_postal_code);
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 101, wireType 2 =*/810).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 102, wireType 2 =*/818).fork()).ldelim();
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        writer.uint32(/* id 132, wireType 0 =*/1056).int32(message.revision);
                    return writer;
                };
    
                /**
                 * Encodes the specified PostalAddress message, length delimited. Does not implicitly {@link anymetrica.postal_address.PostalAddress.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @static
                 * @param {anymetrica.postal_address.IPostalAddress} message PostalAddress message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PostalAddress.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PostalAddress message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.postal_address.PostalAddress} PostalAddress
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PostalAddress.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.postal_address.PostalAddress();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 101:
                            message.id = reader.string();
                            break;
                        case 102:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 132:
                            message.revision = reader.int32();
                            break;
                        case 2:
                            message.region_code = reader.string();
                            break;
                        case 3:
                            message.language_code = reader.string();
                            break;
                        case 4:
                            message.postal_code = reader.string();
                            break;
                        case 12:
                            message.minor_postal_code = reader.string();
                            break;
                        case 5:
                            message.sorting_code = reader.string();
                            break;
                        case 6:
                            message.administrative_area = reader.string();
                            break;
                        case 7:
                            message.locality = reader.string();
                            break;
                        case 8:
                            message.sublocality = reader.string();
                            break;
                        case 9:
                            if (!(message.address_lines && message.address_lines.length))
                                message.address_lines = [];
                            message.address_lines.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PostalAddress message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.postal_address.PostalAddress} PostalAddress
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PostalAddress.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PostalAddress message.
                 * @function verify
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PostalAddress.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        if (!$util.isInteger(message.revision))
                            return "revision: integer expected";
                    if (message.region_code != null && message.hasOwnProperty("region_code"))
                        if (!$util.isString(message.region_code))
                            return "region_code: string expected";
                    if (message.language_code != null && message.hasOwnProperty("language_code"))
                        if (!$util.isString(message.language_code))
                            return "language_code: string expected";
                    if (message.postal_code != null && message.hasOwnProperty("postal_code"))
                        if (!$util.isString(message.postal_code))
                            return "postal_code: string expected";
                    if (message.minor_postal_code != null && message.hasOwnProperty("minor_postal_code"))
                        if (!$util.isString(message.minor_postal_code))
                            return "minor_postal_code: string expected";
                    if (message.sorting_code != null && message.hasOwnProperty("sorting_code"))
                        if (!$util.isString(message.sorting_code))
                            return "sorting_code: string expected";
                    if (message.administrative_area != null && message.hasOwnProperty("administrative_area"))
                        if (!$util.isString(message.administrative_area))
                            return "administrative_area: string expected";
                    if (message.locality != null && message.hasOwnProperty("locality"))
                        if (!$util.isString(message.locality))
                            return "locality: string expected";
                    if (message.sublocality != null && message.hasOwnProperty("sublocality"))
                        if (!$util.isString(message.sublocality))
                            return "sublocality: string expected";
                    if (message.address_lines != null && message.hasOwnProperty("address_lines")) {
                        if (!Array.isArray(message.address_lines))
                            return "address_lines: array expected";
                        for (var i = 0; i < message.address_lines.length; ++i)
                            if (!$util.isString(message.address_lines[i]))
                                return "address_lines: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a PostalAddress message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.postal_address.PostalAddress} PostalAddress
                 */
                PostalAddress.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.postal_address.PostalAddress)
                        return object;
                    var message = new $root.anymetrica.postal_address.PostalAddress();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.postal_address.PostalAddress.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.revision != null)
                        message.revision = object.revision | 0;
                    if (object.region_code != null)
                        message.region_code = String(object.region_code);
                    if (object.language_code != null)
                        message.language_code = String(object.language_code);
                    if (object.postal_code != null)
                        message.postal_code = String(object.postal_code);
                    if (object.minor_postal_code != null)
                        message.minor_postal_code = String(object.minor_postal_code);
                    if (object.sorting_code != null)
                        message.sorting_code = String(object.sorting_code);
                    if (object.administrative_area != null)
                        message.administrative_area = String(object.administrative_area);
                    if (object.locality != null)
                        message.locality = String(object.locality);
                    if (object.sublocality != null)
                        message.sublocality = String(object.sublocality);
                    if (object.address_lines) {
                        if (!Array.isArray(object.address_lines))
                            throw TypeError(".anymetrica.postal_address.PostalAddress.address_lines: array expected");
                        message.address_lines = [];
                        for (var i = 0; i < object.address_lines.length; ++i)
                            message.address_lines[i] = String(object.address_lines[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PostalAddress message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @static
                 * @param {anymetrica.postal_address.PostalAddress} message PostalAddress
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PostalAddress.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.address_lines = [];
                    if (options.defaults) {
                        object.region_code = "";
                        object.language_code = "";
                        object.postal_code = "";
                        object.sorting_code = "";
                        object.administrative_area = "";
                        object.locality = "";
                        object.sublocality = "";
                        object.minor_postal_code = "";
                        object.id = "";
                        object.metadata = null;
                        object.revision = 0;
                    }
                    if (message.region_code != null && message.hasOwnProperty("region_code"))
                        object.region_code = message.region_code;
                    if (message.language_code != null && message.hasOwnProperty("language_code"))
                        object.language_code = message.language_code;
                    if (message.postal_code != null && message.hasOwnProperty("postal_code"))
                        object.postal_code = message.postal_code;
                    if (message.sorting_code != null && message.hasOwnProperty("sorting_code"))
                        object.sorting_code = message.sorting_code;
                    if (message.administrative_area != null && message.hasOwnProperty("administrative_area"))
                        object.administrative_area = message.administrative_area;
                    if (message.locality != null && message.hasOwnProperty("locality"))
                        object.locality = message.locality;
                    if (message.sublocality != null && message.hasOwnProperty("sublocality"))
                        object.sublocality = message.sublocality;
                    if (message.address_lines && message.address_lines.length) {
                        object.address_lines = [];
                        for (var j = 0; j < message.address_lines.length; ++j)
                            object.address_lines[j] = message.address_lines[j];
                    }
                    if (message.minor_postal_code != null && message.hasOwnProperty("minor_postal_code"))
                        object.minor_postal_code = message.minor_postal_code;
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        object.revision = message.revision;
                    return object;
                };
    
                /**
                 * Converts this PostalAddress to JSON.
                 * @function toJSON
                 * @memberof anymetrica.postal_address.PostalAddress
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PostalAddress.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PostalAddress;
            })();
    
            postal_address.PostalAddresses = (function() {
    
                /**
                 * Properties of a PostalAddresses.
                 * @memberof anymetrica.postal_address
                 * @interface IPostalAddresses
                 * @property {anymetrica.request.IRequestMetadata|null} [request] PostalAddresses request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] PostalAddresses response
                 * @property {Array.<anymetrica.postal_address.IPostalAddress>|null} [entities] PostalAddresses entities
                 */
    
                /**
                 * Constructs a new PostalAddresses.
                 * @memberof anymetrica.postal_address
                 * @classdesc Represents a PostalAddresses.
                 * @implements IPostalAddresses
                 * @constructor
                 * @param {anymetrica.postal_address.IPostalAddresses=} [properties] Properties to set
                 */
                function PostalAddresses(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PostalAddresses request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @instance
                 */
                PostalAddresses.prototype.request = null;
    
                /**
                 * PostalAddresses response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @instance
                 */
                PostalAddresses.prototype.response = null;
    
                /**
                 * PostalAddresses entities.
                 * @member {Array.<anymetrica.postal_address.IPostalAddress>} entities
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @instance
                 */
                PostalAddresses.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new PostalAddresses instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @static
                 * @param {anymetrica.postal_address.IPostalAddresses=} [properties] Properties to set
                 * @returns {anymetrica.postal_address.PostalAddresses} PostalAddresses instance
                 */
                PostalAddresses.create = function create(properties) {
                    return new PostalAddresses(properties);
                };
    
                /**
                 * Encodes the specified PostalAddresses message. Does not implicitly {@link anymetrica.postal_address.PostalAddresses.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @static
                 * @param {anymetrica.postal_address.IPostalAddresses} message PostalAddresses message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PostalAddresses.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.postal_address.PostalAddress.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PostalAddresses message, length delimited. Does not implicitly {@link anymetrica.postal_address.PostalAddresses.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @static
                 * @param {anymetrica.postal_address.IPostalAddresses} message PostalAddresses message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PostalAddresses.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PostalAddresses message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.postal_address.PostalAddresses} PostalAddresses
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PostalAddresses.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.postal_address.PostalAddresses();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.postal_address.PostalAddress.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PostalAddresses message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.postal_address.PostalAddresses} PostalAddresses
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PostalAddresses.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PostalAddresses message.
                 * @function verify
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PostalAddresses.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.postal_address.PostalAddress.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a PostalAddresses message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.postal_address.PostalAddresses} PostalAddresses
                 */
                PostalAddresses.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.postal_address.PostalAddresses)
                        return object;
                    var message = new $root.anymetrica.postal_address.PostalAddresses();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.postal_address.PostalAddresses.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.postal_address.PostalAddresses.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.postal_address.PostalAddresses.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.postal_address.PostalAddresses.entities: object expected");
                            message.entities[i] = $root.anymetrica.postal_address.PostalAddress.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PostalAddresses message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @static
                 * @param {anymetrica.postal_address.PostalAddresses} message PostalAddresses
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PostalAddresses.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.postal_address.PostalAddress.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this PostalAddresses to JSON.
                 * @function toJSON
                 * @memberof anymetrica.postal_address.PostalAddresses
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PostalAddresses.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PostalAddresses;
            })();
    
            return postal_address;
        })();
    
        anymetrica.operation = (function() {
    
            /**
             * Namespace operation.
             * @memberof anymetrica
             * @namespace
             */
            var operation = {};
    
            operation.Operation = (function() {
    
                /**
                 * Properties of an Operation.
                 * @memberof anymetrica.operation
                 * @interface IOperation
                 * @property {string|null} [id] Operation id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] Operation metadata
                 * @property {boolean|null} [done] Operation done
                 * @property {google.rpc.IStatus|null} [error] Operation error
                 * @property {google.protobuf.IAny|null} [response] Operation response
                 */
    
                /**
                 * Constructs a new Operation.
                 * @memberof anymetrica.operation
                 * @classdesc Represents an Operation.
                 * @implements IOperation
                 * @constructor
                 * @param {anymetrica.operation.IOperation=} [properties] Properties to set
                 */
                function Operation(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Operation id.
                 * @member {string} id
                 * @memberof anymetrica.operation.Operation
                 * @instance
                 */
                Operation.prototype.id = "";
    
                /**
                 * Operation metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.operation.Operation
                 * @instance
                 */
                Operation.prototype.metadata = null;
    
                /**
                 * Operation done.
                 * @member {boolean} done
                 * @memberof anymetrica.operation.Operation
                 * @instance
                 */
                Operation.prototype.done = false;
    
                /**
                 * Operation error.
                 * @member {google.rpc.IStatus|null|undefined} error
                 * @memberof anymetrica.operation.Operation
                 * @instance
                 */
                Operation.prototype.error = null;
    
                /**
                 * Operation response.
                 * @member {google.protobuf.IAny|null|undefined} response
                 * @memberof anymetrica.operation.Operation
                 * @instance
                 */
                Operation.prototype.response = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Operation result.
                 * @member {"error"|"response"|undefined} result
                 * @memberof anymetrica.operation.Operation
                 * @instance
                 */
                Object.defineProperty(Operation.prototype, "result", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Operation instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.operation.Operation
                 * @static
                 * @param {anymetrica.operation.IOperation=} [properties] Properties to set
                 * @returns {anymetrica.operation.Operation} Operation instance
                 */
                Operation.create = function create(properties) {
                    return new Operation(properties);
                };
    
                /**
                 * Encodes the specified Operation message. Does not implicitly {@link anymetrica.operation.Operation.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.operation.Operation
                 * @static
                 * @param {anymetrica.operation.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.done != null && message.hasOwnProperty("done"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.done);
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.google.protobuf.Any.encode(message.response, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Operation message, length delimited. Does not implicitly {@link anymetrica.operation.Operation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.operation.Operation
                 * @static
                 * @param {anymetrica.operation.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.operation.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.operation.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.operation.Operation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.done = reader.bool();
                            break;
                        case 4:
                            message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.response = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.operation.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.operation.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Operation message.
                 * @function verify
                 * @memberof anymetrica.operation.Operation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Operation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.done != null && message.hasOwnProperty("done"))
                        if (typeof message.done !== "boolean")
                            return "done: boolean expected";
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.result = 1;
                        {
                            var error = $root.google.rpc.Status.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        if (properties.result === 1)
                            return "result: multiple values";
                        properties.result = 1;
                        {
                            var error = $root.google.protobuf.Any.verify(message.response);
                            if (error)
                                return "response." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Operation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.operation.Operation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.operation.Operation} Operation
                 */
                Operation.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.operation.Operation)
                        return object;
                    var message = new $root.anymetrica.operation.Operation();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.operation.Operation.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.done != null)
                        message.done = Boolean(object.done);
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".anymetrica.operation.Operation.error: object expected");
                        message.error = $root.google.rpc.Status.fromObject(object.error);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.operation.Operation.response: object expected");
                        message.response = $root.google.protobuf.Any.fromObject(object.response);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Operation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.operation.Operation
                 * @static
                 * @param {anymetrica.operation.Operation} message Operation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Operation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.done = false;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.done != null && message.hasOwnProperty("done"))
                        object.done = message.done;
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.google.rpc.Status.toObject(message.error, options);
                        if (options.oneofs)
                            object.result = "error";
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        object.response = $root.google.protobuf.Any.toObject(message.response, options);
                        if (options.oneofs)
                            object.result = "response";
                    }
                    return object;
                };
    
                /**
                 * Converts this Operation to JSON.
                 * @function toJSON
                 * @memberof anymetrica.operation.Operation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Operation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Operation;
            })();
    
            operation.Operations = (function() {
    
                /**
                 * Properties of an Operations.
                 * @memberof anymetrica.operation
                 * @interface IOperations
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Operations request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Operations response
                 * @property {Array.<anymetrica.operation.IOperation>|null} [entities] Operations entities
                 */
    
                /**
                 * Constructs a new Operations.
                 * @memberof anymetrica.operation
                 * @classdesc Represents an Operations.
                 * @implements IOperations
                 * @constructor
                 * @param {anymetrica.operation.IOperations=} [properties] Properties to set
                 */
                function Operations(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Operations request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.operation.Operations
                 * @instance
                 */
                Operations.prototype.request = null;
    
                /**
                 * Operations response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.operation.Operations
                 * @instance
                 */
                Operations.prototype.response = null;
    
                /**
                 * Operations entities.
                 * @member {Array.<anymetrica.operation.IOperation>} entities
                 * @memberof anymetrica.operation.Operations
                 * @instance
                 */
                Operations.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Operations instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.operation.Operations
                 * @static
                 * @param {anymetrica.operation.IOperations=} [properties] Properties to set
                 * @returns {anymetrica.operation.Operations} Operations instance
                 */
                Operations.create = function create(properties) {
                    return new Operations(properties);
                };
    
                /**
                 * Encodes the specified Operations message. Does not implicitly {@link anymetrica.operation.Operations.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.operation.Operations
                 * @static
                 * @param {anymetrica.operation.IOperations} message Operations message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operations.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.operation.Operation.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Operations message, length delimited. Does not implicitly {@link anymetrica.operation.Operations.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.operation.Operations
                 * @static
                 * @param {anymetrica.operation.IOperations} message Operations message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operations.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Operations message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.operation.Operations
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.operation.Operations} Operations
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operations.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.operation.Operations();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.operation.Operation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Operations message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.operation.Operations
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.operation.Operations} Operations
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operations.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Operations message.
                 * @function verify
                 * @memberof anymetrica.operation.Operations
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Operations.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.operation.Operation.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Operations message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.operation.Operations
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.operation.Operations} Operations
                 */
                Operations.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.operation.Operations)
                        return object;
                    var message = new $root.anymetrica.operation.Operations();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.operation.Operations.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.operation.Operations.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.operation.Operations.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.operation.Operations.entities: object expected");
                            message.entities[i] = $root.anymetrica.operation.Operation.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Operations message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.operation.Operations
                 * @static
                 * @param {anymetrica.operation.Operations} message Operations
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Operations.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.operation.Operation.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Operations to JSON.
                 * @function toJSON
                 * @memberof anymetrica.operation.Operations
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Operations.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Operations;
            })();
    
            return operation;
        })();
    
        anymetrica.waveform = (function() {
    
            /**
             * Namespace waveform.
             * @memberof anymetrica
             * @namespace
             */
            var waveform = {};
    
            waveform.Waveform = (function() {
    
                /**
                 * Properties of a Waveform.
                 * @memberof anymetrica.waveform
                 * @interface IWaveform
                 * @property {string|null} [id] Waveform id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] Waveform metadata
                 * @property {number|null} [version] Waveform version
                 * @property {number|null} [flags] Waveform flags
                 * @property {number|null} [sample_rate] Waveform sample_rate
                 * @property {number|null} [samples_per_pixel] Waveform samples_per_pixel
                 * @property {number|null} [length] Waveform length
                 * @property {number|null} [channels] Waveform channels
                 * @property {Uint8Array|null} [data] Waveform data
                 */
    
                /**
                 * Constructs a new Waveform.
                 * @memberof anymetrica.waveform
                 * @classdesc Represents a Waveform.
                 * @implements IWaveform
                 * @constructor
                 * @param {anymetrica.waveform.IWaveform=} [properties] Properties to set
                 */
                function Waveform(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Waveform id.
                 * @member {string} id
                 * @memberof anymetrica.waveform.Waveform
                 * @instance
                 */
                Waveform.prototype.id = "";
    
                /**
                 * Waveform metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.waveform.Waveform
                 * @instance
                 */
                Waveform.prototype.metadata = null;
    
                /**
                 * Waveform version.
                 * @member {number} version
                 * @memberof anymetrica.waveform.Waveform
                 * @instance
                 */
                Waveform.prototype.version = 0;
    
                /**
                 * Waveform flags.
                 * @member {number} flags
                 * @memberof anymetrica.waveform.Waveform
                 * @instance
                 */
                Waveform.prototype.flags = 0;
    
                /**
                 * Waveform sample_rate.
                 * @member {number} sample_rate
                 * @memberof anymetrica.waveform.Waveform
                 * @instance
                 */
                Waveform.prototype.sample_rate = 0;
    
                /**
                 * Waveform samples_per_pixel.
                 * @member {number} samples_per_pixel
                 * @memberof anymetrica.waveform.Waveform
                 * @instance
                 */
                Waveform.prototype.samples_per_pixel = 0;
    
                /**
                 * Waveform length.
                 * @member {number} length
                 * @memberof anymetrica.waveform.Waveform
                 * @instance
                 */
                Waveform.prototype.length = 0;
    
                /**
                 * Waveform channels.
                 * @member {number} channels
                 * @memberof anymetrica.waveform.Waveform
                 * @instance
                 */
                Waveform.prototype.channels = 0;
    
                /**
                 * Waveform data.
                 * @member {Uint8Array} data
                 * @memberof anymetrica.waveform.Waveform
                 * @instance
                 */
                Waveform.prototype.data = $util.newBuffer([]);
    
                /**
                 * Creates a new Waveform instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.waveform.Waveform
                 * @static
                 * @param {anymetrica.waveform.IWaveform=} [properties] Properties to set
                 * @returns {anymetrica.waveform.Waveform} Waveform instance
                 */
                Waveform.create = function create(properties) {
                    return new Waveform(properties);
                };
    
                /**
                 * Encodes the specified Waveform message. Does not implicitly {@link anymetrica.waveform.Waveform.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.waveform.Waveform
                 * @static
                 * @param {anymetrica.waveform.IWaveform} message Waveform message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Waveform.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.version != null && message.hasOwnProperty("version"))
                        writer.uint32(/* id 16, wireType 0 =*/128).int32(message.version);
                    if (message.flags != null && message.hasOwnProperty("flags"))
                        writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.flags);
                    if (message.sample_rate != null && message.hasOwnProperty("sample_rate"))
                        writer.uint32(/* id 18, wireType 0 =*/144).int32(message.sample_rate);
                    if (message.samples_per_pixel != null && message.hasOwnProperty("samples_per_pixel"))
                        writer.uint32(/* id 19, wireType 0 =*/152).int32(message.samples_per_pixel);
                    if (message.length != null && message.hasOwnProperty("length"))
                        writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.length);
                    if (message.channels != null && message.hasOwnProperty("channels"))
                        writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.channels);
                    if (message.data != null && message.hasOwnProperty("data"))
                        writer.uint32(/* id 32, wireType 2 =*/258).bytes(message.data);
                    return writer;
                };
    
                /**
                 * Encodes the specified Waveform message, length delimited. Does not implicitly {@link anymetrica.waveform.Waveform.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.waveform.Waveform
                 * @static
                 * @param {anymetrica.waveform.IWaveform} message Waveform message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Waveform.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Waveform message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.waveform.Waveform
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.waveform.Waveform} Waveform
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Waveform.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.waveform.Waveform();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 16:
                            message.version = reader.int32();
                            break;
                        case 17:
                            message.flags = reader.uint32();
                            break;
                        case 18:
                            message.sample_rate = reader.int32();
                            break;
                        case 19:
                            message.samples_per_pixel = reader.int32();
                            break;
                        case 20:
                            message.length = reader.uint32();
                            break;
                        case 21:
                            message.channels = reader.uint32();
                            break;
                        case 32:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Waveform message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.waveform.Waveform
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.waveform.Waveform} Waveform
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Waveform.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Waveform message.
                 * @function verify
                 * @memberof anymetrica.waveform.Waveform
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Waveform.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isInteger(message.version))
                            return "version: integer expected";
                    if (message.flags != null && message.hasOwnProperty("flags"))
                        if (!$util.isInteger(message.flags))
                            return "flags: integer expected";
                    if (message.sample_rate != null && message.hasOwnProperty("sample_rate"))
                        if (!$util.isInteger(message.sample_rate))
                            return "sample_rate: integer expected";
                    if (message.samples_per_pixel != null && message.hasOwnProperty("samples_per_pixel"))
                        if (!$util.isInteger(message.samples_per_pixel))
                            return "samples_per_pixel: integer expected";
                    if (message.length != null && message.hasOwnProperty("length"))
                        if (!$util.isInteger(message.length))
                            return "length: integer expected";
                    if (message.channels != null && message.hasOwnProperty("channels"))
                        if (!$util.isInteger(message.channels))
                            return "channels: integer expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a Waveform message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.waveform.Waveform
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.waveform.Waveform} Waveform
                 */
                Waveform.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.waveform.Waveform)
                        return object;
                    var message = new $root.anymetrica.waveform.Waveform();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.waveform.Waveform.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.version != null)
                        message.version = object.version | 0;
                    if (object.flags != null)
                        message.flags = object.flags >>> 0;
                    if (object.sample_rate != null)
                        message.sample_rate = object.sample_rate | 0;
                    if (object.samples_per_pixel != null)
                        message.samples_per_pixel = object.samples_per_pixel | 0;
                    if (object.length != null)
                        message.length = object.length >>> 0;
                    if (object.channels != null)
                        message.channels = object.channels >>> 0;
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Waveform message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.waveform.Waveform
                 * @static
                 * @param {anymetrica.waveform.Waveform} message Waveform
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Waveform.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.version = 0;
                        object.flags = 0;
                        object.sample_rate = 0;
                        object.samples_per_pixel = 0;
                        object.length = 0;
                        object.channels = 0;
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    if (message.flags != null && message.hasOwnProperty("flags"))
                        object.flags = message.flags;
                    if (message.sample_rate != null && message.hasOwnProperty("sample_rate"))
                        object.sample_rate = message.sample_rate;
                    if (message.samples_per_pixel != null && message.hasOwnProperty("samples_per_pixel"))
                        object.samples_per_pixel = message.samples_per_pixel;
                    if (message.length != null && message.hasOwnProperty("length"))
                        object.length = message.length;
                    if (message.channels != null && message.hasOwnProperty("channels"))
                        object.channels = message.channels;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };
    
                /**
                 * Converts this Waveform to JSON.
                 * @function toJSON
                 * @memberof anymetrica.waveform.Waveform
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Waveform.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Waveform;
            })();
    
            waveform.Waveforms = (function() {
    
                /**
                 * Properties of a Waveforms.
                 * @memberof anymetrica.waveform
                 * @interface IWaveforms
                 * @property {anymetrica.request.IRequestMetadata|null} [request] Waveforms request
                 * @property {anymetrica.request.IResponseMetadata|null} [response] Waveforms response
                 * @property {Array.<anymetrica.waveform.IWaveform>|null} [entities] Waveforms entities
                 */
    
                /**
                 * Constructs a new Waveforms.
                 * @memberof anymetrica.waveform
                 * @classdesc Represents a Waveforms.
                 * @implements IWaveforms
                 * @constructor
                 * @param {anymetrica.waveform.IWaveforms=} [properties] Properties to set
                 */
                function Waveforms(properties) {
                    this.entities = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Waveforms request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.waveform.Waveforms
                 * @instance
                 */
                Waveforms.prototype.request = null;
    
                /**
                 * Waveforms response.
                 * @member {anymetrica.request.IResponseMetadata|null|undefined} response
                 * @memberof anymetrica.waveform.Waveforms
                 * @instance
                 */
                Waveforms.prototype.response = null;
    
                /**
                 * Waveforms entities.
                 * @member {Array.<anymetrica.waveform.IWaveform>} entities
                 * @memberof anymetrica.waveform.Waveforms
                 * @instance
                 */
                Waveforms.prototype.entities = $util.emptyArray;
    
                /**
                 * Creates a new Waveforms instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.waveform.Waveforms
                 * @static
                 * @param {anymetrica.waveform.IWaveforms=} [properties] Properties to set
                 * @returns {anymetrica.waveform.Waveforms} Waveforms instance
                 */
                Waveforms.create = function create(properties) {
                    return new Waveforms(properties);
                };
    
                /**
                 * Encodes the specified Waveforms message. Does not implicitly {@link anymetrica.waveform.Waveforms.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.waveform.Waveforms
                 * @static
                 * @param {anymetrica.waveform.IWaveforms} message Waveforms message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Waveforms.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.response != null && message.hasOwnProperty("response"))
                        $root.anymetrica.request.ResponseMetadata.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.entities != null && message.entities.length)
                        for (var i = 0; i < message.entities.length; ++i)
                            $root.anymetrica.waveform.Waveform.encode(message.entities[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Waveforms message, length delimited. Does not implicitly {@link anymetrica.waveform.Waveforms.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.waveform.Waveforms
                 * @static
                 * @param {anymetrica.waveform.IWaveforms} message Waveforms message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Waveforms.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Waveforms message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.waveform.Waveforms
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.waveform.Waveforms} Waveforms
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Waveforms.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.waveform.Waveforms();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.response = $root.anymetrica.request.ResponseMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            if (!(message.entities && message.entities.length))
                                message.entities = [];
                            message.entities.push($root.anymetrica.waveform.Waveform.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Waveforms message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.waveform.Waveforms
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.waveform.Waveforms} Waveforms
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Waveforms.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Waveforms message.
                 * @function verify
                 * @memberof anymetrica.waveform.Waveforms
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Waveforms.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.anymetrica.request.ResponseMetadata.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.entities != null && message.hasOwnProperty("entities")) {
                        if (!Array.isArray(message.entities))
                            return "entities: array expected";
                        for (var i = 0; i < message.entities.length; ++i) {
                            var error = $root.anymetrica.waveform.Waveform.verify(message.entities[i]);
                            if (error)
                                return "entities." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Waveforms message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.waveform.Waveforms
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.waveform.Waveforms} Waveforms
                 */
                Waveforms.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.waveform.Waveforms)
                        return object;
                    var message = new $root.anymetrica.waveform.Waveforms();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.waveform.Waveforms.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".anymetrica.waveform.Waveforms.response: object expected");
                        message.response = $root.anymetrica.request.ResponseMetadata.fromObject(object.response);
                    }
                    if (object.entities) {
                        if (!Array.isArray(object.entities))
                            throw TypeError(".anymetrica.waveform.Waveforms.entities: array expected");
                        message.entities = [];
                        for (var i = 0; i < object.entities.length; ++i) {
                            if (typeof object.entities[i] !== "object")
                                throw TypeError(".anymetrica.waveform.Waveforms.entities: object expected");
                            message.entities[i] = $root.anymetrica.waveform.Waveform.fromObject(object.entities[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Waveforms message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.waveform.Waveforms
                 * @static
                 * @param {anymetrica.waveform.Waveforms} message Waveforms
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Waveforms.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.entities = [];
                    if (options.defaults) {
                        object.request = null;
                        object.response = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.anymetrica.request.ResponseMetadata.toObject(message.response, options);
                    if (message.entities && message.entities.length) {
                        object.entities = [];
                        for (var j = 0; j < message.entities.length; ++j)
                            object.entities[j] = $root.anymetrica.waveform.Waveform.toObject(message.entities[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Waveforms to JSON.
                 * @function toJSON
                 * @memberof anymetrica.waveform.Waveforms
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Waveforms.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Waveforms;
            })();
    
            return waveform;
        })();
    
        anymetrica.demo_request = (function() {
    
            /**
             * Namespace demo_request.
             * @memberof anymetrica
             * @namespace
             */
            var demo_request = {};
    
            demo_request.DemoRequestInfo = (function() {
    
                /**
                 * Properties of a DemoRequestInfo.
                 * @memberof anymetrica.demo_request
                 * @interface IDemoRequestInfo
                 * @property {string|null} [id] DemoRequestInfo id
                 * @property {anymetrica.metadata.IMetadata|null} [metadata] DemoRequestInfo metadata
                 * @property {string|null} [company] DemoRequestInfo company
                 * @property {string|null} [email] DemoRequestInfo email
                 * @property {string|null} [phone] DemoRequestInfo phone
                 * @property {string|null} [whoami] DemoRequestInfo whoami
                 */
    
                /**
                 * Constructs a new DemoRequestInfo.
                 * @memberof anymetrica.demo_request
                 * @classdesc Represents a DemoRequestInfo.
                 * @implements IDemoRequestInfo
                 * @constructor
                 * @param {anymetrica.demo_request.IDemoRequestInfo=} [properties] Properties to set
                 */
                function DemoRequestInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DemoRequestInfo id.
                 * @member {string} id
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @instance
                 */
                DemoRequestInfo.prototype.id = "";
    
                /**
                 * DemoRequestInfo metadata.
                 * @member {anymetrica.metadata.IMetadata|null|undefined} metadata
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @instance
                 */
                DemoRequestInfo.prototype.metadata = null;
    
                /**
                 * DemoRequestInfo company.
                 * @member {string} company
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @instance
                 */
                DemoRequestInfo.prototype.company = "";
    
                /**
                 * DemoRequestInfo email.
                 * @member {string} email
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @instance
                 */
                DemoRequestInfo.prototype.email = "";
    
                /**
                 * DemoRequestInfo phone.
                 * @member {string} phone
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @instance
                 */
                DemoRequestInfo.prototype.phone = "";
    
                /**
                 * DemoRequestInfo whoami.
                 * @member {string} whoami
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @instance
                 */
                DemoRequestInfo.prototype.whoami = "";
    
                /**
                 * Creates a new DemoRequestInfo instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @static
                 * @param {anymetrica.demo_request.IDemoRequestInfo=} [properties] Properties to set
                 * @returns {anymetrica.demo_request.DemoRequestInfo} DemoRequestInfo instance
                 */
                DemoRequestInfo.create = function create(properties) {
                    return new DemoRequestInfo(properties);
                };
    
                /**
                 * Encodes the specified DemoRequestInfo message. Does not implicitly {@link anymetrica.demo_request.DemoRequestInfo.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @static
                 * @param {anymetrica.demo_request.IDemoRequestInfo} message DemoRequestInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DemoRequestInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        $root.anymetrica.metadata.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.company != null && message.hasOwnProperty("company"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.company);
                    if (message.email != null && message.hasOwnProperty("email"))
                        writer.uint32(/* id 16, wireType 2 =*/130).string(message.email);
                    if (message.phone != null && message.hasOwnProperty("phone"))
                        writer.uint32(/* id 18, wireType 2 =*/146).string(message.phone);
                    if (message.whoami != null && message.hasOwnProperty("whoami"))
                        writer.uint32(/* id 32, wireType 2 =*/258).string(message.whoami);
                    return writer;
                };
    
                /**
                 * Encodes the specified DemoRequestInfo message, length delimited. Does not implicitly {@link anymetrica.demo_request.DemoRequestInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @static
                 * @param {anymetrica.demo_request.IDemoRequestInfo} message DemoRequestInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DemoRequestInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DemoRequestInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.demo_request.DemoRequestInfo} DemoRequestInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DemoRequestInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.demo_request.DemoRequestInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.string();
                            break;
                        case 2:
                            message.metadata = $root.anymetrica.metadata.Metadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.company = reader.string();
                            break;
                        case 16:
                            message.email = reader.string();
                            break;
                        case 18:
                            message.phone = reader.string();
                            break;
                        case 32:
                            message.whoami = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DemoRequestInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.demo_request.DemoRequestInfo} DemoRequestInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DemoRequestInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DemoRequestInfo message.
                 * @function verify
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DemoRequestInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.anymetrica.metadata.Metadata.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.company != null && message.hasOwnProperty("company"))
                        if (!$util.isString(message.company))
                            return "company: string expected";
                    if (message.email != null && message.hasOwnProperty("email"))
                        if (!$util.isString(message.email))
                            return "email: string expected";
                    if (message.phone != null && message.hasOwnProperty("phone"))
                        if (!$util.isString(message.phone))
                            return "phone: string expected";
                    if (message.whoami != null && message.hasOwnProperty("whoami"))
                        if (!$util.isString(message.whoami))
                            return "whoami: string expected";
                    return null;
                };
    
                /**
                 * Creates a DemoRequestInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.demo_request.DemoRequestInfo} DemoRequestInfo
                 */
                DemoRequestInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.demo_request.DemoRequestInfo)
                        return object;
                    var message = new $root.anymetrica.demo_request.DemoRequestInfo();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".anymetrica.demo_request.DemoRequestInfo.metadata: object expected");
                        message.metadata = $root.anymetrica.metadata.Metadata.fromObject(object.metadata);
                    }
                    if (object.company != null)
                        message.company = String(object.company);
                    if (object.email != null)
                        message.email = String(object.email);
                    if (object.phone != null)
                        message.phone = String(object.phone);
                    if (object.whoami != null)
                        message.whoami = String(object.whoami);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DemoRequestInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @static
                 * @param {anymetrica.demo_request.DemoRequestInfo} message DemoRequestInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DemoRequestInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.metadata = null;
                        object.company = "";
                        object.email = "";
                        object.phone = "";
                        object.whoami = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.anymetrica.metadata.Metadata.toObject(message.metadata, options);
                    if (message.company != null && message.hasOwnProperty("company"))
                        object.company = message.company;
                    if (message.email != null && message.hasOwnProperty("email"))
                        object.email = message.email;
                    if (message.phone != null && message.hasOwnProperty("phone"))
                        object.phone = message.phone;
                    if (message.whoami != null && message.hasOwnProperty("whoami"))
                        object.whoami = message.whoami;
                    return object;
                };
    
                /**
                 * Converts this DemoRequestInfo to JSON.
                 * @function toJSON
                 * @memberof anymetrica.demo_request.DemoRequestInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DemoRequestInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DemoRequestInfo;
            })();
    
            demo_request.DemoRequest = (function() {
    
                /**
                 * Properties of a DemoRequest.
                 * @memberof anymetrica.demo_request
                 * @interface IDemoRequest
                 * @property {anymetrica.request.IRequestMetadata|null} [request] DemoRequest request
                 * @property {anymetrica.demo_request.IDemoRequestInfo|null} [request_info] DemoRequest request_info
                 */
    
                /**
                 * Constructs a new DemoRequest.
                 * @memberof anymetrica.demo_request
                 * @classdesc Represents a DemoRequest.
                 * @implements IDemoRequest
                 * @constructor
                 * @param {anymetrica.demo_request.IDemoRequest=} [properties] Properties to set
                 */
                function DemoRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DemoRequest request.
                 * @member {anymetrica.request.IRequestMetadata|null|undefined} request
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @instance
                 */
                DemoRequest.prototype.request = null;
    
                /**
                 * DemoRequest request_info.
                 * @member {anymetrica.demo_request.IDemoRequestInfo|null|undefined} request_info
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @instance
                 */
                DemoRequest.prototype.request_info = null;
    
                /**
                 * Creates a new DemoRequest instance using the specified properties.
                 * @function create
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @static
                 * @param {anymetrica.demo_request.IDemoRequest=} [properties] Properties to set
                 * @returns {anymetrica.demo_request.DemoRequest} DemoRequest instance
                 */
                DemoRequest.create = function create(properties) {
                    return new DemoRequest(properties);
                };
    
                /**
                 * Encodes the specified DemoRequest message. Does not implicitly {@link anymetrica.demo_request.DemoRequest.verify|verify} messages.
                 * @function encode
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @static
                 * @param {anymetrica.demo_request.IDemoRequest} message DemoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DemoRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.request != null && message.hasOwnProperty("request"))
                        $root.anymetrica.request.RequestMetadata.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.request_info != null && message.hasOwnProperty("request_info"))
                        $root.anymetrica.demo_request.DemoRequestInfo.encode(message.request_info, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DemoRequest message, length delimited. Does not implicitly {@link anymetrica.demo_request.DemoRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @static
                 * @param {anymetrica.demo_request.IDemoRequest} message DemoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DemoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DemoRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {anymetrica.demo_request.DemoRequest} DemoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DemoRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.anymetrica.demo_request.DemoRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.request = $root.anymetrica.request.RequestMetadata.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.request_info = $root.anymetrica.demo_request.DemoRequestInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DemoRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {anymetrica.demo_request.DemoRequest} DemoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DemoRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DemoRequest message.
                 * @function verify
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DemoRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.request != null && message.hasOwnProperty("request")) {
                        var error = $root.anymetrica.request.RequestMetadata.verify(message.request);
                        if (error)
                            return "request." + error;
                    }
                    if (message.request_info != null && message.hasOwnProperty("request_info")) {
                        var error = $root.anymetrica.demo_request.DemoRequestInfo.verify(message.request_info);
                        if (error)
                            return "request_info." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DemoRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {anymetrica.demo_request.DemoRequest} DemoRequest
                 */
                DemoRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.anymetrica.demo_request.DemoRequest)
                        return object;
                    var message = new $root.anymetrica.demo_request.DemoRequest();
                    if (object.request != null) {
                        if (typeof object.request !== "object")
                            throw TypeError(".anymetrica.demo_request.DemoRequest.request: object expected");
                        message.request = $root.anymetrica.request.RequestMetadata.fromObject(object.request);
                    }
                    if (object.request_info != null) {
                        if (typeof object.request_info !== "object")
                            throw TypeError(".anymetrica.demo_request.DemoRequest.request_info: object expected");
                        message.request_info = $root.anymetrica.demo_request.DemoRequestInfo.fromObject(object.request_info);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DemoRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @static
                 * @param {anymetrica.demo_request.DemoRequest} message DemoRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DemoRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.request = null;
                        object.request_info = null;
                    }
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = $root.anymetrica.request.RequestMetadata.toObject(message.request, options);
                    if (message.request_info != null && message.hasOwnProperty("request_info"))
                        object.request_info = $root.anymetrica.demo_request.DemoRequestInfo.toObject(message.request_info, options);
                    return object;
                };
    
                /**
                 * Converts this DemoRequest to JSON.
                 * @function toJSON
                 * @memberof anymetrica.demo_request.DemoRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DemoRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DemoRequest;
            })();
    
            return demo_request;
        })();
    
        return anymetrica;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Timestamp;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Duration;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && message.hasOwnProperty("value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type_url = reader.string();
                            break;
                        case 2:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Any;
            })();
    
            return protobuf;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && message.hasOwnProperty("code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && message.hasOwnProperty("message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.int32();
                            break;
                        case 2:
                            message.message = reader.string();
                            break;
                        case 3:
                            if (!(message.details && message.details.length))
                                message.details = [];
                            message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Status;
            })();
    
            return rpc;
        })();
    
        google.type = (function() {
    
            /**
             * Namespace type.
             * @memberof google
             * @namespace
             */
            var type = {};
    
            type.Date = (function() {
    
                /**
                 * Properties of a Date.
                 * @memberof google.type
                 * @interface IDate
                 * @property {number|null} [year] Date year
                 * @property {number|null} [month] Date month
                 * @property {number|null} [day] Date day
                 */
    
                /**
                 * Constructs a new Date.
                 * @memberof google.type
                 * @classdesc Represents a Date.
                 * @implements IDate
                 * @constructor
                 * @param {google.type.IDate=} [properties] Properties to set
                 */
                function Date(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Date year.
                 * @member {number} year
                 * @memberof google.type.Date
                 * @instance
                 */
                Date.prototype.year = 0;
    
                /**
                 * Date month.
                 * @member {number} month
                 * @memberof google.type.Date
                 * @instance
                 */
                Date.prototype.month = 0;
    
                /**
                 * Date day.
                 * @member {number} day
                 * @memberof google.type.Date
                 * @instance
                 */
                Date.prototype.day = 0;
    
                /**
                 * Creates a new Date instance using the specified properties.
                 * @function create
                 * @memberof google.type.Date
                 * @static
                 * @param {google.type.IDate=} [properties] Properties to set
                 * @returns {google.type.Date} Date instance
                 */
                Date.create = function create(properties) {
                    return new Date(properties);
                };
    
                /**
                 * Encodes the specified Date message. Does not implicitly {@link google.type.Date.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.Date
                 * @static
                 * @param {google.type.IDate} message Date message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Date.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.year != null && message.hasOwnProperty("year"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.year);
                    if (message.month != null && message.hasOwnProperty("month"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.month);
                    if (message.day != null && message.hasOwnProperty("day"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.day);
                    return writer;
                };
    
                /**
                 * Encodes the specified Date message, length delimited. Does not implicitly {@link google.type.Date.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.Date
                 * @static
                 * @param {google.type.IDate} message Date message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Date.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Date message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.Date
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.Date} Date
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Date.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.Date();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.year = reader.int32();
                            break;
                        case 2:
                            message.month = reader.int32();
                            break;
                        case 3:
                            message.day = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Date message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.Date
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.Date} Date
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Date.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Date message.
                 * @function verify
                 * @memberof google.type.Date
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Date.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.year != null && message.hasOwnProperty("year"))
                        if (!$util.isInteger(message.year))
                            return "year: integer expected";
                    if (message.month != null && message.hasOwnProperty("month"))
                        if (!$util.isInteger(message.month))
                            return "month: integer expected";
                    if (message.day != null && message.hasOwnProperty("day"))
                        if (!$util.isInteger(message.day))
                            return "day: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Date message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.Date
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.Date} Date
                 */
                Date.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.Date)
                        return object;
                    var message = new $root.google.type.Date();
                    if (object.year != null)
                        message.year = object.year | 0;
                    if (object.month != null)
                        message.month = object.month | 0;
                    if (object.day != null)
                        message.day = object.day | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Date message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.Date
                 * @static
                 * @param {google.type.Date} message Date
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Date.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.year = 0;
                        object.month = 0;
                        object.day = 0;
                    }
                    if (message.year != null && message.hasOwnProperty("year"))
                        object.year = message.year;
                    if (message.month != null && message.hasOwnProperty("month"))
                        object.month = message.month;
                    if (message.day != null && message.hasOwnProperty("day"))
                        object.day = message.day;
                    return object;
                };
    
                /**
                 * Converts this Date to JSON.
                 * @function toJSON
                 * @memberof google.type.Date
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Date.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Date;
            })();
    
            type.LatLng = (function() {
    
                /**
                 * Properties of a LatLng.
                 * @memberof google.type
                 * @interface ILatLng
                 * @property {number|null} [latitude] LatLng latitude
                 * @property {number|null} [longitude] LatLng longitude
                 */
    
                /**
                 * Constructs a new LatLng.
                 * @memberof google.type
                 * @classdesc Represents a LatLng.
                 * @implements ILatLng
                 * @constructor
                 * @param {google.type.ILatLng=} [properties] Properties to set
                 */
                function LatLng(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * LatLng latitude.
                 * @member {number} latitude
                 * @memberof google.type.LatLng
                 * @instance
                 */
                LatLng.prototype.latitude = 0;
    
                /**
                 * LatLng longitude.
                 * @member {number} longitude
                 * @memberof google.type.LatLng
                 * @instance
                 */
                LatLng.prototype.longitude = 0;
    
                /**
                 * Creates a new LatLng instance using the specified properties.
                 * @function create
                 * @memberof google.type.LatLng
                 * @static
                 * @param {google.type.ILatLng=} [properties] Properties to set
                 * @returns {google.type.LatLng} LatLng instance
                 */
                LatLng.create = function create(properties) {
                    return new LatLng(properties);
                };
    
                /**
                 * Encodes the specified LatLng message. Does not implicitly {@link google.type.LatLng.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.LatLng
                 * @static
                 * @param {google.type.ILatLng} message LatLng message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LatLng.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.latitude != null && message.hasOwnProperty("latitude"))
                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.latitude);
                    if (message.longitude != null && message.hasOwnProperty("longitude"))
                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.longitude);
                    return writer;
                };
    
                /**
                 * Encodes the specified LatLng message, length delimited. Does not implicitly {@link google.type.LatLng.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.LatLng
                 * @static
                 * @param {google.type.ILatLng} message LatLng message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LatLng.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a LatLng message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.LatLng
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.LatLng} LatLng
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LatLng.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.LatLng();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.latitude = reader.double();
                            break;
                        case 2:
                            message.longitude = reader.double();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a LatLng message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.LatLng
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.LatLng} LatLng
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LatLng.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a LatLng message.
                 * @function verify
                 * @memberof google.type.LatLng
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LatLng.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.latitude != null && message.hasOwnProperty("latitude"))
                        if (typeof message.latitude !== "number")
                            return "latitude: number expected";
                    if (message.longitude != null && message.hasOwnProperty("longitude"))
                        if (typeof message.longitude !== "number")
                            return "longitude: number expected";
                    return null;
                };
    
                /**
                 * Creates a LatLng message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.LatLng
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.LatLng} LatLng
                 */
                LatLng.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.LatLng)
                        return object;
                    var message = new $root.google.type.LatLng();
                    if (object.latitude != null)
                        message.latitude = Number(object.latitude);
                    if (object.longitude != null)
                        message.longitude = Number(object.longitude);
                    return message;
                };
    
                /**
                 * Creates a plain object from a LatLng message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.LatLng
                 * @static
                 * @param {google.type.LatLng} message LatLng
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LatLng.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.latitude = 0;
                        object.longitude = 0;
                    }
                    if (message.latitude != null && message.hasOwnProperty("latitude"))
                        object.latitude = options.json && !isFinite(message.latitude) ? String(message.latitude) : message.latitude;
                    if (message.longitude != null && message.hasOwnProperty("longitude"))
                        object.longitude = options.json && !isFinite(message.longitude) ? String(message.longitude) : message.longitude;
                    return object;
                };
    
                /**
                 * Converts this LatLng to JSON.
                 * @function toJSON
                 * @memberof google.type.LatLng
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LatLng.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return LatLng;
            })();
    
            type.PostalAddress = (function() {
    
                /**
                 * Properties of a PostalAddress.
                 * @memberof google.type
                 * @interface IPostalAddress
                 * @property {number|null} [revision] PostalAddress revision
                 * @property {string|null} [region_code] PostalAddress region_code
                 * @property {string|null} [language_code] PostalAddress language_code
                 * @property {string|null} [postal_code] PostalAddress postal_code
                 * @property {string|null} [sorting_code] PostalAddress sorting_code
                 * @property {string|null} [administrative_area] PostalAddress administrative_area
                 * @property {string|null} [locality] PostalAddress locality
                 * @property {string|null} [sublocality] PostalAddress sublocality
                 * @property {Array.<string>|null} [address_lines] PostalAddress address_lines
                 * @property {Array.<string>|null} [recipients] PostalAddress recipients
                 * @property {string|null} [organization] PostalAddress organization
                 */
    
                /**
                 * Constructs a new PostalAddress.
                 * @memberof google.type
                 * @classdesc Represents a PostalAddress.
                 * @implements IPostalAddress
                 * @constructor
                 * @param {google.type.IPostalAddress=} [properties] Properties to set
                 */
                function PostalAddress(properties) {
                    this.address_lines = [];
                    this.recipients = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PostalAddress revision.
                 * @member {number} revision
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.revision = 0;
    
                /**
                 * PostalAddress region_code.
                 * @member {string} region_code
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.region_code = "";
    
                /**
                 * PostalAddress language_code.
                 * @member {string} language_code
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.language_code = "";
    
                /**
                 * PostalAddress postal_code.
                 * @member {string} postal_code
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.postal_code = "";
    
                /**
                 * PostalAddress sorting_code.
                 * @member {string} sorting_code
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.sorting_code = "";
    
                /**
                 * PostalAddress administrative_area.
                 * @member {string} administrative_area
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.administrative_area = "";
    
                /**
                 * PostalAddress locality.
                 * @member {string} locality
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.locality = "";
    
                /**
                 * PostalAddress sublocality.
                 * @member {string} sublocality
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.sublocality = "";
    
                /**
                 * PostalAddress address_lines.
                 * @member {Array.<string>} address_lines
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.address_lines = $util.emptyArray;
    
                /**
                 * PostalAddress recipients.
                 * @member {Array.<string>} recipients
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.recipients = $util.emptyArray;
    
                /**
                 * PostalAddress organization.
                 * @member {string} organization
                 * @memberof google.type.PostalAddress
                 * @instance
                 */
                PostalAddress.prototype.organization = "";
    
                /**
                 * Creates a new PostalAddress instance using the specified properties.
                 * @function create
                 * @memberof google.type.PostalAddress
                 * @static
                 * @param {google.type.IPostalAddress=} [properties] Properties to set
                 * @returns {google.type.PostalAddress} PostalAddress instance
                 */
                PostalAddress.create = function create(properties) {
                    return new PostalAddress(properties);
                };
    
                /**
                 * Encodes the specified PostalAddress message. Does not implicitly {@link google.type.PostalAddress.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.PostalAddress
                 * @static
                 * @param {google.type.IPostalAddress} message PostalAddress message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PostalAddress.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.revision);
                    if (message.region_code != null && message.hasOwnProperty("region_code"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.region_code);
                    if (message.language_code != null && message.hasOwnProperty("language_code"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.language_code);
                    if (message.postal_code != null && message.hasOwnProperty("postal_code"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.postal_code);
                    if (message.sorting_code != null && message.hasOwnProperty("sorting_code"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.sorting_code);
                    if (message.administrative_area != null && message.hasOwnProperty("administrative_area"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.administrative_area);
                    if (message.locality != null && message.hasOwnProperty("locality"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.locality);
                    if (message.sublocality != null && message.hasOwnProperty("sublocality"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.sublocality);
                    if (message.address_lines != null && message.address_lines.length)
                        for (var i = 0; i < message.address_lines.length; ++i)
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.address_lines[i]);
                    if (message.recipients != null && message.recipients.length)
                        for (var i = 0; i < message.recipients.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.recipients[i]);
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.organization);
                    return writer;
                };
    
                /**
                 * Encodes the specified PostalAddress message, length delimited. Does not implicitly {@link google.type.PostalAddress.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.PostalAddress
                 * @static
                 * @param {google.type.IPostalAddress} message PostalAddress message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PostalAddress.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PostalAddress message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.PostalAddress
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.PostalAddress} PostalAddress
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PostalAddress.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.PostalAddress();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.revision = reader.int32();
                            break;
                        case 2:
                            message.region_code = reader.string();
                            break;
                        case 3:
                            message.language_code = reader.string();
                            break;
                        case 4:
                            message.postal_code = reader.string();
                            break;
                        case 5:
                            message.sorting_code = reader.string();
                            break;
                        case 6:
                            message.administrative_area = reader.string();
                            break;
                        case 7:
                            message.locality = reader.string();
                            break;
                        case 8:
                            message.sublocality = reader.string();
                            break;
                        case 9:
                            if (!(message.address_lines && message.address_lines.length))
                                message.address_lines = [];
                            message.address_lines.push(reader.string());
                            break;
                        case 10:
                            if (!(message.recipients && message.recipients.length))
                                message.recipients = [];
                            message.recipients.push(reader.string());
                            break;
                        case 11:
                            message.organization = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PostalAddress message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.PostalAddress
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.PostalAddress} PostalAddress
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PostalAddress.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PostalAddress message.
                 * @function verify
                 * @memberof google.type.PostalAddress
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PostalAddress.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        if (!$util.isInteger(message.revision))
                            return "revision: integer expected";
                    if (message.region_code != null && message.hasOwnProperty("region_code"))
                        if (!$util.isString(message.region_code))
                            return "region_code: string expected";
                    if (message.language_code != null && message.hasOwnProperty("language_code"))
                        if (!$util.isString(message.language_code))
                            return "language_code: string expected";
                    if (message.postal_code != null && message.hasOwnProperty("postal_code"))
                        if (!$util.isString(message.postal_code))
                            return "postal_code: string expected";
                    if (message.sorting_code != null && message.hasOwnProperty("sorting_code"))
                        if (!$util.isString(message.sorting_code))
                            return "sorting_code: string expected";
                    if (message.administrative_area != null && message.hasOwnProperty("administrative_area"))
                        if (!$util.isString(message.administrative_area))
                            return "administrative_area: string expected";
                    if (message.locality != null && message.hasOwnProperty("locality"))
                        if (!$util.isString(message.locality))
                            return "locality: string expected";
                    if (message.sublocality != null && message.hasOwnProperty("sublocality"))
                        if (!$util.isString(message.sublocality))
                            return "sublocality: string expected";
                    if (message.address_lines != null && message.hasOwnProperty("address_lines")) {
                        if (!Array.isArray(message.address_lines))
                            return "address_lines: array expected";
                        for (var i = 0; i < message.address_lines.length; ++i)
                            if (!$util.isString(message.address_lines[i]))
                                return "address_lines: string[] expected";
                    }
                    if (message.recipients != null && message.hasOwnProperty("recipients")) {
                        if (!Array.isArray(message.recipients))
                            return "recipients: array expected";
                        for (var i = 0; i < message.recipients.length; ++i)
                            if (!$util.isString(message.recipients[i]))
                                return "recipients: string[] expected";
                    }
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        if (!$util.isString(message.organization))
                            return "organization: string expected";
                    return null;
                };
    
                /**
                 * Creates a PostalAddress message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.PostalAddress
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.PostalAddress} PostalAddress
                 */
                PostalAddress.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.PostalAddress)
                        return object;
                    var message = new $root.google.type.PostalAddress();
                    if (object.revision != null)
                        message.revision = object.revision | 0;
                    if (object.region_code != null)
                        message.region_code = String(object.region_code);
                    if (object.language_code != null)
                        message.language_code = String(object.language_code);
                    if (object.postal_code != null)
                        message.postal_code = String(object.postal_code);
                    if (object.sorting_code != null)
                        message.sorting_code = String(object.sorting_code);
                    if (object.administrative_area != null)
                        message.administrative_area = String(object.administrative_area);
                    if (object.locality != null)
                        message.locality = String(object.locality);
                    if (object.sublocality != null)
                        message.sublocality = String(object.sublocality);
                    if (object.address_lines) {
                        if (!Array.isArray(object.address_lines))
                            throw TypeError(".google.type.PostalAddress.address_lines: array expected");
                        message.address_lines = [];
                        for (var i = 0; i < object.address_lines.length; ++i)
                            message.address_lines[i] = String(object.address_lines[i]);
                    }
                    if (object.recipients) {
                        if (!Array.isArray(object.recipients))
                            throw TypeError(".google.type.PostalAddress.recipients: array expected");
                        message.recipients = [];
                        for (var i = 0; i < object.recipients.length; ++i)
                            message.recipients[i] = String(object.recipients[i]);
                    }
                    if (object.organization != null)
                        message.organization = String(object.organization);
                    return message;
                };
    
                /**
                 * Creates a plain object from a PostalAddress message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.PostalAddress
                 * @static
                 * @param {google.type.PostalAddress} message PostalAddress
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PostalAddress.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.address_lines = [];
                        object.recipients = [];
                    }
                    if (options.defaults) {
                        object.revision = 0;
                        object.region_code = "";
                        object.language_code = "";
                        object.postal_code = "";
                        object.sorting_code = "";
                        object.administrative_area = "";
                        object.locality = "";
                        object.sublocality = "";
                        object.organization = "";
                    }
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        object.revision = message.revision;
                    if (message.region_code != null && message.hasOwnProperty("region_code"))
                        object.region_code = message.region_code;
                    if (message.language_code != null && message.hasOwnProperty("language_code"))
                        object.language_code = message.language_code;
                    if (message.postal_code != null && message.hasOwnProperty("postal_code"))
                        object.postal_code = message.postal_code;
                    if (message.sorting_code != null && message.hasOwnProperty("sorting_code"))
                        object.sorting_code = message.sorting_code;
                    if (message.administrative_area != null && message.hasOwnProperty("administrative_area"))
                        object.administrative_area = message.administrative_area;
                    if (message.locality != null && message.hasOwnProperty("locality"))
                        object.locality = message.locality;
                    if (message.sublocality != null && message.hasOwnProperty("sublocality"))
                        object.sublocality = message.sublocality;
                    if (message.address_lines && message.address_lines.length) {
                        object.address_lines = [];
                        for (var j = 0; j < message.address_lines.length; ++j)
                            object.address_lines[j] = message.address_lines[j];
                    }
                    if (message.recipients && message.recipients.length) {
                        object.recipients = [];
                        for (var j = 0; j < message.recipients.length; ++j)
                            object.recipients[j] = message.recipients[j];
                    }
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = message.organization;
                    return object;
                };
    
                /**
                 * Converts this PostalAddress to JSON.
                 * @function toJSON
                 * @memberof google.type.PostalAddress
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PostalAddress.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PostalAddress;
            })();
    
            return type;
        })();
    
        return google;
    })();

    return $root;
});
