user nginx;

worker_processes auto;

worker_rlimit_nofile 10240;

# Leave this empty for now
events {}


http {
    error_page 500 502 503 504  /static/500.html;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
					  '$status $body_bytes_sent "$http_referer" '
					  '"$http_user_agent"';

    log_format grpc_json escape=json '{"timestamp":"$time_iso8601","client":"$remote_addr",'
                                      '"uri":"$uri","http-status":$status,'
                                      '"grpc-status":$grpc_status,"upstream":"$upstream_addr"'
                                      '"rx-bytes":$request_length,"tx-bytes":$bytes_sent}';

    map $upstream_trailer_grpc_status $grpc_status {
        default $upstream_trailer_grpc_status; # We normally expect to receive
                                               # grpc-status as a trailer
        ''      $sent_http_grpc_status;        # Else use the header, regardless of
                                               # who generated it
    }

	map $http_upgrade $connection_upgrade {
		default upgrade;
		''        close;
	}

    upstream grpc-registry {
        server registry-proxy:9001;
    }

    upstream http-scope {
        server anymetrica-scope:3000;
    }

    proxy_request_buffering off;

    server {
        listen 80;
        listen [::]:80 ipv6only=on;

        listen 443 ssl;
        listen [::]:443 ipv6only=on ssl;
        ssl_certificate         /etc/nginx/certs/anymetrica.com.pem;
        ssl_certificate_key     /etc/nginx/certs/anymetrica.com.key;

        client_max_body_size 0;
        client_body_temp_path client_body_temp;
        proxy_temp_path proxy_temp;
        proxy_request_buffering off;

        # Front-end debug thing
        #location /sockjs-node {
        #    proxy_pass http://http-scope;
        #    proxy_http_version 1.1;
        #    proxy_set_header Upgrade $http_upgrade;
        #    proxy_set_header Connection $connection_upgrade;
        #}
        location /grpc-ws {
            proxy_pass http://grpc-registry;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            #rewrite ^/grpc-ws(.*)$ /$1 last;
        }

        location / {
            proxy_pass http://http-scope;
        }

        location = /error502grpc {
            internal;
            default_type application/grpc;
            add_header grpc-status 14;
            add_header grpc-message "unavailable";
            return 204;
        }
    }
}
