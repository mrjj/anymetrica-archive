{
  "version": "0.6.22",
  "private": true,
  "entry": {
    "index": "."
  },
  "main": "dist/index.js",
  "author": {
    "name": "Ilya Kutukov",
    "email": "post.ilya@gmail.com"
  },
  "license": "SEE LICENSE IN LICENCE.md",
  "name": "anymetrica",
  "description": "AnyMetrica",
  "devDependencies": {
    "fluent-ffmpeg": "2.1.2",
    "lodash.get": "4.4.2",
    "eslint": "5.16.0",
    "eslint-plugin-flowtype": "3.6.1"
  },
  "dependencies": {
    "parst": "1.0.5",
    "anymetrica-registry": "../anymetrica-registry",
    "anymetrica-scope": "../anymetrica-scope",
    "anymetrica-utils": "../anymetrica-utils",
    "concurrently": "4.1.0",
    "dicker": "https://github.com/mrjj/dicker#refs/tags/2.9.2",
    "execa": "1.0.0",
    "shelljs": "0.8.3"
  },
  "scripts": {
    "clean": "yarn run clean:cache && yarn run clean:locks && yarn run clean:libs",
    "clean:cache": "yarn cache clean --force && if [[ $(command -v yarn) ]] ; then yarn cache clean ; fi",
    "clean:locks": "rm -f ./package-lock.json && rm -f ./yarn.lock",
    "clean:libs": "rm -rf ./node_modules",
    "build:infra": "yarn run docker:login && dicker infra/build.yaml --force-rm",
    "build:oltp": "yarn install ; yarn run docker:login && dicker oltp/build.yaml --force-rm",
    "build:olap": "yarn run docker:login && dicker olap/build.yaml --force-rm",
    "build:sdk": "yarn config set scripts-prepend-node-path true && cd ./anymetrica-sdk && yarn run build && chmod a+x ./build/sdk-linux && chmod a+x ./build/sdk-macos && popd",
    "build": "yarn run docker:login && yarn run build:oltp && yarn run build:olap && yarn run build:infra",
    "dev": "docker run --rm --name anymetrica-dev-nginx-container -p 8000:80 -v $(pwd)/deploy/nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro nginx:1.15.8-alpine",
    "dev:compose": "yarn rum docker:login && yarn run docker:dev",
    "start": "yarn run docker:login && yarn run docker:prod",
    "docker:pull": "yarn run docker:login && docker-compose -f ./deploy/docker-compose.yaml pull",
    "docker:clean": "docker image prune -f && [ -n \"$(docker ps -aq)\" ] && docker stop $(docker ps -aq) ; [ -n \"$(docker ps -aq)\" ] && docker rm $(docker ps -aq) ; [ -n \"$(docker images -q)\" ] && docker image rm -f $(docker image ls) ; [ -n \"$(docker volume list -q)\" ] && docker volume rm $(docker volume list -q)",
    "docker:login": "echo 'noop'",
    "docker:login:op": "docker login https://some.regestry.address:443 --username robot --password DEFINEME",
    "docker:dev": "NGINX_HTTP_PORT=8000 NGINX_HTTPS_PORT=8443 docker-compose -f ./deploy/docker-compose.yaml up --remove-orphans --force-recreate",
    "docker:prod": "export NGINX_HTTP_PORT=80 NGINX_HTTPS_PORT=443 NODE_ENV=production && docker-compose -f ./deploy/docker-compose.yaml up --remove-orphans --force-recreate -d",
    "start:infra": "docker-compose -f ./deploy/docker-compose.infra.yaml  up --remove-orphans --force-recreate",
    "docker:stop": "docker-compose -f ./deploy/docker-compose.yaml down",
    "deploy:stage": "bash ./deploy/deploy.sh",
    "spectrogramm": "node ./scripts/spectrogram.js DATA/downloads/ideal-01s/ideal-01x01.mp4 ./~data/output/ideal-01s",
    "deploy:swarm": "bash ./scripts/deploy_swarm_master.sh",
    "tensorboard": "pushd DATA/diarization/output/ ; tensorboard --logdir=embedding_models --host=localhost ; popd",
    "diarization:train": "pushd ./notebooks/diarization; source activate jenv ; python3 ./train.py ; popd",
    "diarization:clear:cache": "pushd ./notebooks/diarization; source activate jenv ; python3 ./train.py clearcache ; popd",
    "w2l:import:timit": "bash ./olap/wav2letter/wav2letter_import_timit.sh",
    "w2l:import:libri": "bash ./olap/wav2letter/import_libri.sh",
    "w2l:train": "yarn run w2l:train:1",
    "w2l:train:1": "bash ./olap/wav2letter/train.sh",
    "w2l:train:4": "bash ./olap/wav2letter/train_mpi.sh",
    "w2l:train:4:continue": "bash ./olap/wav2letter/train_mpi_continue.sh",
    "w2l:decode": "yarn run w2l:decode:other",
    "w2l:decode:clean": "bash ./olap/wav2letter/decode.sh clean",
    "w2l:decode:other": "bash ./olap/wav2letter/decode.sh other",
    "sv:import": "bash ./olap/sv/import.sh",
    "sv:train": "bash ./olap/sv/run.sh cpu train",
    "sv:train:cuda": "bash ./olap/sv/run.sh cpu train",
    "sv:test:cpu": "bash ./olap/sv/run.sh cpu test",
    "sv:test:cuda": "bash ./olap/sv/run.sh cuda test",
    "sv:export:cpu": "bash ./olap/sv/export.sh cpu",
    "sv:export:cuda": "bash ./olap/sv/export.sh cuda",
    "sv:x": "bash ./olap/sv/embeddings.sh",
    "uis-rnn:train:cpu": "bash ./olap/sv/uis-rnn_train.sh cpu",
    "uis-rnn:train:cuda": "bash ./olap/sv/uis-rnn_train.sh cuda",
    "uis-rnn:test": "bash ./olap/sv/uis-rnn_test.sh",
    "s2s:download:lm": "bash ./olap/s2s/run_download_lm.sh",
    "s2s:download:librispeech": "bash ./olap/s2s/run_download_librispeech.sh",
    "s2s:train": "bash ./olap/s2s/run_train.sh",
    "s2s:train:lang:wkt103": "bash ./olap/s2s/run.sh lstm-wkt103-mixed $(pwd)/DATA/infer/wikitext-103-raw train_eval",
    "s2s:infer:lang:wkt103": "bash ./olap/s2s/run.sh lstm-wkt103-mixed $(pwd)/DATA/infer/wikitext-103-raw infer",
    "s2s:train:lang:wkt2": "bash ./olap/s2s/run.sh lstm-wkt2-fp32 $(pwd)/DATA/infer/wikitext-2-raw train_eval",
    "s2s:infer:lang:wkt2": "bash ./olap/s2s/run.sh lstm-wkt2-fp32 $(pwd)/DATA/infer/wikitext-2-raw infer",
    "s2s:train:lang:small": "bash ./olap/s2s/run.sh lstm-test-small $(pwd)/DATA/infer/wikitext-2-raw train_eval",
    "s2s:infer:lang:small": "bash ./olap/s2s/run.sh lstm-test-small $(pwd)/DATA/infer/wikitext-2-raw infer",
    "s2s:train:speech:libri": "bash ./olap/s2s/run.sh w2lplus_large_8gpus_mp $(pwd)/DATA/infer/data/ train_eval",
    "s2s:infer:speech:libri": "bash ./olap/s2s/run.sh w2lplus_large_8gpus_mp $(pwd)/DATA/infer/data/ infer --infer_output_file=output/output.txt",
    "s2s:eval:speech:libri": "bash ./olap/s2s/run.sh w2lplus_large_8gpus_mp $(pwd)/DATA/infer/data/ eval",
    "s2s:train:speech:small": "bash ./olap/s2s/run.sh ds2_small_4gpus $(pwd)/DATA/infer/data/ train",
    "s2s:infer:speech:small": "bash ./olap/s2s/run.sh ds2_small_4gpus $(pwd)/DATA/infer/data/ infer --infer_output_file=output/output.txt",
    "s2s:infer:speech:jasper": "bash ./olap/s2s/run.sh jasper_10x5_8gpus_dr_mp $(pwd)/DATA/infer/data/ infer --infer_output_file=output/output.txt"
  }
}
